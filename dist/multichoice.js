(()=>{var e=e||{};e.MultiChoiceScore4LMS=function(t,n,a){if(!(this instanceof e.MultiChoiceScore4LMS))return new e.MultiChoiceScore4LMS(t,n,a);var r=this;this.contentId=n,this.contentData=a,e.Question.call(r,"MultiChoiceScore4LMS");for(var s=e.jQuery,i=new EJS({text:'<ul class="h5p-answers" role="<%= role %>" aria-labelledby="<%= label %>">  <% for (var i=0; i < answers.length; i++) { %>    <li class="h5p-answer" role="<%= answers[i].role %>" tabindex="<%= answers[i].tabindex %>" aria-checked="<%= answers[i].checked %>" data-id="<%= i %>">      <div class="h5p-alternative-container">        <span class="h5p-alternative-inner"><%= answers[i].text %></span>      </div>      <div class="h5p-clearfix"></div>    </li>  <% } %></ul>'}),o=s.extend(!0,{image:null,question:"No question text provided",answers:[{tipsAndFeedback:{tip:"",chosenFeedback:"",notChosenFeedback:""},text:"Answer 1",correct:!0}],overallFeedback:[],weight:1,userAnswers:[],UI:{checkAnswerButton:"Check",submitAnswerButton:"Submit",showSolutionButton:"Show solution",tryAgainButton:"Try again",scoreBarLabel:"You got :num out of :total points",tipAvailable:"Tip available",feedbackAvailable:"Feedback available",readFeedback:"Read feedback",shouldCheck:"Should have been checked",shouldNotCheck:"Should not have been checked",noInput:"Input is required before viewing the solution",a11yCheck:"Check the answers. The responses will be marked as correct, incorrect, or unanswered.",a11yShowSolution:"Show the solution. The task will be marked with its correct solution.",a11yRetry:"Retry the task. Reset all responses and start the task over again."},behaviour:{enableRetry:!0,enableSolutionsButton:!0,enableCheckButton:!0,type:"auto",singlePoint:!0,randomAnswers:!1,showSolutionsRequiresInput:!0,autoCheck:!1,passPercentage:100,showScorePoints:!0}},t),c=0,h=0;h<o.answers.length;h++){var l=o.answers[h];l.tipsAndFeedback=l.tipsAndFeedback||{},o.answers[h].correct&&c++}var u=0===c;"auto"===o.behaviour.type?o.behaviour.singleAnswer=1===c:o.behaviour.singleAnswer="single"===o.behaviour.type;var d,p,w=function(){d.unbind("click",w),d.find(".h5p-feedback-button, .h5p-feedback-dialog").remove(),d.find(".h5p-has-feedback").removeClass("h5p-has-feedback"),p&&p.remove()},b=0,v=!1,f=function(e,t){p=s('<div class="h5p-feedback-dialog"><div class="h5p-feedback-inner"><div class="h5p-feedback-text" aria-hidden="true">'+t+"</div></div></div>"),e.find(s(".h5p-feedback-dialog")).length||p.appendTo(e.addClass("h5p-has-feedback"))};r.registerDomElements=function(){var e,t,n=o.media;if(n&&n.type&&n.type.library){var a=(n=n.type).library.split(" ")[0];"H5P.Image"===a?n.params.file&&r.setImage(n.params.file.path,{disableImageZooming:o.media.disableImageZooming||!1,alt:n.params.alt,title:n.params.title}):"H5P.Video"===a?n.params.sources&&r.setVideo(n):"H5P.Audio"===a&&n.params.files&&r.setAudio(n)}for(var c=0;c<o.answers.length;c++)o.answers[c].checkboxOrRadioIcon=(e=o.behaviour.singleAnswer,t=o.userAnswers.indexOf(c)>-1,e?t?"&#xe603;":"&#xe600;":t?"&#xe601;":"&#xe602;");r.setIntroduction('<div id="'+o.label+'">'+o.question+"</div>"),d=s(i.render(o)),r.setContent(d,{class:o.behaviour.singleAnswer?"h5p-radio":"h5p-check"});var h=s(".h5p-answer",d).each((function(e){var t=o.answers[e].tipsAndFeedback.tip;if(void 0!==t&&(t=t.trim()).replace(/&nbsp;/g,"").replace(/<p>/g,"").replace(/<\/p>/g,"").trim().length){s(this).addClass("h5p-has-tip");var n=s("<div/>",{class:"h5p-MultiChoiceScore4LMS-tipwrap","aria-label":o.UI.tipAvailable+"."}),a=s("<div>",{role:"button",tabindex:0,title:o.UI.tipsLabel,"aria-label":o.UI.tipsLabel,"aria-expanded":!1,class:"MultiChoiceScore4LMS-tip",appendTo:n});a.append('<span class="joubel-icon-tip-normal"><span class="h5p-icon-shadow"></span><span class="h5p-icon-speech-bubble"></span><span class="h5p-icon-info"></span></span>'),a.click((function(){var e=a.parents(".h5p-answer"),n=!e.children(".h5p-feedback-dialog").is(p);return w(),n?(a.attr("aria-expanded",!0),f(e,t),p.addClass("h5p-has-tip"),r.read(t)):a.attr("aria-expanded",!1),r.trigger("resize"),setTimeout((function(){d.click(w)}),100),!1})).keydown((function(e){if(32===e.which)return s(this).click(),!1})),s(".h5p-alternative-container",this).append(n)}})),l=function(e){if("true"!==e.attr("aria-disabled")){r.answered=!0;var t=parseInt(e.data("id"));if(o.behaviour.singleAnswer)o.userAnswers=[t],b=o.answers[t].correct?1:0,h.not(e).removeClass("h5p-selected").attr("tabindex","-1").attr("aria-checked","false"),e.addClass("h5p-selected").attr("tabindex","0").attr("aria-checked","true");else{if("true"===e.attr("aria-checked")){const n=o.userAnswers.indexOf(t);if(-1!==n&&o.userAnswers.splice(n,1),o.behaviour.autoCheck&&!o.behaviour.enableRetry)return;e.removeClass("h5p-selected").attr("aria-checked","false")}else o.userAnswers.push(t),e.addClass("h5p-selected").attr("aria-checked","true");y()}r.triggerXAPI("interacted"),g(e),o.userAnswers.length&&(r.showButton("check-answer"),r.hideButton("try-again"),r.hideButton("show-solution"),o.behaviour.autoCheck&&(o.behaviour.singleAnswer?A():(r.showCheckSolution(!0),b===r.getMaxScore()&&A())))}};h.click((function(){l(s(this))})).keydown((function(e){if(32===e.keyCode)return l(s(this)),!1;if(o.behaviour.singleAnswer)switch(e.keyCode){case 38:case 37:var t=s(this).prev();return t.length&&l(t.focus()),!1;case 40:case 39:var n=s(this).next();return n.length&&l(n.focus()),!1}})),o.behaviour.singleAnswer&&h.focus((function(){"true"!==s(this).attr("aria-disabled")&&h.not(this).attr("tabindex","-1")})).blur((function(){h.filter(".h5p-selected").length||h.first().add(h.last()).attr("tabindex","0")})),S(),o.behaviour.singleAnswer?b=o.userAnswers.length&&o.answers[o.userAnswers[0]].correct?1:0:y(),R&&o.behaviour.autoCheck&&(o.behaviour.singleAnswer||b===r.getMaxScore()?A():r.showCheckSolution(!0))},this.showAllSolutions=function(){v||(v=!0,d.find(".h5p-answer").each((function(e,t){var n=s(t);o.answers[e].correct?n.addClass("h5p-should").append(s("<span/>",{class:"h5p-solution-icon",html:o.UI.shouldCheck+"."})):n.addClass("h5p-should-not").append(s("<span/>",{class:"h5p-solution-icon",html:o.UI.shouldNotCheck+"."}))})).find(".h5p-question-plus-one, .h5p-question-minus-one").remove(),C(),d.find(".h5p-answer.h5p-should").first().focus(),r.hideButton("check-answer"),r.hideButton("show-solution"),o.behaviour.enableRetry&&r.showButton("try-again"),r.trigger("resize"))},this.showSolutions=function(){w(),r.showCheckSolution(),r.showAllSolutions(),C(),r.hideButton("try-again")};var g=function(e){e.removeClass("h5p-correct").removeClass("h5p-wrong").removeClass("h5p-should").removeClass("h5p-should-not").removeClass("h5p-has-feedback").find(".h5p-question-plus-one, .h5p-question-minus-one, .h5p-answer-icon, .h5p-solution-icon, .h5p-feedback-dialog").remove()};this.hideSolutions=function(){v=!1,g(s(".h5p-answer",d)),this.removeFeedback(),r.trigger("resize")},this.resetTask=function(){r.answered=!1,r.hideSolutions(),o.userAnswers=[],I(),r.showButton("check-answer"),r.hideButton("try-again"),r.hideButton("show-solution"),x(),d.find(".h5p-feedback-available").remove()};var k=function(){if(u)return o.weight;for(var e=0,t=0;t<o.answers.length;t++){var n=o.answers[t];n.correct&&(e+=void 0!==n.weight?n.weight:1)}return e};this.getMaxScore=function(){return o.behaviour.singleAnswer||o.behaviour.singlePoint?o.weight:k()};var A=function(){d.unbind("click",w),w(),o.behaviour.enableSolutionsButton&&r.showButton("show-solution"),o.behaviour.enableRetry&&r.showButton("try-again"),r.hideButton("check-answer"),r.showCheckSolution(),C();var e=r.createXAPIEventTemplate("answered");B(e),F(e),r.trigger(e)},S=function(){var e,t=s('[data-content-id="'+r.contentId+'"].h5p-content'),n=t.parents(".h5p-container");e=0!==n.length?n.last():0!==t.length?t:s(document.body),r.addButton("show-solution",o.UI.showSolutionButton,(function(){o.behaviour.showSolutionsRequiresInput&&!s('.h5p-answer[aria-checked="true"]',d).length?(r.updateFeedbackContent(o.UI.noInput),r.read(o.UI.noInput)):(y(),r.showAllSolutions())}),!1,{"aria-label":o.UI.a11yShowSolution}),!o.behaviour.enableCheckButton||o.behaviour.autoCheck&&o.behaviour.singleAnswer||r.addButton("check-answer",o.UI.checkAnswerButton,(function(){r.answered=!0,A()}),!0,{"aria-label":o.UI.a11yCheck},{confirmationDialog:{enable:o.behaviour.confirmCheckDialog,l10n:o.confirmCheck,instance:r,$parentElement:e},contentData:r.contentData,textIfSubmitting:o.UI.submitAnswerButton}),r.addButton("try-again",o.UI.tryAgainButton,(function(){if(r.resetTask(),o.behaviour.randomAnswers){var e=M;M=P();var t=d.find(".h5p-answer"),n=[];for(h=0;h<t.length;h++)n[h]=s(t[h]).find(".h5p-MultiChoiceScore4LMS-tipwrap");for(h=0;h<t.length;h++)s(t[h]).find(".h5p-alternative-inner").html(o.answers[h].text),s(n[h]).detach().appendTo(s(t[M.indexOf(e[h])]).find(".h5p-alternative-container"))}}),!1,{"aria-label":o.UI.a11yRetry},{confirmationDialog:{enable:o.behaviour.confirmRetryDialog,l10n:o.confirmRetry,instance:r,$parentElement:e}})},m=function(e,t){f(e,t);var n=s("<div/>",{class:"h5p-hidden-read h5p-feedback-available","aria-label":o.UI.feedbackAvailable+"."});s("<div/>",{role:"button",tabindex:0,"aria-label":o.UI.readFeedback+".",appendTo:n,on:{keydown:function(e){if(32===e.which)return r.read(t),!1}}}),n.appendTo(e)};this.showCheckSolution=function(t){var n;o.behaviour.singleAnswer||o.behaviour.singlePoint||!o.behaviour.showScorePoints||(n=new e.Question.ScorePoints),d.find(".h5p-answer").each((function(e,a){var r=s(a),i=o.answers[e],c="true"===r.attr("aria-checked");if(c&&(i.correct?r.hasClass("h5p-correct")||r.addClass("h5p-correct").append(s("<span/>",{class:"h5p-answer-icon",html:o.UI.correctAnswer+"."})):r.hasClass("h5p-wrong")||r.addClass("h5p-wrong").append(s("<span/>",{class:"h5p-answer-icon",html:o.UI.wrongAnswer+"."})),n)){var h=r[0].querySelector(".h5p-alternative-container");o.behaviour.autoCheck&&null!==h.querySelector(".h5p-question-plus-one, .h5p-question-minus-one")||h.appendChild(n.getElement(i.correct))}t||(c&&void 0!==i.tipsAndFeedback.chosenFeedback&&""!==i.tipsAndFeedback.chosenFeedback?m(r,i.tipsAndFeedback.chosenFeedback):c||void 0===i.tipsAndFeedback.notChosenFeedback||""===i.tipsAndFeedback.notChosenFeedback||m(r,i.tipsAndFeedback.notChosenFeedback))}));var a=r.getMaxScore();b===a&&(r.hideButton("check-answer"),r.hideButton("try-again"),r.hideButton("show-solution")),t||this.setFeedback(function(t,n){var a=t/n;return e.Question.determineOverallFeedback(o.overallFeedback,a).replace("@score",t).replace("@total",n)}(b,a),b,a,o.UI.scoreBarLabel),r.trigger("resize")};var C=function(){s(".h5p-answer",d).attr({"aria-disabled":"true",tabindex:"-1"})},x=function(){s(".h5p-answer",d).attr("aria-disabled","false")},y=function(){b=0;for(const e of o.userAnswers){const t=o.answers[e],n=void 0!==t.weight?t.weight:1;t.correct?b+=n:b-=n}b<0&&(b=0),!o.userAnswers.length&&u&&(b=o.weight),o.behaviour.singlePoint&&(b=100*b/k()>=o.behaviour.passPercentage?o.weight:0)},I=function(){var e=s(".h5p-answer",d).removeClass("h5p-selected").attr("aria-checked","false");o.behaviour.singleAnswer?e.first().attr("tabindex","0"):e.attr("tabindex","0"),e.first().focus(),y()};this.getXAPIData=function(){var e=this.createXAPIEventTemplate("answered");return B(e),F(e),{statement:e.data.statement}};var M,B=function(e){var t=e.getVerifiedStatementValue(["object","definition"]);t.description={"en-US":s("<div>"+o.question+"</div>").text()},t.type="http://adlnet.gov/expapi/activities/cmi.interaction",t.interactionType="choice",t.correctResponsesPattern=[],t.choices=[];for(var n=0;n<o.answers.length;n++)t.choices[n]={id:o.answers[n].originalOrder+"",description:{"en-US":s("<div>"+o.answers[n].text+"</div>").text()}},o.answers[n].correct&&(o.singleAnswer?t.correctResponsesPattern.push(""+o.answers[n].originalOrder):(t.correctResponsesPattern.length?t.correctResponsesPattern[0]+="[,]":t.correctResponsesPattern.push(""),t.correctResponsesPattern[0]+=o.answers[n].originalOrder))},F=function(e){var t=r.getMaxScore(),n=100*b/t>=o.behaviour.passPercentage;e.setScoredResult(b,t,r,!0,n),void 0===o.userAnswers&&y();for(var a="",s=0;s<o.userAnswers.length;s++)""!==a&&(a+="[,]"),a+=void 0===M?o.userAnswers[s]:M[o.userAnswers[s]];e.data.statement.result.response=a},P=function(){o.answers=e.shuffleArray(o.answers);var t=[];for(h=0;h<o.answers.length;h++)t[h]=o.answers[h].originalOrder;return t};for(h=0;h<o.answers.length;h++)o.answers[h].originalOrder=h;if(o.behaviour.randomAnswers&&(M=P()),o.userAnswers=[],a&&void 0!==a.previousState&&a.previousState.answers){if(M)for(h=0;h<a.previousState.answers.length;h++)for(var U=0;U<M.length;U++)M[U]===a.previousState.answers[h]&&o.userAnswers.push(U);else o.userAnswers=a.previousState.answers;y()}for(var R=!1,L=0;L<o.answers.length;L++){var T=o.answers[L];o.behaviour.singleAnswer?(T.role="radio",0===o.userAnswers.length?0!==h&&h!==o.answers.length||(T.tabindex="0"):-1!==o.userAnswers.indexOf(L)&&(T.tabindex="0",T.checked="true",R=!0)):(T.role="checkbox",T.tabindex="0",-1!==o.userAnswers.indexOf(L)&&(T.checked="true",R=!0)),void 0===T.tabindex&&(T.tabindex="-1"),void 0===T.checked&&(T.checked="false")}e.MultiChoiceScore4LMS.counter=void 0===e.MultiChoiceScore4LMS.counter?0:e.MultiChoiceScore4LMS.counter+1,o.role=o.behaviour.singleAnswer?"radiogroup":"group",o.label="h5p-mcq"+e.MultiChoiceScore4LMS.counter,this.getCurrentState=function(){var e={};if(M){e.answers=[];for(var t=0;t<o.userAnswers.length;t++)e.answers.push(M[o.userAnswers[t]])}else e.answers=o.userAnswers;return e},this.getAnswerGiven=function(e){return!e&&this.answered||o.userAnswers.length>0||u},this.getScore=function(){return b},this.getTitle=function(){return e.createTitle(this.contentData&&this.contentData.metadata&&this.contentData.metadata.title?this.contentData.metadata.title:"Multiple Choice")}},e.MultiChoiceScore4LMS.prototype=Object.create(e.Question.prototype),e.MultiChoiceScore4LMS.prototype.constructor=e.MultiChoiceScore4LMS})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,