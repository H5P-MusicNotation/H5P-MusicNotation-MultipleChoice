"use strict";
(self["webpackChunks4lms_multichoice"] = self["webpackChunks4lms_multichoice"] || []).push([["Users_nowakowski_Documents_Git_Projects_VerovioScoreEditor_src_scripts_js_VerovioScoreEditor_js"],{

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/Core.js":
/*!**************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/Core.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const VerovioWrapper_1 = __webpack_require__(/*! ./utils/VerovioWrapper */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/VerovioWrapper.js");
const random_1 = __webpack_require__(/*! ./utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const constants_1 = __webpack_require__(/*! ./constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const InsertModeHandler_1 = __webpack_require__(/*! ./handlers/InsertModeHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/InsertModeHandler.js");
const DeleteHandler_1 = __webpack_require__(/*! ./handlers/DeleteHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/DeleteHandler.js");
const NoteDragHandler_1 = __webpack_require__(/*! ./handlers/NoteDragHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/NoteDragHandler.js");
const Mouse2MEI_1 = __webpack_require__(/*! ./utils/Mouse2MEI */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/Mouse2MEI.js");
const GlobalKeyboardHandler_1 = __webpack_require__(/*! ./handlers/GlobalKeyboardHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/GlobalKeyboardHandler.js");
const MusicPlayer_1 = __webpack_require__(/*! ./MusicPlayer */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/MusicPlayer.js");
const meiConverter = __webpack_require__(/*! ./utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const meiOperation = __webpack_require__(/*! ./utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const mei_template_1 = __webpack_require__(/*! ./assets/mei_template */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/assets/mei_template.js");
const SVGFiller_1 = __webpack_require__(/*! ./utils/SVGFiller */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/SVGFiller.js");
const ScoreGraph_1 = __webpack_require__(/*! ./datastructures/ScoreGraph */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/ScoreGraph.js");
const WindowHandler_1 = __webpack_require__(/*! ./handlers/WindowHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/WindowHandler.js");
const SidebarHandler_1 = __webpack_require__(/*! ./handlers/SidebarHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/SidebarHandler.js");
const LabelHandler_1 = __webpack_require__(/*! ./handlers/LabelHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/LabelHandler.js");
const ModHandler_1 = __webpack_require__(/*! ./handlers/ModHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ModHandler.js");
const cq = __webpack_require__(/*! ./utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const coordinates = __webpack_require__(/*! ./utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const ffbb = __webpack_require__(/*! ./utils/firefoxBBoxes */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/firefoxBBoxes.js");
const TooltipHandler_1 = __webpack_require__(/*! ./handlers/TooltipHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/TooltipHandler.js");
/**
 * The core component the Editor. This manages the database,
 * the verovio toolkit, the cache, and undo/redo stacks.
 */
class Core {
  constructor(containerId) {
    this.firstStart = true;
    this.reloadDataFunction = function reloadData() {
      return this.loadData("", this.currentMEI, false);
    }.bind(this);
    this.loadDataFunction = function loadDataFunction(pageURI, data, isUrl) {
      return this.loadData(pageURI, data, isUrl);
    }.bind(this);
    /**
     * Delete array of notes from score
     */
    this.delete = function d(notes) {
      return new Promise(resolve => {
        this.getMEI("").then(mei => {
          meiOperation.removeFromMEI(notes, this.currentMEIDoc).then(updatedMEI => {
            if (updatedMEI != undefined) {
              this.loadData("", updatedMEI, false).then(() => {
                resolve(true);
              });
            } else {
              resolve(true);
            }
          });
        });
      });
    }.bind(this);
    /**
     *
     */
    this.insert = function insert(newNote, replace = false) {
      this.lastInsertedNoteId = newNote.id;
      this.container.querySelectorAll(".marked").forEach(m => m.classList.remove("marked"));
      return new Promise((resolve, reject) => {
        this.getMEI("").then(mei => {
          var updatedMEI = meiOperation.addToMEI(newNote, this.currentMEIDoc, replace, this.scoreGraph);
          if ((updatedMEI === null || updatedMEI === void 0 ? void 0 : updatedMEI.documentElement.innerHTML.indexOf(newNote.id)) === -1) {
            reject();
          }
          if (updatedMEI != undefined) {
            this.loadData("", updatedMEI, false).then(() => {
              resolve(true);
            });
          } else {
            reject();
          }
        });
      });
    }.bind(this);
    /**
     * Undo the last action performed on a specific page.
     * @param pageURI - The URI of the selected page.
     * @returns If the action was undone.
     */
    this.undo = function undo(pageURI = "") {
      return new Promise(resolve => {
        if (this.container.classList.contains("annotMode")) {
          this.undoAnnotationStacks.pop();
          const annotstate = this.undoAnnotationStacks.pop();
          if (annotstate != undefined) {
            var annotCanvas = this.container.querySelector("#annotationCanvas");
            var annotList = this.container.querySelector("#annotList");
            this.redoAnnotationStacks.push([annotCanvas, annotList]);
            this.undoAnnotationStacks.push([annotCanvas, annotList]);
            annotCanvas.replaceWith(annotstate[0]);
            annotList.replaceWith(annotstate[1]);
            this.keyboardHandler.resetListeners();
            this.container.dispatchEvent(new Event("annotationCanvasChanged"));
          }
          resolve(true);
          return;
        }
        this.undoMEIStacks.pop(); // get rid of currentMEI, since last in line (=initial) MEI is not accessible through verovio
        const meistate = this.undoMEIStacks.pop();
        if (meistate != undefined) {
          this.redoMEIStacks.push(this.currentMEI);
          this.loadData(pageURI, meistate, false).then(() => resolve(true));
        } else {
          resolve(false);
        }
      });
    }.bind(this);
    /**
     * Redo the last action performed on a page.
     * @param pageURI - The page URI.
     * @returns If the action was redone.
     */
    this.redo = function redo(pageURI = "") {
      return new Promise(resolve => {
        if (this.container.classList.contains("annotMode")) {
          const annotstate = this.redoAnnotationStacks.pop();
          if (annotstate != undefined) {
            var annotCanvas = this.container.querySelector("#annotationCanvas");
            var annotList = this.container.querySelector("#annotList");
            this.undoAnnotationStacks.push([annotCanvas, annotList]);
            annotCanvas.replaceWith(annotstate[0]);
            annotList.replaceWith(annotstate[1]);
            this.keyboardHandler.resetListeners();
          }
          resolve(true);
          return;
        }
        const meistate = this.redoMEIStacks.pop();
        if (meistate !== undefined) {
          this.undoMEIStacks.push(this.currentMEI);
          this.loadData(pageURI, meistate, false).then(() => resolve(true));
        } else {
          resolve(false);
        }
      });
    }.bind(this);
    ////// VEROVIO REQUESTS /////////////////
    /**
     * Edits pitch position of given note via verovio toolkit
     * @param action
     * @returns
     */
    this.edit = function edit(action) {
      return new Promise(resolve => {
        action.param = action.param;
        if (action.param.x != undefined && action.param.y != undefined) {
          var message = {
            action: "edit",
            editorAction: action
          };
          var response;
          response = this.verovioWrapper.setMessage(message);
          // MEI ist already updated after edit (setMessage)
          this.getMEI("").then(mei => {
            this.loadData("", mei, false).then(() => {
              message = {
                action: "getElementAttr",
                //@ts-ignore
                elementId: action.param.elementId
              };
              response = this.verovioWrapper.setMessage(message);
              resolve(response.result);
            });
          });
        } else {
          var nn = this.m2m.getNewNote();
          var editNote = this.currentMEIDoc.getElementById(nn.nearestNoteId);
          editNote.setAttribute("oct", nn.oct);
          editNote.setAttribute("pname", nn.pname);
          this.loadData("", meiConverter.restoreXmlIdTags(this.currentMEIDoc), false).then(() => {
            resolve(true);
          });
        }
      });
    }.bind(this);
    this.getElementAttr = function getElementAttr(id) {
      const message = {
        action: "getElementAttr",
        elementId: id
      };
      return this.verovioWrapper.setMessage(message).attributes;
    }.bind(this);
    this.resetLastInsertedNoteId = function () {
      this.lastInsertedNoteId = undefined;
    }.bind(this);
    this.doHideUI = false;
    this.hideOptions = {};
    this.styleOptions = {};
    this.attributeOptions = {};
    this.containerId = containerId;
    this.container = document.getElementById(containerId);
    this.undoMEIStacks = Array();
    this.redoMEIStacks = new Array();
    this.undoAnnotationStacks = new Array();
    //this.undoAnnotationStacks.push(new Array<Element>())
    this.redoAnnotationStacks = new Array();
    //this.redoAnnotationStacks.push(new Array<Element>())
    this.windowHandler = new WindowHandler_1.default();
    this.svgFiller = new SVGFiller_1.default();
  }
  /**
   * Load data into the verovio toolkit and update the cache.
  */
  loadData(pageURI, data, isUrl, options = null) {
    // if(options !== null){
    //   if(options.deleteLastNoteInserted){
    //     this.lastInsertedNoteId = undefined
    //   }
    // }
    this.verovioWrapper = this.verovioWrapper || new VerovioWrapper_1.default();
    if (cq.getRootSVG(this.containerId) !== null) {
      this.svgFiller.cacheClasses().cacheScales();
      cq.getRootSVG(this.containerId).remove();
    }
    var waitingFlag = "waiting";
    if (cq.getRootSVG(this.containerId) !== null) {
      document.body.classList.add(waitingFlag);
    }
    document.getElementById(this.containerId).dispatchEvent(new Event("loadingStart"));
    return new Promise((resolve, reject) => {
      var _a, _b;
      var d;
      var u;
      var type = data === null || data === void 0 ? void 0 : data.constructor.name;
      switch (type) {
        case 'String':
          data = meiConverter.reformatMEI(data);
          d = data;
          u = isUrl;
          break;
        case 'XMLDocument':
          data = meiOperation.disableFeatures(["grace", "arpeg"], data); // for Debugging
          this.svgFiller.copyClassesFromMei(data);
          d = new XMLSerializer().serializeToString(data);
          u = false;
          break;
        case 'HTMLUnknownElement':
          d = new XMLSerializer().serializeToString(data);
          u = false;
          break;
        case undefined:
          d = new mei_template_1.default().emptyMEI();
          u = false;
          break;
        default:
          reject("Wrong Datatype: " + type);
          break;
      }
      const message = {
        id: random_1.uuidv4(),
        action: 'renderData',
        mei: d,
        isUrl: u
      };
      var response;
      var svg;
      response = this.verovioWrapper.setMessage(message);
      svg = response.mei;
      svg = svg.replace("<svg", "<svg id=\"" + constants_1.constants._ROOTSVGID_ + "\"");
      try {
        document.querySelector("#" + this.containerId + "> #svg_output").innerHTML = svg;
      } catch (ignore) {
        console.log("Error inserting SVG");
      }
      this.svgFiller.distributeIds(this.container.querySelector("#rootSVG .definition-scale"));
      this.container.querySelector("#rootSVG").setAttribute("preserveAspectRatio", "xMidYMid meet");
      /**
       * some partial load things
       */
      this.currentMEIDoc;
      var rootBBox = this.container.querySelector("#rootSVG").getBoundingClientRect();
      var rootWidth = rootBBox.width.toString();
      var rootHeigth = rootBBox.height.toString();
      this.container.querySelector("#rootSVG").setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "));
      this.container.querySelector("#rootSVG").removeAttribute("height");
      this.container.querySelector("#rootSVG").removeAttribute("width");
      document.body.classList.remove(waitingFlag);
      this.createSVGOverlay(true);
      this.svgFiller.setXY((_a = this.windowHandler) === null || _a === void 0 ? void 0 : _a.getX(), (_b = this.windowHandler) === null || _b === void 0 ? void 0 : _b.getY());
      this.getMEI("").then(mei => {
        var _a;
        this.currentMEI = mei;
        this.currentMEIDoc = this.getCurrentMEI(true);
        console.log(this.currentMEIDoc);
        this.svgFiller.setContainerId(this.containerId).loadClasses().loadScales().fillSVG(this.currentMEIDoc);
        this.musicplayer = this.musicplayer || new MusicPlayer_1.default(this.containerId);
        this.musicplayer.setMEI(this.currentMEIDoc);
        this.undoMEIStacks.push(mei);
        //mark if note was inserted (enables direct manipulation)
        // document.querySelectorAll(".marked").forEach(m => {
        //   m.classList.remove("marked")
        // })
        //if(document.querySelectorAll(".marked").length === 0){
        var lastAddedClass = "lastAdded";
        document.querySelectorAll("." + lastAddedClass).forEach(m => {
          m.classList.remove(lastAddedClass);
        });
        if (this.lastInsertedNoteId != undefined && ["textmode", "clickmode"].some(mode => this.container.classList.contains(mode))) {
          (_a = this.container.querySelector("#" + this.lastInsertedNoteId)) === null || _a === void 0 ? void 0 : _a.classList.add(lastAddedClass);
        }
        //}
        // MusicPlayer stuff
        this.getMidi().then(midi => {
          this.musicplayer.setMidi(midi);
          this.musicplayer.addCanvas();
          this.resolveMidiTimes().then(md => {
            var _a;
            this.musicplayer.setMidiTimes(md);
            this.musicplayer.update();
            this.scoreGraph = new ScoreGraph_1.default(this.currentMEIDoc, this.containerId, md);
            //the first condition should only occur at first starting the score editor
            if (this.container.querySelector(".lastAdded") === null && this.scoreGraph.getCurrentNode() == undefined) {
              this.scoreGraph.setCurrentNodeById(this.container.querySelector(".staff > .layer").firstElementChild.id);
            } else {
              //second condition always sets lastAdded Note
              this.scoreGraph.setCurrentNodeById((_a = this.container.querySelector(".lastAdded")) === null || _a === void 0 ? void 0 : _a.id);
            }
            this.musicplayer.setScoreGraph(this.scoreGraph);
            this.initializeHandlers();
            document.getElementById(this.containerId).dispatchEvent(new Event("loadingEnd"));
            this.svg = new XMLSerializer().serializeToString(this.container.querySelector("#svg_output"));
            if (this.meiChangedCallback != undefined) {
              this.meiChangedCallback(this.currentMEI);
            }
            resolve(svg);
          });
        });
      });
    });
  }
  /**
   * Initialize Handlers
   */
  initializeHandlers() {
    //must be first!!!
    if (this.m2m == undefined) {
      this.m2m = new Mouse2MEI_1.Mouse2MEI();
    } else {
      //   this.m2m.update()
    }
    this.m2m.setContainerId(this.containerId).setUpdateOverlayCallback(this.createSVGOverlay).setCurrentMEI(this.currentMEIDoc).update();
    //.setMouseEnterElementListeners()
    this.insertModeHandler = this.insertModeHandler || new InsertModeHandler_1.default(this.containerId);
    this.deleteHandler = this.deleteHandler || new DeleteHandler_1.default(this.containerId);
    this.noteDragHandler = new NoteDragHandler_1.default(this.containerId);
    this.keyboardHandler = this.keyboardHandler || new GlobalKeyboardHandler_1.default(this.containerId);
    this.sidebarHandler = this.sidebarHandler || new SidebarHandler_1.default();
    this.labelHandler = this.labelHandler || new LabelHandler_1.default(this.containerId);
    this.modHandler = this.modHandler || new ModHandler_1.default(this.containerId);
    this.tooltipHandler = this.tooltipHandler || new TooltipHandler_1.default();
    this.dispatchFunctions();
  }
  /**
   * distribute Callback functions for each element which uses some information from of the Core (Handlers, Musicplayer, Callbacks, etc)
   */
  dispatchFunctions() {
    this.labelHandler.setContainerId(this.containerId).setCurrentMEI(this.currentMEIDoc).reset();
    this.insertModeHandler.setContainerId(this.containerId).setM2M(this.m2m).setMusicPlayer(this.musicplayer).setDeleteHandler(this.deleteHandler).setLabelHandler(this.labelHandler).activateHarmonyMode().activateSelectionMode().setInsertCallback(this.insert).setDeleteCallback(this.delete).setLoadDataCallback(this.loadDataFunction).setScoreGraph(this.scoreGraph).setUndoAnnotationStacks(this.undoAnnotationStacks).resetModes().resetCanvas();
    this.deleteHandler.setContainerId(this.containerId).setDeleteCallback(this.delete).update();
    this.noteDragHandler.setContainerId(this.containerId).setCurrentMEI(this.currentMEIDoc).setInsertCallback(this.insert).setMusicPlayer(this.musicplayer).setM2M(this.m2m).resetListeners();
    this.keyboardHandler.setContainerId(this.containerId).setUndoCallback(this.undo).setRedoCallback(this.redo).setCurrentMei(this.currentMEIDoc).setMusicPlayer(this.musicplayer).setHarmonyHandlerCallback(this.labelHandler.setHarmonyLabelHandlerKey).setLoadDataCallback(this.loadDataFunction).setScoreGraph(this.scoreGraph).resetLastInsertedNoteCallback(this.resetLastInsertedNoteId).resetListeners();
    this.sidebarHandler.setContainerId(this.containerId).setCurrentMei(this.currentMEIDoc).setM2M(this.m2m).setLoadDataCallback(this.loadDataFunction).loadMeter().makeScoreElementsClickable().resetListeners();
    this.modHandler.setContainerId(this.containerId).resetListeners().setCurrentMEI(this.currentMEIDoc).setLoadDataCallback(this.loadDataFunction);
    this.windowHandler.setContainerId(this.containerId).setM2M(this.m2m).setCurrentMEI(this.currentMEIDoc).setLoadDataCallback(this.loadDataFunction).setSVGReloadCallback(this.reloadDataFunction).setAnnotations(this.insertModeHandler.getAnnotations()).setInsertModeHandler(this.insertModeHandler).resetListeners();
    this.tooltipHandler.setContainerId(this.containerId).removeListeners().setListeners();
    // always start from click mode
    if (this.firstStart) {
      document.getElementById("clickInsert").click();
      this.firstStart = false;
    }
    if (this.doHideUI) {
      this.hideUI(this.hideOptions);
    } else {
      this.viewUI(this.hideOptions);
    }
    if (Object.entries(this.styleOptions).length > 0) {
      this.setStyles(this.styleOptions);
    }
    if (Object.entries(this.attributeOptions).length > 0) {
      this.setAttributes(this.attributeOptions);
    }
  }
  /**
   * Get the MEI for a specific page.
   * @param pageURI - The URI of the selected page.
   */
  getMEI(pageURI) {
    return new Promise((resolve, reject) => {
      const message = {
        action: "getMEI",
        id: random_1.uuidv4()
      };
      var response;
      response = this.verovioWrapper.setMessage(message);
      if (response.mei) {
        this.currentMEI = response.mei;
      } else {
        //console.log(meiConverter.meiToDoc(response.mei))
      }
      resolve(response.mei);
    });
  }
  getMidi() {
    return new Promise((resolve, reject) => {
      const message = {
        action: "renderToMidi",
        id: random_1.uuidv4()
      };
      var response = this.verovioWrapper.setMessage(message);
      if (response.midi) {
        this.currentMidi = response.mei;
        resolve(response.midi);
      } else {
        reject("fail!");
      }
    });
  }
  /**
   * Get all times for each note
   * @returns
   */
  resolveMidiTimes() {
    return new Promise(resolve => {
      var noteTimes = new Map();
      var result = Array.from(cq.getRootSVG(this.containerId).querySelectorAll(".note, .rest"));
      result.forEach(node => {
        try {
          var message = {
            action: "getTimeForElement",
            id: random_1.uuidv4(),
            elementId: node.id
          };
          var response = this.verovioWrapper.setMessage(message);
          if (!noteTimes.has(response.time)) {
            noteTimes.set(response.time, new Array());
          }
          var arr = noteTimes.get(response.time);
          //arr.push(node.id)
          arr.push(cq.getRootSVG(this.containerId).querySelector("#" + node.id));
        } catch (_a) {
          console.log("Catched Midi Event", node);
        }
      });
      resolve(noteTimes);
    });
  }
  /**
   * Create an overlay of all interative elements over the the score svg.
   */
  createSVGOverlay(loadBBoxes = true) {
    return new Promise(resolve => {
      var _a;
      document.getElementById(this.containerId).focus();
      var refSVG = document.getElementById(this.containerId).querySelector("#rootSVG");
      this.interactionOverlay = document.getElementById(this.containerId).querySelector("#interactionOverlay");
      if (this.interactionOverlay === null) {
        var overlay = document.createElementNS(constants_1.constants._SVGNS_, "svg");
        overlay.setAttribute("id", "interactionOverlay");
        this.interactionOverlay = overlay;
      }
      var root = cq.getRootSVG(this.containerId);
      var rootBBox = root.getBoundingClientRect();
      var rootWidth = rootBBox.width.toString();
      var rootHeigth = rootBBox.height.toString();
      if (this.interactionOverlay.getAttribute("viewBox") === null) {
        this.interactionOverlay.setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "));
      }
      (_a = document.getElementById(this.containerId).querySelector("#interactionOverlay #scoreRects")) === null || _a === void 0 ? void 0 : _a.remove();
      var scoreRects = document.createElementNS(constants_1.constants._SVGNS_, "svg");
      scoreRects.setAttribute("id", "scoreRects");
      scoreRects.setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "));
      Array.from(refSVG.attributes).forEach(a => {
        if (!["id", "width", "height"].includes(a.name)) {
          this.interactionOverlay.setAttribute(a.name, a.value);
        }
      });
      this.interactionOverlay.appendChild(scoreRects);
      refSVG.insertAdjacentElement("beforebegin", this.interactionOverlay);
      if (loadBBoxes) {
        var svgBoxes = Array.from(document.getElementById(this.containerId).querySelectorAll(".definition-scale :is(g,path)")) //".definition-scale path, .definition-scale .bounding-box"))
        .filter(el => {
          var condition = !["system", "measure", "layer", "ledgerLines", "flag"].some(cn => el.classList.contains(cn));
          return condition;
        });
        var reorderedBoxes = new Array(); // reorder so that dependent elements are already in array
        svgBoxes.forEach(sb => {
          if (sb.querySelector(":scope > use, :scope > rect, :scope > path") === null) {
            reorderedBoxes.push(sb);
          } else {
            reorderedBoxes.unshift(sb);
          }
        });
        // staff always has to be on top of sibling elements, so that one can interact with score elements
        reorderedBoxes = reorderedBoxes.reverse();
        reorderedBoxes.forEach(sr => {
          if (!["g", "path"].includes(sr.tagName.toLowerCase())) {
            //sr.remove()
            return;
          } else if (Array.from(sr.classList).some(srcl => srcl.includes("page") || srcl.includes("system"))) {
            //sr.remove()
            return;
          } else {
            var that = this;
            async function computeCoords() {
              return new Promise(resolve => {
                var parentsr = sr;
                var g = document.createElementNS(constants_1.constants._SVGNS_, "g");
                var refId = parentsr.id !== "" ? parentsr.id : parentsr.getAttribute("refId");
                if (refId !== "" && refId !== null) {
                  g.setAttribute("refId", refId);
                }
                parentsr.classList.forEach(c => g.classList.add(c));
                var bbox = sr.getBoundingClientRect();
                var cc = coordinates.getDOMMatrixCoordinates(bbox, that.interactionOverlay);
                var rect = document.createElementNS(constants_1.constants._SVGNS_, "rect");
                rect.setAttribute("x", cc.left.toString());
                rect.setAttribute("y", cc.top.toString());
                var w;
                if (cc.width === 0) w = 2;
                rect.setAttribute("width", (w === null || w === void 0 ? void 0 : w.toString()) || cc.width.toString());
                var h;
                if (cc.height === 0) h = 2;
                rect.setAttribute("height", (h === null || h === void 0 ? void 0 : h.toString()) || cc.height.toString());
                g.appendChild(rect);
                scoreRects.append(g);
                if (navigator.userAgent.toLowerCase().includes("firefox")) {
                  ffbb.adjustBBox(g);
                }
                resolve(true);
              });
            }
            computeCoords();
          }
        });
      }
      resolve(true);
    });
  }
  replaceWithRect(el) {
    if (!["g", "path", "svg"].includes(el.tagName.toLowerCase())) {
      el.remove();
      return;
    }
    if (el.childElementCount > 0) {
      Array.from(el.children).forEach(ec => {
        this.replaceWithRect(ec);
      });
    }
    if ("svg" !== el.tagName.toLowerCase()) {
      var childCopy = new Array();
      Array.from(el.children).forEach(ec => childCopy.push(ec.cloneNode(true)));
      var bbox = el.getBoundingClientRect();
      var rect = document.createElementNS(constants_1.constants._SVGNS_, "rect");
      rect.setAttribute("refId", el.id);
      el.classList.forEach(c => rect.classList.add(c));
      var cc = coordinates.getDOMMatrixCoordinates(bbox, this.interactionOverlay);
      rect.setAttribute("x", cc.left.toString());
      rect.setAttribute("y", cc.top.toString());
      var w;
      if (cc.width === 0) w = 2;
      rect.setAttribute("width", (w === null || w === void 0 ? void 0 : w.toString()) || cc.width.toString());
      var h;
      if (cc.height === 0) h = 2;
      rect.setAttribute("height", (h === null || h === void 0 ? void 0 : h.toString()) || cc.height.toString());
      childCopy.forEach(cc => rect.appendChild(childCopy.shift()));
      el.insertAdjacentElement("beforebegin", rect);
      el.remove();
    }
  }
  /**
   * hide ui elements, so that no interaction is possible
   * should be best called afteer promise of loadData
   * @param options
   */
  hideUI(options = {}) {
    var _a, _b, _c;
    if (Object.entries(options).length === 0) {
      options = {
        annotationCanvas: true,
        labelCanvas: true,
        canvasMusicPlayer: true,
        scoreRects: true,
        manipulatorCanvas: true,
        sidebarContainer: true,
        btnToolbar: true,
        customToolbar: true,
        groups: true
      };
    }
    for (const [key, value] of Object.entries(options)) {
      if (value) {
        if (key === "groups") {
          ((_a = document.getElementById(this.containerId)) === null || _a === void 0 ? void 0 : _a.querySelectorAll("[role=\"group\"]")).forEach(g => g.classList.add("hideUI")); // style.setProperty("display", "none", "important"))
        } else {
          (_c = (_b = document.getElementById(this.containerId)) === null || _b === void 0 ? void 0 : _b.querySelector("#" + key)) === null || _c === void 0 ? void 0 : _c.classList.add("hideUI"); //style.setProperty("display", "none", "important")
        }
      }
    }
  }
  /**
   * View Ui elements if they where hidden earlier
   * @param options
   */
  viewUI(options = {}) {
    var _a, _b, _c;
    if (Object.entries(options).length === 0) {
      options = {
        annotationCanvas: true,
        labelCanvas: true,
        canvasMusicPlayer: true,
        scoreRects: true,
        manipulatorCanvas: true,
        sidebarContainer: true,
        btnToolbar: true,
        customToolbar: true,
        groups: true
      };
    }
    for (const [key, value] of Object.entries(options)) {
      if (value) {
        if (key === "groups") {
          ((_a = document.getElementById(this.containerId)) === null || _a === void 0 ? void 0 : _a.querySelectorAll("[role=\"group\"]")).forEach(g => g.classList.remove("hideUI")); // style.setProperty("display", "none", "important"))
        } else {
          (_c = (_b = document.getElementById(this.containerId)) === null || _b === void 0 ? void 0 : _b.querySelector("#" + key)) === null || _c === void 0 ? void 0 : _c.classList.remove("hideUI"); //style.setProperty("display", "none", "important")
        }
      }
    }
  }
  ////////// GETTER/ SETTER
  /**
   *
   * @returns current Mouse2MEI Instance
   */
  getMouse2MEI() {
    return this.m2m;
  }
  getDeleteHandler() {
    return this.deleteHandler;
  }
  getInsertModeHandler() {
    return this.insertModeHandler;
  }
  getCurrentMEI(asDocument = true) {
    if (asDocument) {
      var meiDoc = meiConverter.meiToDoc(this.currentMEI);
      meiDoc = meiConverter.standardizeAccid(meiDoc);
      return meiDoc;
    }
    return this.currentMEI;
  }
  getSVG() {
    return this.svg;
  }
  getNoteDragHandler() {
    return this.noteDragHandler;
  }
  getGlobalKeyboardHandler() {
    return this.keyboardHandler;
  }
  getSidebarHandler() {
    return this.sidebarHandler;
  }
  getLabelHandler() {
    return this.labelHandler;
  }
  getModifierHandler() {
    return this.modHandler;
  }
  getWindowHandler() {
    return this.windowHandler;
  }
  getCurrentMidi() {
    return this.currentMidi;
  }
  getMusicPlayer() {
    return this.musicplayer;
  }
  getScoreGraph() {
    return this.scoreGraph;
  }
  getContainer() {
    return this.container;
  }
  /**
   * Access Verovio from outside of score editor.
   * Use getToolkit method to access any method which is not wrapped
   * @returns VerovioWrapper instance
   */
  getVerovioWrapper() {
    return this.verovioWrapper;
  }
  setMEIChangedCallback(meiChangedCallback) {
    this.meiChangedCallback = meiChangedCallback;
  }
  setHideUI(hide) {
    this.doHideUI = hide;
  }
  setHideOptions(options) {
    this.hideOptions = options;
  }
  /**
   * Set Attibutes for any element in the result svg as {selector: {attributeName: [values as string]}}.
   * By default will be concatenated with spaces as value string for this attribute
   * @param options
   * @param separator optional separator, default: " "
   */
  setAttributes(options, separator = " ") {
    var svg = cq.getRootSVG(this.containerId);
    for (const [elKey, elValue] of Object.entries(options)) {
      var element = svg.querySelector(elKey);
      if (element !== null) {
        for (const [attrKey, attrValue] of Object.entries(elValue)) {
          element.setAttribute(attrKey, attrValue.join(separator));
        }
      }
    }
  }
  setAttributeOptions(options) {
    this.attributeOptions = options;
    return this;
  }
  /**
   * Set Styles for any element in the result svg as {selector: {attributeName: [values as string]}}.
   * By default will be concatenated with spaces as value string for this attribute
   * @param options
   * @param separator optional separator, default: " "
   */
  setStyles(options, separator = " ") {
    var svg = cq.getRootSVG(this.containerId);
    for (const [elKey, elValue] of Object.entries(options)) {
      var element = svg.querySelector(elKey);
      if (element !== null) {
        for (const [styleKey, styleValue] of Object.entries(elValue)) {
          var importantIdx = styleValue.indexOf("important");
          if (importantIdx === -1) {
            element.style.setProperty(styleKey, styleValue.join(separator));
          } else {
            var important = styleValue.splice(importantIdx, 1)[0];
            element.style.setProperty(styleKey, styleValue.join(separator), important);
          }
        }
      }
    }
  }
  setStyleOptions(options) {
    this.styleOptions = options;
    return this;
  }
}
exports["default"] = Core;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/MusicPlayer.js":
/*!*********************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/MusicPlayer.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const Tone = __webpack_require__(/*! tone */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/tone/build/esm/index.js");
const mappings_1 = __webpack_require__(/*! ./utils/mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const midi_player_js_1 = __webpack_require__(/*! midi-player-js */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/midi-player-js/build/index.browser.js");
const Soundfont = __webpack_require__(/*! soundfont-player */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/soundfont-player/lib/index.js");
const constants_1 = __webpack_require__(/*! ./constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const coordinates = __webpack_require__(/*! ./utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ./utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const currentlyPlayingFlag = "currentlyPlaying";
const followerRectID = "followerRect";
const ac = window.AudioContext;
const synth = new Tone.Synth().toDestination();
class MusicPlayer {
  constructor(containerId) {
    this.playBtn = function playBtn(e) {
      e.preventDefault();
      this.context.resume().then(() => this.playMidi());
    }.bind(this);
    this.rewindBtn = function rewindBtn(e) {
      e.preventDefault();
      this.rewind();
    }.bind(this);
    this.playHandler = function playHandler(e) {
      if (!this.hasContainerFocus()) return;
      this.playFunction(e);
    }.bind(this);
    this.setCurrentNoteHandler = function setCurrentNoteHandler(e) {
      this.currentNote = e.target;
    }.bind(this);
    /**
     *  Set last clicked element to restartpoint
     */
    this.startPointHandler = function startPointHandler(e) {
      if (!this.hasContainerFocus()) return;
      var playingNote = e.target;
      playingNote = playingNote.closest(".note") || playingNote.closest(".rest") || playingNote.closest(".mRest");
      if (playingNote !== null) {
        var it = this.durationMap.values();
        var res = it.next();
        while (!res.done) {
          if (playingNote.id === res.value.note.id) {
            this.restartTime = res.value.tick;
            break;
          }
          res = it.next();
        }
      }
    }.bind(this);
    /**
     * Adds Class to be highlighted.
     * Dispatches event for every Note which was started most currently
     */
    this.addClass = function addClass(n, className) {
      return new Promise(resolve => {
        n.classList.add(className);
        n.dispatchEvent(this.noteEvent);
        resolve(true);
      });
    }.bind(this);
    this.setContainerId(containerId);
    this.noteEvent = new Event("currentNote");
    this.playStartEvent = new Event("playStart");
    this.playEndEvent = new Event("playEnd");
    this.restartTime = 0;
    this.setPlayListener();
    if (navigator.userAgent.toLocaleLowerCase().indexOf("firefox") > 0) {
      this.isFirefox = true;
    } else {
      this.isFirefox = false;
    }
  }
  /**
   * Add Canvas in which all MusicPlayer SVGs are contained
   */
  addCanvas() {
    //this.root = this.interactionOverlay //document.getElementById(c._ROOTSVGID_)
    this.rootBBox = this.interactionOverlay.getBoundingClientRect();
    var rootWidth = this.rootBBox.width.toString();
    var rootHeigth = this.rootBBox.height.toString();
    if (this.canvasMP == undefined) {
      this.canvasMP = document.createElementNS(constants_1.constants._SVGNS_, "svg");
      this.canvasMP.setAttribute("id", "canvasMusicPlayer");
      this.canvasMP.classList.add("canvas");
      this.canvasMP.setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "));
    }
    this.interactionOverlay.insertBefore(this.canvasMP, this.interactionOverlay.firstChild);
  }
  /**
   * Initialize Player
   */
  initPlayer() {
    var that = this;
    //@ts-ignore
    this.player = new midi_player_js_1.default.Player(function (event) {
      //console.log(event)
      if (event.name === "Set Tempo") {
        that.tempo = event.data;
        //that.pulse = (60000/ (event.data / 2 * 24))/10 //(60000/ (event.data * 24))/10000 //duration is in seconds
        that.pulse = 60 / event.data * 1000 / 120;
      }
      if (event.name === 'Note on' && event.velocity !== 0) {
        var track = event.track;
        var time = event.tick * that.pulse; //* 1000 * 2
        var key = track.toString() + "," + event.byteIndex.toString();
        if (!that.durationMap.has(key)) {
          return;
        }
        var duration = that.durationMap.get(key).duration;
        that.restartTime = event.tick;
        that.highlight(time, duration * 1000);
        if (!that.isFirefox) {
          that.drawFollowerRect();
        }
        if (that.instruments != undefined) {
          var instr = that.instruments[track - 2];
          instr.play(event.noteName, that.context.currentTime, {
            gain: event.velocity / 100,
            duration: duration
          });
        }
      }
    });
    function stringToBuffer(midi) {
      var binary_string = window.atob(midi);
      var len = binary_string.length;
      var bytes = new Uint8Array(len);
      for (var i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i);
      }
      return bytes.buffer;
    }
    this.player.loadArrayBuffer(stringToBuffer(this.midi));
    this.mapDurations();
    if (this.instruments == undefined) {
      // instruments only have to be updated, when new instrument (= track) is added
      this.context = new ac();
      this.instruments = new Array(this.player.getEvents().length - 1);
      this.initInstruments();
    }
  }
  //some change
  /**
   * Stop playing
   */
  stopInstruments() {
    var _a;
    document.dispatchEvent(this.playEndEvent);
    this.player.stop();
    (_a = this.instruments) === null || _a === void 0 ? void 0 : _a.forEach(instr => instr.stop(this.context.currentTime));
    this.player = undefined;
    this.stopTimeouts();
    if (this.restartTime === 0) {
      if (document.getElementById(followerRectID) !== null) {
        document.getElementById(followerRectID).remove();
      }
      Array.from(document.getElementsByClassName(currentlyPlayingFlag)).forEach(element => {
        element.classList.remove(currentlyPlayingFlag);
      });
    }
    this.initPlayer();
  }
  rewind() {
    if (this.player != undefined) {
      this.restartTime = 0;
      this.stopInstruments();
    }
  }
  /**
   * Initialize Instrument for
   */
  initInstruments() {
    this.setSoundfontsRecursive();
  }
  setSoundfontsRecursive(counter = 0) {
    var i = counter;
    var that = this;
    if (i < this.instruments.length) {
      Soundfont.instrument(this.context, "acoustic_grand_piano").then(instrument => {
        that.instruments[i] = instrument;
        i += 1;
        that.setSoundfontsRecursive(i);
      });
    }
  }
  playMidi() {
    if (!cq.hasActiveElement(this.containerId)) return;
    if (this.player.isPlaying()) {
      this.stopInstruments();
    } else {
      this.player.on("endOfFile", () => {
        this.rewind();
      });
      this.player.division = 120;
      //this.player.tempo = this.tempo
      this.player.tick = this.restartTime;
      this.player.skipToTick(this.restartTime);
      this.player.play();
      document.dispatchEvent(this.playStartEvent);
    }
  }
  ///// LISTENERS ////
  setListeners() {
    if (this.midiTimes == undefined) {
      return;
    }
    var it = this.midiTimes.values();
    var result = it.next();
    while (!result.done) {
      var arr = result.value;
      arr.forEach(note => {
        note.addEventListener("currentNote", this.setCurrentNoteHandler);
        note.addEventListener("click", this.startPointHandler);
      });
      result = it.next();
    }
    var that = this;
    this.container.querySelector("#playBtn").addEventListener("click", this.playBtn);
    this.container.querySelector("#rewindBtn").addEventListener("click", this.rewindBtn);
  }
  removeListeners() {
    if (this.midiTimes == undefined) {
      return;
    }
    var it = this.midiTimes.values();
    var result = it.next();
    while (!result.done) {
      var arr = result.value;
      arr.forEach(note => {
        note.removeEventListener("currentNote", this.setCurrentNoteHandler);
        note.removeEventListener("click", this.startPointHandler);
      });
      result = it.next();
    }
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  /**
   * Separate Listeners to set player options externally
   */
  setPlayListener() {
    document.addEventListener("keydown", this.playHandler);
  }
  removePlayListener() {
    document.removeEventListener("keydown", this.playHandler);
  }
  playFunction(e) {
    if (!this.hasContainerFocus()) return;
    if (e.code === "Space") {
      e.preventDefault();
      if (e.shiftKey || document.getElementById("followerRect") !== null) {
        this.context.resume().then(() => this.playMidi());
      } else if (typeof this.player != undefined) {
        this.stopInstruments();
      }
    }
  }
  /**
   * Map all durations and notes to make them available asynchronically
   */
  mapDurations() {
    var durationMap = new Map(); // key: tracknumber,byteindex
    var mapByNote = new Map();
    var eventTracks = this.player.getEvents();
    //console.log(this.midiTimes)
    eventTracks.forEach(eventArray => {
      //@ts-ignore
      Array.from(eventArray).forEach((event, eventIdx) => {
        var e = event;
        //console.log(e)
        if (e.name === "Set Tempo") {
          this.tempo = e.data;
          this.pulse = 60 / e.data * 1000 / 120;
        } else if (e.name === "Note on") {
          var time = e.tick * this.pulse; //* 1000 * 2
          //var notes = this.midiTimes.get(time) || this.midiTimes.get(Math.floor(time)) || this.getClosestEntry(time)
          var notes = this.getClosestEntry(time);
          if (notes == undefined) {
            //console.log("rejected event", e)
            return;
          }
          //console.log(...notes, e, time)
          //iterate because notes can be in a chord
          notes.forEach(note => {
            var meiNote = this.mei.getElementById(note.id);
            var staffNumber = parseInt(meiNote.closest("staff").getAttribute("n")) + 1;
            if (!meiNote.hasAttribute("grace")) {
              var key = e.track.toString() + "," + e.byteIndex.toString();
              //if(!durationMap.has(key) && e.track === staffNumber && e.velocity !== 0){
              if (!durationMap.has(key) && e.track === staffNumber) {
                if (!meiNote.hasAttribute("dur")) {
                  meiNote = meiNote.closest("chord");
                }
                var baseDur = this.getDur(parseInt(meiNote.getAttribute("dur")), parseInt(meiNote.getAttribute("dots")) || 0, 4);
                //find any prolongated Notes
                var tie = this.mei.querySelector("tie[startid='#" + note.id + "']");
                if (tie !== null) {
                  var endid = tie.getAttribute("endid"); //endid alway includes # at beginnig
                  var prolongNote = this.mei.querySelector(endid);
                  if (prolongNote !== null) {
                    var pnDur = prolongNote.getAttribute("dur");
                    var pnDot = prolongNote.getAttribute("dots");
                    baseDur += this.getDur(parseInt(pnDur), parseInt(pnDot) || 0, 4);
                  }
                }
                //concat duration
                var dur = baseDur * 60 / this.tempo;
                var valueFound = false;
                var it = durationMap.values();
                var res = it.next();
                // while(!res.done){
                //     if(res.value.note === note && res.value.duration === dur){
                //         valueFound = true
                //         break;
                //     }
                //     res = it.next()
                // }
                if (!valueFound) {
                  // why do I check here?
                  durationMap.set(key, {
                    note: note,
                    duration: dur,
                    tick: e.tick
                  });
                  mapByNote.set(note, {
                    duration: dur,
                    tick: e.tick
                  });
                } else {
                  //console.log(key, note, dur, e.tick)
                  //console.log(durationMap.get(key))
                }
              }
            }
          });
        }
      });
    });
    this.durationMap = durationMap;
    this.durationMapByNote = mapByNote;
    //console.log(this.durationMap, this.durationMapByNote)
  }
  /**
   * Computation of time and midi times have some divergence (by floating number)
   * Finding closest entry is sufficient, but has to be made for all entries, since the miditimes-iterator is not ordered.
   * @param time
   * @returns
   */
  getClosestEntry(time) {
    var targetEntry;
    var temp = Infinity;
    for (const [key, value] of this.midiTimes.entries()) {
      var diff = Math.abs(time - key);
      if (diff < temp) {
        targetEntry = value;
        temp = diff;
      }
    }
    return targetEntry;
  }
  getDur(dur, dots, base) {
    var baseDur = base / dur;
    var add = baseDur;
    if (dots > 0) {
      for (var i = 0; i < dots; i++) {
        add = add / 2;
        baseDur += add;
      }
    }
    return baseDur;
  }
  setAudioContext() {
    var that = this;
    return new Promise((resolve, reject) => {
      window.onload = function () {
        resolve();
      };
    });
  }
  setMidi(midi) {
    this.midi = midi;
  }
  /**
   * Highlight playing Elements
   * @param time Time at which Element is played (in ms)
   * @param duration Duration of Element (in ms)
   */
  highlight(time, duration) {
    //var notes = this.midiTimes.get(time) || this.midiTimes.get(Math.floor(time)) || this.getClosestEntry(time)
    var notes = this.getClosestEntry(time);
    this.timeouts = new Array();
    notes.forEach(n => {
      this.addClass(n, currentlyPlayingFlag).then(() => {
        var to = setTimeout(() => {
          n.classList.remove(currentlyPlayingFlag);
        }, duration);
        this.timeouts.push(to);
      });
    });
  }
  /**
   * Draw follower rectangle over all staves for last sounding element
   */
  drawFollowerRect() {
    // var canvas =  document.getElementById(this.containerId).querySelector("#canvasMusicPlayer") //document.getElementById("canvasMusicPlayer")
    // var canvasBBox = canvas.getBoundingClientRect();
    var followerRect;
    if (document.getElementById(followerRectID) !== null) {
      followerRect = document.getElementById(followerRectID);
    } else {
      followerRect = document.createElementNS(constants_1.constants._SVGNS_, "rect");
      this.canvasMP.appendChild(followerRect);
    }
    var margin = 5;
    var ptCurrentNote = coordinates.getDOMMatrixCoordinates(this.currentNote, this.canvasMP);
    var parentMeasureRect = this.currentNote.closest(".measure").getBoundingClientRect();
    var ptParentMeasure = coordinates.getDOMMatrixCoordinates(parentMeasureRect, this.canvasMP);
    var upperBound = ptParentMeasure.top - margin;
    var lowerBound = ptParentMeasure.bottom + margin;
    var leftBound = ptCurrentNote.left - margin;
    var rightBound = ptCurrentNote.right + margin;
    followerRect.setAttribute("id", followerRectID);
    followerRect.setAttribute("y", upperBound.toString());
    followerRect.setAttribute("x", leftBound.toString());
    followerRect.setAttribute("width", (rightBound - leftBound).toString());
    followerRect.setAttribute("height", (lowerBound - upperBound).toString());
  }
  hasContainerFocus() {
    return document.getElementById(this.containerId).classList.contains("activeContainer");
  }
  ///SYNTH////
  generateTone(newNote) {
    if (newNote.rest) {
      return;
    }
    let note = newNote.pname;
    let dur = newNote.dur + "n";
    if (typeof newNote.keysig !== "undefined" && newNote.keysig !== "0") {
      let signMap;
      if (newNote.keysig.charAt(1) === "s") {
        signMap = mappings_1.noteToCross;
      } else if (newNote.keysig.charAt(1) === "f") {
        signMap = mappings_1.noteToB;
      }
      let signCount = parseInt(newNote.keysig.charAt(0));
      let submap = new Map();
      let i = 0;
      for (const [key, value] of signMap.entries()) {
        if (i < signCount) {
          submap.set(key, value);
        }
        i += 1;
      }
      if (submap.has(note)) {
        note = submap.get(note);
        note = note.charAt(0).toUpperCase() + note.charAt(1).toUpperCase() + newNote.oct;
      } else {
        note = note.toUpperCase() + newNote.oct;
      }
    } else {
      note = note.toUpperCase() + newNote.oct;
    }
    if (!note.includes("undefined") && !dur.includes("undefined")) {
      dur = "16n";
      synth.triggerAttackRelease(note, dur);
      Tone.start();
    }
  }
  // UTILS
  setMEI(mei) {
    this.mei = mei;
    return this;
  }
  setMidiTimes(midiTimes) {
    this.midiTimes = midiTimes;
    return this;
  }
  setScoreGraph(scoreGraph) {
    this.scoreGraph = scoreGraph;
    return this;
  }
  stopTimeouts() {
    if (typeof this.timeouts !== "undefined") {
      this.timeouts.forEach(to => {
        clearTimeout(to);
      });
    }
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.rootSVG = cq.getRootSVG(containerId);
    this.container = document.getElementById(containerId);
    return this;
  }
  resetInstruments() {
    this.instruments = undefined;
  }
  getRestartTime() {
    return this.restartTime;
  }
  setRestartTimeBySeconds(time) {
    return this.restartTime = time;
  }
  setRestartTimeByElement(el) {
    throw Error("Not yet implemented");
  }
  getIsPlaying() {
    var _a;
    return (_a = this.player) === null || _a === void 0 ? void 0 : _a.isPlaying();
  }
  update() {
    this.resetInstruments();
    this.resetListeners();
    this.initPlayer();
    return this;
  }
}
exports["default"] = MusicPlayer;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/VerovioScoreEditor.js":
/*!****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/VerovioScoreEditor.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ./constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const Core_1 = __webpack_require__(/*! ./Core */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/Core.js");
const dc = __webpack_require__(/*! ./utils/DOMCreator */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/DOMCreator.js");
const Tabbar_1 = __webpack_require__(/*! ./gui/Tabbar */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/Tabbar.js");
/**
 * Main Class for the VerovioScoreEditor
 */
class VerovioScoreEditor {
  /**
   *
   * @param container Container in which the editor will be displayed
   * @param options options from Class implementing H5P functionality
   */
  constructor(container = null, options, meiCallback) {
    var _a;
    if ((container === null || container === void 0 ? void 0 : container.id) === null) {
      throw new Error("The editor's container must have an id");
    }
    if (container === null) {
      container = document.body;
      container.id = "editorInBody";
    }
    (_a = container === null || container === void 0 ? void 0 : container.classList) === null || _a === void 0 ? void 0 : _a.add("vse-container");
    this.container = container;
    this.options = options;
    this.meiChangedCallback = meiCallback;
    this.loadScripts();
    this.setMutationObserver();
  }
  /**
   * Load verovio script.
   * Makes sure that only one script instance is in the DOM.
   *
   */
  loadScripts() {
    var src = "https://www.verovio.org/javascript/" + constants_1.constants._VEROVIO_VERSION_ + "/verovio-toolkit.js";
    var scriptId = "verovioScript";
    var script = document.querySelector("#" + scriptId) || document.createElement('script');
    script.src = src;
    if (script.id === "") {
      script.id = scriptId;
    }
    if (script.getAttribute("loaded") === null) {
      script.setAttribute("loaded", "false");
    }
    if (script.getAttribute("loaded") === "true") {
      this.initGUI().then(() => {
        if (this.meiChangedCallback != undefined) {
          this.setMEIChangedCallback(this.meiChangedCallback);
        }
      });
    }
    if (document.getElementById(scriptId) === null) {
      var prior = document.getElementsByTagName('script')[0];
      script.async = false;
      prior.parentNode.insertBefore(script, prior);
      script.onload = function () {
        script.setAttribute("loaded", "true");
      };
    }
  }
  /**
   * Observes if the script is already loaded. Fires initGUI() when Attribute "loaded" changes to "true"
   */
  setMutationObserver() {
    var that = this;
    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.type === "attributes") {
          var t = mutation.target;
          if (mutation.attributeName === "loaded" && t.getAttribute(mutation.attributeName) === "true") {
            that.initGUI().then(() => {
              if (that.meiChangedCallback != undefined) {
                that.setMEIChangedCallback(that.meiChangedCallback);
              }
            });
          }
        }
      });
    });
    observer.observe(document.getElementById("verovioScript"), {
      attributes: true
    });
  }
  /**
   * Init everything on load
   * @param container container provided by H5P
   */
  initGUI() {
    return new Promise(resolve => {
      var _a, _b;
      var btnGrpClass = "btn-group-sm me-2";
      // MAIN/ Permanent TOOLBAR
      // parentElement for dropdown
      this.container.append(dc.makeNewDiv("handlerGroup", btnGrpClass, {
        role: "group"
      })); //"me-2 h-100"))
      //parentElement for Notebuttons
      this.container.append(dc.makeNewDiv("noteGroup", btnGrpClass, {
        role: "group"
      }));
      //parentElement for Dotbuttons
      this.container.append(dc.makeNewDiv("dotGroup", btnGrpClass, {
        role: "group"
      }));
      //parentElement for local modifier Buttons
      this.container.append(dc.makeNewDiv("modGroup", btnGrpClass, {
        role: "group"
      }));
      //sidebarList
      this.container.append(dc.makeNewDiv("sidebarContainer", "sidebar closedSidebar"));
      //parentElement for sidebar open/close
      this.container.append(dc.makeNewDiv("sideBarGroup", btnGrpClass, {
        role: "group"
      }));
      //parentElement for playback
      this.container.append(dc.makeNewDiv("soundGroup", btnGrpClass, {
        role: "group"
      }));
      //parentElement for zoom
      this.container.append(dc.makeNewDiv("zoomGroup", btnGrpClass, {
        role: "group"
      }));
      //parentElement for fileselect group
      this.container.append(dc.makeNewDiv("fileSelectGroup", btnGrpClass, {
        role: "group"
      }));
      // parentElement for toolbarTop
      this.container.append(dc.makeNewDiv("btnToolbar", "btn-toolbar d-inline-flex align-items-stretch", {
        role: "toolbar"
      }));
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // CUSTOM TOOLBAR
      // parentElement for customToolbar
      this.container.append(dc.makeNewDiv("customToolbar", "btn-toolbar align-items-stretch", {
        role: "toolbar"
      }));
      // and now the tabs
      this.container.append(dc.makeNewDiv("notationTabGroup", btnGrpClass, {
        role: "group"
      }));
      this.container.append(dc.makeNewDiv("annotationTabGroup", btnGrpClass, {
        role: "group"
      }));
      this.container.append(dc.makeNewDiv("articulationTabGroup", btnGrpClass, {
        role: "group"
      }));
      this.container.append(dc.makeNewDiv("melismaTabGroup", btnGrpClass, {
        role: "group"
      }));
      //textTest
      // var tt = dc.makeNewDiv("textTest", "")
      // tt.innerHTML = "&#xE014;";
      // this.container.append(tt)
      //Statusbar
      //c ontainer.parentElement.insertBefore(dc.makeNewDiv("statusBar", ""), container.nextElementSibling)
      // var statusBar = dc.makeNewDiv("statusBar", "")
      // statusBar.textContent = "Status: "
      // this.container.append(statusBar)
      // test
      var tb = new Tabbar_1.default(this.options, this.container.id); //new Toolbar(this.options, this.container.id)
      tb.createToolbars();
      //attach mei first time
      this.coreInstance = new Core_1.default(this.container.id);
      this.container.append(dc.makeNewDiv(constants_1.constants._TARGETDIVID_, ""));
      var initEvent = new Event("vseInit");
      if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.meiURL) != undefined) {
        this.coreInstance.loadData('', this.options.meiURL, true).then(mei => {
          this.currentMEI = mei;
          this.container.dispatchEvent(initEvent);
          resolve();
        });
      } else if (((_b = this.options) === null || _b === void 0 ? void 0 : _b.data) != undefined) {
        this.coreInstance.loadData('', this.options.data, false).then(mei => {
          this.currentMEI = mei;
          this.container.dispatchEvent(initEvent);
          resolve();
        });
      } else if (this.options === null) {
        this.coreInstance.loadData('', null, false).then(mei => {
          this.currentMEI = mei;
          this.container.dispatchEvent(initEvent);
          resolve();
        });
      }
      tb.setImportCallback(this.coreInstance.loadDataFunction);
      tb.setGetMEICallback(this.coreInstance.getMEI.bind(this.coreInstance));
      //block everthing when firefox
      if (navigator.userAgent.toLowerCase().includes("firefox")) {
        var div = document.createElement("div");
        div.id = "ff_warning";
        this.container.insertAdjacentElement("beforebegin", div);
        div.append(this.container);
        div.textContent = "This Application can't currently be used with Firefox.\n Please use another browser.";
      }
    });
  }
  /**
   *
   * @param meiChangedCallback Function in which the mei will be used by the calling instance
   */
  setMEIChangedCallback(meiChangedCallback) {
    this.meiChangedCallback = meiChangedCallback;
    this.coreInstance.setMEIChangedCallback(this.meiChangedCallback);
  }
  /**
   * Get Core Instance to manipulate svg output
   * @returns
   */
  getCore() {
    return this.coreInstance;
  }
}
exports["default"] = VerovioScoreEditor;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/assets/mei_template.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/assets/mei_template.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
class MeiTemplate {
  /**
   * Create templates for MEI-Componets to be inserted
   * @param xml xml document provided to be altered
   */
  constructor(xml) {
    this.xmlDoc = xml;
    this.isEmpty = true;
  }
  emptyMEI() {
    this.isEmpty = true;
    var mei = document.createElementNS(constants_1.constants._MEINS_, "mei");
    //mei.setAttribute("xmlns", "http://www.music-encoding.org/ns/mei");
    //mei.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
    mei.setAttribute("meiversion", "4.0.0");
    mei.appendChild(this.createMeiHead());
    mei.appendChild(this.createMusic());
    var meiString = mei.outerHTML;
    meiString = meiString.replace(/def/gi, "Def");
    meiString = meiString.replace(/\grp/gi, "Grp");
    meiString = meiString.replace(/\head/gi, "Head");
    meiString = meiString.replace(/space/gi, "Space");
    return meiString;
  }
  createMusic() {
    var newElem = document.createElement("music");
    newElem.appendChild(this.createBody());
    return newElem;
  }
  createBody() {
    var newElem = document.createElement("body");
    newElem.appendChild(this.createMDiv());
    return newElem;
  }
  createMDiv() {
    var newElem = document.createElement("mdiv");
    newElem.appendChild(this.createScore());
    return newElem;
  }
  createScore() {
    var newElem = document.createElement("score");
    newElem.appendChild(this.createScoreDef());
    newElem.appendChild(this.createSection());
    return newElem;
  }
  createSection() {
    var newElem = document.createElement("section");
    newElem.appendChild(this.createMeasure());
    return newElem;
  }
  createScoreDef() {
    var newElem = document.createElement("scoreDef");
    newElem.appendChild(this.createStaffGrp());
    return newElem;
  }
  createStaffGrp() {
    var newElem = document.createElement("staffGrp");
    newElem.appendChild(this.createStaffDef());
    return newElem;
  }
  createStaffDef(n = 1, lines = 5, meterCount = 4, meterUnit = 4) {
    var newElem = document.createElement("staffDef");
    newElem.setAttribute("n", n.toString());
    newElem.setAttribute("lines", lines.toString());
    newElem.setAttribute("meter.count", meterCount.toString());
    newElem.setAttribute("meter.unit", meterUnit.toString());
    newElem.appendChild(this.createClef());
    newElem.appendChild(this.createKeySig());
    return newElem;
  }
  createClef(shape = "G", line = 2) {
    var newElem = document.createElement("clef");
    newElem.setAttribute("shape", shape);
    newElem.setAttribute("line", line.toString());
    return newElem;
  }
  createKeySig(mode = "major", sig = "0") {
    var newElem = document.createElementNS(constants_1.constants._MEINS_, "keySig");
    newElem.setAttribute("mode", mode);
    newElem.setAttribute("sig", sig);
    return newElem;
  }
  createMeterSig(count, unit) {
    var newElem = document.createElementNS(constants_1.constants._MEINS_, "meterSig");
    newElem.setAttribute("count", count);
    newElem.setAttribute("unit", unit);
    return newElem;
  }
  createMeiHead() {
    var newElem = document.createElement("meiHead");
    return newElem;
  }
  /**
   * Return Measure to be inserted into new MEI
   * @param n number count of measures in current staff
   */
  createMeasure(n = 1, staffCount = 1, layerCount = 1) {
    var newElem = document.createElement("measure");
    newElem.setAttribute("n", n.toString());
    for (let i = 0; i < staffCount; i++) {
      newElem.appendChild(this.createStaff(i + 1, layerCount));
    }
    return newElem;
  }
  createStaff(n = 1, layerCount = 1) {
    var newElem = document.createElement("staff");
    newElem.setAttribute("n", n.toString());
    newElem.appendChild(this.createLayer(1));
    return newElem;
  }
  createLayer(n = 1) {
    var newElem = document.createElement("layer");
    newElem.setAttribute("n", n.toString());
    if (this.isEmpty) {
      newElem.appendChild(this.createMRest());
    }
    return newElem;
  }
  createMSpace() {
    var newElem = document.createElementNS(constants_1.constants._MEINS_, "mSpace");
    return newElem;
  }
  createMRest() {
    var newElem = document.createElementNS(constants_1.constants._MEINS_, "mRest");
    return newElem;
  }
  createTempo(mm, mmUnit, tstamp = null, startId = null) {
    var newElement = document.createElementNS(constants_1.constants._MEINS_, "tempo");
    newElement.setAttribute("id", random_1.uuidv4());
    newElement.setAttribute("place", "above");
    if (startId === null && tstamp === null) {
      throw new Error("Tempo MUST either have timestamp or startId");
    }
    if (tstamp !== null) newElement.setAttribute("tstamp", tstamp);
    if (startId !== null) newElement.setAttribute("startId", startId);
    newElement.setAttribute("mm", mm);
    newElement.setAttribute("mm.unit", mmUnit);
    newElement.setAttribute("midi.bpm", (parseFloat(mm) * parseFloat(mmUnit)).toString());
    newElement.setAttribute("staff", "1");
    var rend = document.createElementNS(constants_1.constants._MEINS_, "rend");
    rend.setAttribute("id", random_1.uuidv4());
    rend.setAttribute("fontname", "VerovioText");
    rend.textContent = "__";
    newElement.appendChild(rend);
    newElement.textContent = "__ = " + mm;
    return newElement;
  }
  appendToRoot(node) {
    if (this.xmlDoc instanceof XMLDocument) {
      var refElem = this.xmlDoc.getElementsByTagName("measure").item(0);
      refElem.parentNode.appendChild(node);
    }
  }
}
exports["default"] = MeiTemplate;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.constants = void 0;
var constants;
(function (constants) {
  constants["_TARGETDIVID_"] = "svg_output";
  constants["_TARGETDIVID_WITH_IDSELECTOR_"] = "#svg_output";
  constants["_MEASURE_"] = "measure";
  constants["_NOTE_"] = "note";
  constants["_NOTE_WITH_CLASSSELECTOR_"] = ".note";
  constants["_STAFF_WITH_CLASSSELECTOR_"] = ".staff";
  constants["_NOTEHEAD_"] = "notehead";
  constants["_ROOTSVGID_"] = "rootSVG";
  constants["_ROOTSVGID_WITH_IDSELECTOR_"] = "#rootSVG";
  constants["_VEROVIO_VERSION_"] = "3.6.0";
  constants["_METERUNIT_"] = "meter.unit";
  constants["_METERCOUNT_"] = "meter.count";
  constants["_SVGNS_"] = "http://www.w3.org/2000/svg";
  constants["_MEINS_"] = "http://www.music-encoding.org/ns/mei";
})(constants = exports.constants || (exports.constants = {}));

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/MeasureMatrix.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/MeasureMatrix.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const mappings_1 = __webpack_require__(/*! ../utils/mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
//@ts-ignore
//const $ = H5P.jQuery;
class MeasureMatrix {
  constructor(rows = null, cols = null) {
    this.rows = rows;
    this.cols = cols;
    this.matrix = null;
    if (cols !== null && rows !== null) {
      // empty matrix
      this.matrix = new Array();
      for (var i = 0; i < cols; i++) {
        let col = new Array();
        for (var j = 0; j < rows; j++) {
          var staff = {};
          col.push(staff);
        }
        this.matrix.push(col);
      }
    }
  }
  /**
   * @deprecated
   * @param svg
   */
  populateFromSVG(svg) {
    this.matrix = new Array();
    this.cols = svg.querySelectorAll(".measure").length;
    this.rows = svg.querySelector(".measure").querySelectorAll(".staff").length;
    var measures = svg.querySelectorAll(".measure");
    for (var i = 0; i < this.cols; i++) {
      let col = new Array();
      let measure = measures[i];
      let prevMeasure;
      if (i == 0) {
        prevMeasure = measure;
      } else {
        prevMeasure = measures[i - 1];
      }
      let staves = measure.querySelectorAll(".staff");
      let prevStaves = prevMeasure.querySelectorAll(".staff");
      for (var j = 0; j < this.rows; j++) {
        let staff = {};
        let clefs = prevStaves[j].querySelectorAll(".clef");
        let keysigs = staves[j].querySelectorAll(".keySig");
        let meterSigs = staves[j].querySelectorAll(".meterSig");
        if (clefs.length > 0) {
          let clefIdx;
          if (i === 0) {
            clefIdx = 0;
          } else {
            clefIdx = clefs.length - 1;
          }
          let clefShape = clefs[clefIdx].querySelector("use").getAttribute("xlink:href");
          if (clefShape.includes("-")) {
            let clefRegex = /^(.*?)-/g;
            clefShape = clefRegex.exec(clefShape)[0];
            clefShape = clefShape.slice(0, -1);
          }
          clefShape = mappings_1.idToClef.get(clefShape);
          staff.clef = clefShape;
        } else {
          staff.clef = this.matrix[i - 1][j].clef;
        }
        if (keysigs.length > 0) {
          let lastIdx = keysigs.length - 1;
          let keysigcount = keysigs[lastIdx].querySelectorAll("use").length;
          let keysig = keysigs[lastIdx].querySelector("use").getAttribute("xlink:href") === "#E262" ? "f" : "s";
          keysig = keysigcount.toString() + keysig;
          staff.keysig = keysig;
        } else if (i > 0) {
          staff.keysig = this.matrix[i - 1][j].keysig;
        } else {
          // if first measure has no accidentials
          staff.keysig = "0";
        }
        if (meterSigs.length > 0) {
          let lastIdx = meterSigs.length - 1;
          let unit = meterSigs[lastIdx].getAttribute("unit");
          let count = meterSigs[lastIdx].getAttribute("count");
          staff.meterSig = {
            unit: unit,
            count: count
          };
        } else if (i > 0) {
          staff.meterSig = this.matrix[i - 1][j].meterSig;
        } else {
          if (staves[j].querySelector("metersig") === null) {
            staff.meterSig = null;
          } else {
            staff.meterSig = {
              unit: staves[j].querySelector("metersig").getAttribute("unit"),
              count: staves[j].querySelector("metersig").getAttribute("count")
            };
          }
        }
        col.push(staff);
      }
      this.matrix.push(col);
    }
    //console.log(this.matrix)
  }

  populateFromMEI(mei) {
    this.matrix = new Array();
    this.cols = mei.querySelectorAll("measure").length;
    this.rows = mei.querySelector("measure").querySelectorAll("staff").length;
    var measures = mei.querySelectorAll("measure");
    for (var i = 0; i < this.cols; i++) {
      let col = new Array();
      let measure = measures[i];
      let prevMeasure;
      if (i == 0) {
        prevMeasure = measure;
      } else {
        prevMeasure = measures[i - 1];
      }
      let staves = measure.querySelectorAll("staff");
      let prevStaves = prevMeasure.querySelectorAll("staff");
      for (var j = 0; j < this.rows; j++) {
        let staffDef = mei.querySelector("staffDef[n=\"" + (j + 1).toString() + "\"]");
        let staff = {};
        let clefs = i === 0 ? [] : prevStaves[j].querySelectorAll("clef");
        let keysigs = i === 0 ? [] : staves[j].querySelectorAll("keySig");
        let meterSigs = staves[j].querySelectorAll("meterSig");
        let clefIdx;
        if (clefs.length > 0) {
          if (i === 0) {
            clefIdx = 0;
          } else {
            clefIdx = clefs.length - 1;
          }
          let clefShape = clefs[clefIdx].getAttribute("shape");
          staff.clef = clefShape;
        } else {
          if (i > 0) {
            staff.clef = this.matrix[i - 1][j].clef;
          } else {
            staff.clef = staffDef.querySelector("clef").getAttribute("shape");
          }
        }
        if (keysigs.length > 0) {
          let lastIdx = keysigs.length - 1;
          let keysig = keysigs[lastIdx].getAttribute("sig");
          staff.keysig = keysig;
        } else if (i > 0) {
          staff.keysig = this.matrix[i - 1][j].keysig;
        } else {
          if (staffDef.querySelector("keySig") === null) {
            staff.keysig = "0";
          } else {
            staff.keysig = staffDef.querySelector("keySig").getAttribute("sig");
          }
        }
        if (meterSigs.length > 0) {
          let lastIdx = meterSigs.length - 1;
          let unit = meterSigs[lastIdx].getAttribute("unit");
          let count = meterSigs[lastIdx].getAttribute("count");
          staff.meterSig = {
            unit: unit,
            count: count
          };
        } else if (i > 0) {
          staff.meterSig = this.matrix[i - 1][j].meterSig;
        } else {
          if (staffDef.querySelector("meterSig") !== null) {
            staff.meterSig = {
              unit: staffDef.querySelector("meterSig").getAttribute("unit"),
              count: staffDef.querySelector("meterSig").getAttribute("count")
            };
          } else if (staffDef.getAttribute("meter.unit") !== null) {
            staff.meterSig = {
              unit: staffDef.getAttribute("meter.unit"),
              count: staffDef.getAttribute("meter.count")
            };
          } else {
            staff.meterSig = null;
          }
        }
        col.push(staff);
      }
      this.matrix.push(col);
    }
    //console.log(this.matrix)
  }

  addMeasure(n = 1) {
    for (var i = 0; i < n; i++) {
      let col = new Array();
      for (var j = 0; j < this.rows; j++) {
        var staff = {};
        col.push(staff);
      }
      this.matrix.push(col);
    }
    this.cols += n;
  }
  addStaff(n = 1) {
    for (var i = 0; i < this.cols; i++) {
      for (var j = 0; j < n; j++) {
        var staff = {};
        this.matrix[i].push(staff);
      }
    }
    this.rows += n;
  }
  /**
   * Get StaffType from matrix for [staff][measure]
   * @param row measure index = attribute("n")-1
   * @param col staff index = attribute("n")-1
   * @returns
   */
  get(row, col) {
    if (!isNaN(parseInt(row.toString())) && !isNaN(parseInt(col.toString()))) {
      if (typeof row === "string") {
        row = parseInt(row.toString()) - 1;
      }
      if (typeof col === "string") {
        col = parseInt(col.toString()) - 1;
      }
      return this.matrix[row][col];
    } else {
      return null;
    }
  }
  getDimensions() {
    return {
      rows: this.rows,
      cols: this.cols
    };
  }
}
exports["default"] = MeasureMatrix;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/ScoreGraph.js":
/*!***********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/ScoreGraph.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const ScoreNode_1 = __webpack_require__(/*! ./ScoreNode */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/ScoreNode.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const meiNodeSelector = "note, rest, mRest, chord, layer";
const documentNodeSelector = ".clef, .meterSig, .keySig, .note, .rest, .mRest, .chord"; //, .layer"
const documentNodeSelector2 = ".clef, .meterSig, .keySig, .layer .note, .layer .rest, .layer .mRest, .layer .chord"; //, :scope > .layer"
class ScoreGraph {
  constructor(xmlDoc, containerId, miditimes) {
    this.containerId = containerId;
    this.container = document.getElementById(containerId);
    this.rootSVG = cq.getRootSVG(containerId);
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.populate(xmlDoc, miditimes);
  }
  altPop(xmlDoc) {
    var documentNodes = Array.from(cq.getRootSVG(this.containerId).querySelectorAll(documentNodeSelector));
    var documentNodes = documentNodes.filter(dn => {
      if (!dn.classList.contains("note")) {
        return dn;
      }
      if (dn.classList.contains("note")) {
        if (dn.closest(".chord") === null) {
          return dn;
        }
      }
    });
    var nodeCoodrs = new Map();
    var root = cq.getRootSVG(this.containerId);
    var rootBBox = root.getBoundingClientRect();
    documentNodes.forEach(dn => {
      var dnx = dn.getBoundingClientRect().x - rootBBox.x - root.scrollLeft - window.pageXOffset;
      var dny = dn.getBoundingClientRect().y - rootBBox.y - root.scrollTop - window.pageYOffset;
      nodeCoodrs.set(dn, {
        x: dnx,
        y: dny
      });
    });
    for (const [key, value] of nodeCoodrs.entries()) {
      var closestLeft;
      var closestRight;
      var closestTop;
      var closestDown;
      for (const [key, value] of nodeCoodrs.entries()) {
        //TODO
      }
    }
  }
  /**
   * Populate scoreGraoh according to mei
   * Add midi timeCode
   * @param xmlDoc
   * @param miditimes
   */
  populate(xmlDoc, miditimes) {
    var _a, _b, _c;
    this.graph = new Map();
    this.midiTimes = miditimes;
    xmlDoc.querySelectorAll(meiNodeSelector).forEach(e => {
      if (e.tagName === "note" && e.closest("chord") !== null) {
        // || (e.tagName === "layer" && e.children.length > 0)){
        return;
      }
      this.graph.set(e.id, new ScoreNode_1.default(e.id));
    });
    cq.getRootSVG(this.containerId).querySelectorAll(documentNodeSelector).forEach(e => {
      if (e.classList.contains("note") && e.closest(".chord") !== null) {
        return;
      }
      this.graph.set(e.id, new ScoreNode_1.default(e.id));
    });
    var layerCount = 0;
    xmlDoc.querySelectorAll("layer").forEach(l => {
      if (parseInt(l.getAttribute("n")) > layerCount) {
        layerCount = parseInt(l.getAttribute("n"));
      }
    });
    var staffCount = 0;
    xmlDoc.querySelectorAll("staff").forEach(l => {
      if (parseInt(l.getAttribute("n")) > staffCount) {
        staffCount = parseInt(l.getAttribute("n"));
      }
    });
    // Assign left/right nodes
    var layerArray;
    for (var s = 0; s < staffCount; s++) {
      for (var i = 0; i < layerCount; i++) {
        layerArray = Array.from(xmlDoc.querySelectorAll("staff[n=\"" + (s + 1).toString() + "\"] > layer[n=\"" + (i + 1).toString() + "\"]"));
        var elements = new Array();
        layerArray.forEach(l => {
          let staff = cq.getRootSVG(this.containerId).querySelector("#" + l.id).closest(".measure").querySelector(".staff[n='" + l.closest("staff").getAttribute("n") + "']");
          var documentNodes = Array.from(staff.querySelectorAll(documentNodeSelector2));
          var documentNodes = documentNodes.filter(dn => {
            if (!dn.classList.contains("note")) {
              return dn;
            }
            if (dn.classList.contains("note")) {
              if (dn.closest(".chord") === null) {
                return dn;
              }
            }
          });
          elements.push(...documentNodes);
        });
        elements.forEach((el, idx) => {
          var currentNode = this.graph.get(el.id);
          var prevSibling = idx === 0 ? null : this.graph.get(elements[idx - 1].id);
          var nextSibling = idx === elements.length - 1 ? null : this.graph.get(elements[idx + 1].id);
          if (idx > 0) {
            currentNode.setLeft(prevSibling);
          } else {
            // empty Node at beginning of Layer
            this.graph.set("BOL" + i.toString(), new ScoreNode_1.default("BOL" + i.toString()));
            this.graph.get("BOL" + i.toString()).setLeft(null);
            this.graph.get("BOL" + i.toString()).setUp(null);
            this.graph.get("BOL" + i.toString()).setDown(null);
            this.graph.get("BOL" + i.toString()).setRight(currentNode);
            currentNode.setLeft(this.graph.get("BOL" + i.toString()));
          }
          currentNode.setRight(nextSibling);
        });
      }
    }
    //Assign up/down nodes
    if (this.midiTimes == undefined) {
      // miditimes contain svg Elements (not mei Elements!!!)
      // first: direct up/down references
      for (const [key, value] of this.midiTimes.entries()) {
        var originArr = value;
        var arr = new Array();
        originArr.forEach(el => {
          var chord = el.closest(".chord");
          if (chord !== null && arr.indexOf(chord) === -1) {
            arr.push(chord);
          } else if (chord === null) {
            arr.push(el);
          }
        });
        arr.forEach((note, idx) => {
          var current = note;
          var upSibling = idx === 0 ? null : this.graph.get(arr[idx - 1].id);
          var downSibling = idx === arr.length - 1 ? null : this.graph.get(arr[idx + 1].id);
          var currentNode = this.graph.get(current.id);
          if (typeof currentNode.getTimeCode() === "undefined") {
            currentNode.setTimeCode(key);
          }
          currentNode.setUp(upSibling);
          currentNode.setDown(downSibling);
        });
      }
    }
    //DEAL WITH MRESTS
    var staves = cq.getRootSVG(this.containerId).querySelectorAll(".staff");
    for (var i = 0; i < staves.length - 1; i++) {
      var staffElements = staves[i].querySelectorAll(documentNodeSelector);
      var emptyElements = staves[i + 1].querySelectorAll(".clef, .meterSig, .keySig, .mRest, .layer");
      staffElements.forEach((se, idx) => {
        var gn = this.graph.get(se.id);
        if ((gn === null || gn === void 0 ? void 0 : gn.getDown()) === null || (gn === null || gn === void 0 ? void 0 : gn.getDown()) == undefined) {
          var tempIdx = idx;
          if (idx >= emptyElements.length) {
            tempIdx = emptyElements.length - 1;
          }
          var gnEmpty = this.graph.get(emptyElements[tempIdx].id);
          if ((gnEmpty === null || gnEmpty === void 0 ? void 0 : gnEmpty.getUp()) === null || (gnEmpty === null || gnEmpty === void 0 ? void 0 : gnEmpty.getUp()) == undefined) {
            gn === null || gn === void 0 ? void 0 : gn.setDown(gnEmpty);
            gnEmpty === null || gnEmpty === void 0 ? void 0 : gnEmpty.setUp(gn);
          }
        }
      });
    }
    //extra iteration for Beginning of Layer
    var currBol = null;
    var prevBol = null;
    for (const [key, value] of this.graph.entries()) {
      if (key.indexOf("BOL") !== -1) {
        currBol = value;
        var bolIdx = key[key.length - 1];
        if (bolIdx !== "0") {
          currBol.setUp(prevBol);
          if (prevBol !== null) {
            prevBol.setDown(currBol);
          }
        }
        prevBol = value;
      }
    }
    //if there are no direct up/down references, assign closest references
    for (const [key, value] of this.graph.entries()) {
      var currentNode = value;
      var leftNode = currentNode.getLeft();
      var rightNode = currentNode.getRight();
      if (currentNode.getUp() == undefined) {
        currentNode.setUp(null);
      }
      if (currentNode.getDown() == undefined) {
        currentNode.setDown(null);
      }
      // Get closest Node for UP reference
      //check left
      var closestTimeUp = 10 ** 10;
      var upSet = null;
      if (this.targetNodeIsLeftOrRight(currentNode, currentNode.getUp()) && leftNode !== null) {
        if (leftNode.getUp() !== null && typeof leftNode.getDown() !== "undefined") {
          closestTimeUp = (currentNode === null || currentNode === void 0 ? void 0 : currentNode.getTimeCode()) - ((_a = leftNode === null || leftNode === void 0 ? void 0 : leftNode.getUp()) === null || _a === void 0 ? void 0 : _a.getTimeCode()) || 0;
          upSet = leftNode === null || leftNode === void 0 ? void 0 : leftNode.getUp();
        }
      }
      //check right
      if (this.targetNodeIsLeftOrRight(currentNode, currentNode.getUp()) && rightNode !== null) {
        if (rightNode.getUp() !== null && typeof rightNode.getDown() !== "undefined") {
          if (((_b = rightNode.getUp()) === null || _b === void 0 ? void 0 : _b.getTimeCode()) - (currentNode === null || currentNode === void 0 ? void 0 : currentNode.getTimeCode()) < closestTimeUp) {
            upSet = rightNode === null || rightNode === void 0 ? void 0 : rightNode.getUp();
          }
        }
      }
      if (upSet !== null && upSet !== currentNode && !this.targetNodeIsLeftOrRight(currentNode, upSet)) {
        currentNode.setUp(upSet);
      }
      // Get closest Node for DOWN reference
      // check left
      var closestTimeDown = 10 ** 10;
      var downSet = null;
      if (this.targetNodeIsLeftOrRight(currentNode, currentNode.getDown()) && leftNode !== null) {
        if (leftNode.getDown() !== null && typeof leftNode.getDown() !== "undefined") {
          closestTimeDown = (currentNode === null || currentNode === void 0 ? void 0 : currentNode.getTimeCode()) - ((_c = leftNode === null || leftNode === void 0 ? void 0 : leftNode.getDown()) === null || _c === void 0 ? void 0 : _c.getTimeCode()) || 0;
          downSet = leftNode.getDown();
        }
      }
      // check right
      if (this.targetNodeIsLeftOrRight(currentNode, currentNode.getDown()) && rightNode !== null) {
        if (rightNode.getDown() !== null && rightNode.getDown() != undefined) {
          if (rightNode.getDown().getTimeCode() - currentNode.getTimeCode() < closestTimeDown) {
            downSet = rightNode.getDown();
          }
        }
      }
      if (downSet !== null && downSet !== currentNode && !this.targetNodeIsLeftOrRight(currentNode, downSet)) {
        currentNode.setDown(downSet);
      }
    }
    // for(const[key, value] of this.graph.entries()){
    //     console.log(document.getElementById(key))
    // }
    //console.log(this.graph)
  }

  targetNodeIsLeftOrRight(startNode, targetNode) {
    return this.targetIsNodeRight(startNode, targetNode) || this.targetIsNodeLeft(startNode, targetNode);
  }
  targetIsNodeLeft(startNode, targetNode) {
    var tempNode = startNode;
    var isLeft = false;
    while (tempNode !== null) {
      if (tempNode !== null) {
        if (tempNode == undefined) {
          return isLeft;
        }
        tempNode = tempNode.getLeft();
      }
      if (tempNode === targetNode) {
        isLeft = true;
      }
    }
    return isLeft;
  }
  targetIsNodeRight(startNode, targetNode) {
    var tempNode = startNode;
    var isRight = false;
    while (tempNode !== null) {
      if (tempNode !== null) {
        if (tempNode == undefined) {
          return isRight;
        }
        tempNode = tempNode.getRight();
      }
      if (tempNode === targetNode) {
        isRight = true;
      }
    }
    return isRight;
  }
  getCurrentNode() {
    return this.currentNode;
  }
  setCurrentNodeById(id) {
    var _a, _b;
    if (id == undefined) return;
    var lastNode = this.currentNode;
    this.currentNode = this.graph.get(id) || this.graph.get((_b = (_a = document.getElementById(id)) === null || _a === void 0 ? void 0 : _a.closest(".chord")) === null || _b === void 0 ? void 0 : _b.id) || lastNode;
    if (this.currentNode == undefined) {
      console.log(lastNode);
      throw new Error("CurrentNode undefined although id is given: " + id);
    }
  }
  setContainerId(containerId) {
    this.containerId = containerId;
  }
  nextUp() {
    var _a;
    if (this.currentNode != undefined && ((_a = this.currentNode) === null || _a === void 0 ? void 0 : _a.getUp()) !== null) {
      this.currentNode = this.currentNode.getUp();
    }
    return this.currentNode;
  }
  nextDown() {
    var _a;
    if (this.currentNode != undefined && ((_a = this.currentNode) === null || _a === void 0 ? void 0 : _a.getDown()) !== null) {
      this.currentNode = this.currentNode.getDown();
    }
    return this.currentNode;
  }
  nextRight() {
    var _a;
    if (this.currentNode != undefined && ((_a = this.currentNode) === null || _a === void 0 ? void 0 : _a.getRight()) !== null) {
      this.currentNode = this.currentNode.getRight();
    }
    return this.currentNode;
  }
  nextLeft() {
    var _a;
    if (this.currentNode != undefined && ((_a = this.currentNode) === null || _a === void 0 ? void 0 : _a.getLeft()) !== null) {
      this.currentNode = this.currentNode.getLeft();
    }
    return this.currentNode;
  }
  /**
   * Go to next Element with given classname.
   * Whatever comes first according to the classNames array.
   * @param classNames
   * @param direction
   * @returns
   */
  nextClass(classNames, direction) {
    var _a;
    var currentId = (_a = this.currentNode) === null || _a === void 0 ? void 0 : _a.getId();
    if ([null, undefined].some(id => id == currentId)) return;
    var nextIsNull = false;
    do {
      switch (direction) {
        case "ArrowLeft":
        case "left":
          nextIsNull = [null, undefined].some(n => this.currentNode.getLeft() == n);
          this.nextLeft();
          break;
        case "ArrowRight":
        case "right":
          nextIsNull = [null, undefined].some(n => this.currentNode.getRight() == n);
          this.nextRight();
          break;
        case "ArrowUp":
        case "up":
          nextIsNull = [null, undefined].some(n => this.currentNode.getUp() == n);
          this.nextUp();
          break;
        case "ArrowDown":
        case "down":
          nextIsNull = [null, undefined].some(n => this.currentNode.getDown() == n);
          this.nextDown();
          break;
        default:
          console.error(direction + " is not allowed. Use left, right, up or down");
          return;
      }
    } while (!classNames.some(cn => {
      var _a, _b;
      return (_b = (_a = this.currentNode) === null || _a === void 0 ? void 0 : _a.getDocElement()) === null || _b === void 0 ? void 0 : _b.classList.contains(cn);
    }) && !nextIsNull);
    if (nextIsNull) {
      this.setCurrentNodeById(currentId);
    }
    return this.currentNode;
  }
  //Check if ScoreGraph is at beginning of layer
  isBOL() {
    return this.currentNode.getLeft() === null && this.currentNode.getId().indexOf("BOL") !== -1;
  }
}
exports["default"] = ScoreGraph;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/ScoreNode.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/ScoreNode.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
class ScoreNode {
  constructor(id) {
    this.id = id;
    this.setDocElement();
  }
  hasNodeAnywhere(sn) {
    if ([this.up, this.down, this.left, this.right].indexOf(sn) > -1) {
      return true;
    }
    return false;
  }
  printElements() {
    var u, d, r, l;
    u = d = r = l = null;
    var c = document.getElementById(this.id);
    if (this.up !== null) {
      u = document.getElementById(this.up.id);
    }
    if (this.down !== null) {
      d = document.getElementById(this.down.id);
    }
    if (this.left !== null) {
      l = document.getElementById(this.left.id);
    }
    if (this.right !== null) {
      r = document.getElementById(this.right.id);
    }
    console.log("CURRENT", c, "UP", u, "DOWN", d, "LEFT", l, "RIGHT", r);
  }
  isBOL() {
    return this.id.indexOf("BOL") > -1;
  }
  isLayer() {
    return document.getElementById(this.id).classList.contains("layer");
  }
  getId() {
    return this.id;
  }
  getUp() {
    return this.up;
  }
  getDown() {
    return this.down;
  }
  getLeft() {
    return this.left;
  }
  getRight() {
    return this.right;
  }
  getTimeCode() {
    return this.timeCode;
  }
  getDocElement() {
    return this.docElement || document.getElementById(this.id) || null;
  }
  setUp(sn) {
    this.up = sn;
  }
  setDown(sn) {
    this.down = sn;
  }
  setLeft(sn) {
    this.left = sn;
  }
  setRight(sn) {
    this.right = sn;
  }
  setTimeCode(tc) {
    this.timeCode = tc;
  }
  setDocElement() {
    this.docElement = document.getElementById(this.id);
  }
}
exports["default"] = ScoreNode;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/Annotations.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/Annotations.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const AnnotationChangeHandler_1 = __webpack_require__(/*! ../handlers/AnnotationChangeHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/AnnotationChangeHandler.js");
const CustomAnnotationShapeDrawer_1 = __webpack_require__(/*! ../handlers/CustomAnnotationShapeDrawer */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/CustomAnnotationShapeDrawer.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
class Annotations {
  constructor(containerId) {
    ////HANDLERS////
    this.clickHandler = function clickHandler(e) {
      e.preventDefault();
      if (!this.annotationCanvas.classList.contains("front")) {
        this.setToFront();
      } else {
        this.setToBack();
      }
    }.bind(this);
    this.createAnnotationHandler = function createAnnotationHandler(e) {
      var _a;
      var t = e.target;
      if ((_a = t.closest(".vseContainer")) === null || _a === void 0 ? void 0 : _a.classList.contains("clickmode")) return; // creation should only be possible when annotation tab is on
      var selectedAnnotations = this.interactionOverlay.querySelectorAll("#annotationCanvas .selected");
      if (selectedAnnotations.length === 0) {
        this.createAnnotation(e);
      } else {
        selectedAnnotations.forEach(sa => {
          sa.classList.remove("selected");
        });
      }
    }.bind(this);
    this.selectHandler = function selectHandler(e) {
      this.select(e);
    }.bind(this);
    this.updateUndoStacks = function updateUndoStacks(e) {
      if (!cq.hasActiveElement(this.containerId)) {
        return;
      }
      var canvasClone = this.interactionOverlay.querySelector("#annotationCanvas").cloneNode(true);
      var listClone = this.container.querySelector("#annotList").cloneNode(true);
      this.annotList = this.container.querySelector("#annotList");
      this.undoStacks.push([canvasClone, listClone]);
      this.annotationCanvas = this.interactionOverlay.querySelector("#annotationCanvas");
    }.bind(this);
    this.updateRedoStacks = function updateRedoStacks(e) {
      if (!cq.hasActiveElement(this.containerId)) {
        return;
      }
      this.redoStacks.push([this.annotationCanvas, this.annotList]);
      this.annotationCanvas = this.undoStacks[0][0];
      this.annotList = this.undoStacks[0][1];
    }.bind(this);
    /**
     * Set Contenteditable True when doubleclicked
     * @param e Doubleclick
     */
    this.activateEditHandler = function activateEditHandler(e) {
      var target = e.target;
      target.setAttribute("contenteditable", "true");
      target.focus();
      this.annotationChangeHandler.removeListeners();
    }.bind(this);
    /**
     * Delete all selected elements by pressing delete. Except: When any Elements are in Editable mode
     * @param e Keyboardevent (code = Delete)
     */
    this.deleteHandler = function deleteHandler(e) {
      if (!cq.hasActiveElement(this.containerId)) {
        return;
      }
      var isValidKey = ["Delete", "Backspace"].some(code => e.code === code);
      //var isInAnnotMode = this.container.classList.contains("annotMode")
      var hasEditableElement = this.interactionOverlay.querySelectorAll(".selected [contenteditable=true]").length > 0;
      var listHasFocus = Array.from(this.container.querySelectorAll("#annotList > *")).some(le => le === document.activeElement);
      //if(isValidKey && isInAnnotMode && !hasEditableElement && !listHasFocus){
      if (isValidKey && !hasEditableElement && !listHasFocus) {
        this.interactionOverlay.querySelectorAll("#annotationCanvas .selected").forEach(el => {
          if (el.closest("g") !== null) {
            el.closest("g").remove();
          } else {
            el.remove();
          }
        });
        this.interactionOverlay.dispatchEvent(new Event("annotChanged"));
        this.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
      }
    }.bind(this);
    this.submitLabelHandler = function submitHandler(e) {
      var target = e.target;
      if (e.key === "Enter" || e.key === "Escape") {
        target.blur();
        this.interactionOverlay.dispatchEvent(new Event("annotChanged"));
        this.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
      }
    }.bind(this);
    this.setContainerId(containerId);
    this.addCanvas();
    this.annotations = new Array();
  }
  addCanvas() {
    this.rootBBox = this.rootSVG.getBoundingClientRect();
    var rootWidth = this.rootBBox.width.toString();
    var rootHeigth = this.rootBBox.height.toString();
    var vb = this.rootSVG.getAttribute("viewBox");
    if (this.annotationCanvas == undefined) {
      this.annotationCanvas = document.createElementNS(constants_1.constants._SVGNS_, "svg");
      this.annotationCanvas.setAttribute("id", "annotationCanvas");
      this.annotationCanvas.classList.add("canvas");
      //this.annotationCanvas.classList.add("back")
      //this.annotationCanvas.setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "))
    }

    this.annotationCanvas.setAttribute("viewBox", vb);
    this.interactionOverlay = cq.getInteractOverlay(this.containerId);
    if (this.annotationCanvas.classList.contains("front")) {
      this.interactionOverlay.insertBefore(this.annotationCanvas, this.interactionOverlay.lastChild.nextSibling);
    } else {
      this.interactionOverlay.insertBefore(this.annotationCanvas, this.interactionOverlay.firstChild);
    }
  }
  setMenuClickHandler() {
    var _a;
    (_a = this.container.querySelector("#activateAnnot")) === null || _a === void 0 ? void 0 : _a.addEventListener("click", this.clickHandler);
    return this;
  }
  setListeners() {
    this.resetTextListeners();
    this.customAnnotationDrawer = new CustomAnnotationShapeDrawer_1.default(this.containerId);
    this.customAnnotationDrawer.setUpdateCallback(this.resetTextListeners.bind(this));
    var harmonyButton = this.container.querySelector("#harmonyAnnotButton");
    var that = this;
    this.container.querySelectorAll("#staticTextButton, #linkedAnnotButton").forEach(b => {
      b.addEventListener("click", function () {
        that.setToFront();
        //harmonyButton.classList.remove("selected")
        that.resetTextListeners();
        b.dispatchEvent(new Event("annotationButtonClicked"));
      });
    });
    harmonyButton.addEventListener("click", function () {
      that.removeTextListeners();
      harmonyButton.dispatchEvent(new Event("annotationButtonClicked"));
    });
  }
  removeListeners() {
    this.removeTextListeners();
  }
  setTextListeners() {
    // this.customAnnotationDrawer = new CustomAnnotationShapeDrawer(this.containerId)
    // this.customAnnotationDrawer.setUpdateCallback(this.resetTextListeners.bind(this))
    this.annotationChangeHandler = new AnnotationChangeHandler_1.default(this.containerId);
    this.annotationChangeHandler.setUpdateCallback(this.resetTextListeners.bind(this)).setM2M(this.m2m).setAnnotations(this.annotations).update().resetListeners();
    this.interactionOverlay.addEventListener("dblclick", this.createAnnotationHandler);
    var that = this;
    this.interactionOverlay.querySelectorAll(".annotDiv").forEach(ad => {
      ad.addEventListener("click", this.selectHandler);
      ad.addEventListener("dblclick", this.activateEditHandler);
      ad.addEventListener("focus", function () {
        that.musicPlayer.removePlayListener();
      });
      ad.addEventListener("blur", function () {
        that.musicPlayer.setPlayListener();
      });
      ad.addEventListener("keydown", this.submitLabelHandler);
    });
    this.interactionOverlay.querySelectorAll(".customAnnotShape").forEach(cas => {
      cas.addEventListener("dblclick", this.selectHandler);
    });
    document.addEventListener("keydown", this.deleteHandler);
    document.addEventListener("annotationCanvasChanged", this.updateUndoStacks, true);
    //document.addEventListener("annotationCanvasChanged", this.updateRedoStacks)
    return this;
  }
  removeTextListeners() {
    var _a;
    this.container.querySelector("#activateAnnot").removeEventListener("click", this.clickHandler);
    this.setMenuClickHandler();
    this.interactionOverlay.removeEventListener("dblclick", this.createAnnotationHandler);
    this.interactionOverlay.querySelectorAll(".annotDiv").forEach(ad => {
      var _a;
      (_a = ad.closest("svg")) === null || _a === void 0 ? void 0 : _a.classList.remove("selected");
      ad.setAttribute("contenteditable", "false");
      ad.removeEventListener("click", this.selectHandler);
      ad.removeEventListener("dblclick", this.activateEditHandler);
    });
    this.interactionOverlay.querySelectorAll(".lineDragRect").forEach(ldr => ldr.remove());
    this.interactionOverlay.querySelectorAll(".customAnnotShape").forEach(cas => {
      cas.removeEventListener("dblclick", this.selectHandler);
    });
    document.removeEventListener("keydown", this.deleteHandler);
    (_a = this.customAnnotationDrawer) === null || _a === void 0 ? void 0 : _a.removeListeners();
    // interaction with all the annotations should always be possible
    //this.annotationChangeHandler?.removeListeners()
    return this;
  }
  resetTextListeners() {
    this.removeTextListeners();
    this.setTextListeners();
  }
  resetListeners() {
    this.resetTextListeners();
  }
  setCustomShapeListener() {
    var customShapes = null;
  }
  /**
   * Select a specific annotation methon based on selected button
   * @param e
   */
  createAnnotation(e) {
    var _a;
    var selectedButton = (_a = this.container.querySelector("#annotGroupKM > .selected")) === null || _a === void 0 ? void 0 : _a.id;
    if (selectedButton === null) return;
    switch (selectedButton) {
      case "linkedAnnotButton":
        this.createTextAnnotation(e, selectedButton);
        break;
      case "staticTextButton":
        this.createTextAnnotation(e, selectedButton);
        break;
      case "harmonyAnnotButton":
        //this.createHarmonyAnnot(e)
        console.log(selectedButton, "Please implement me o(；△；)o");
        break;
      default:
        console.log("There is no implementation at all");
    }
  }
  /**
   * Create a new linked annotation Instance
   * @param e
   * @returns
   */
  createTextAnnotation(e, textButtonId) {
    if (e.target.id !== this.interactionOverlay.id) {
      return;
    }
    this.setToFront();
    var selcount = 0;
    this.annotationCanvas.querySelectorAll(":scope > .selected").forEach(el => {
      el.classList.remove("selected");
      selcount += 1;
    });
    if (selcount > 0) {
      return;
    }
    var isLinked = false;
    var isStaticText = false;
    switch (textButtonId) {
      case "linkedAnnotButton":
        isLinked = true;
        break;
      case "staticTextButton":
        isStaticText = true;
        break;
    }
    var pt = coordinates.transformToDOMMatrixCoordinates(e.clientX, e.clientY, cq.getInteractOverlay(this.containerId));
    var posx = pt.x; //matrixTransform(rootMatrix).x //e.pageX - this.rootBBox.x - window.pageXOffset
    var posy = pt.y; //matrixTransform(rootMatrix).y //e.pageY - this.rootBBox.y - window.pageYOffset
    var annotationTarget = this.m2m.findScoreTarget(posx, posy, false);
    var textGroup = document.createElementNS(constants_1.constants._SVGNS_, "g");
    textGroup.setAttribute("id", random_1.uuidv4());
    textGroup.setAttribute("targetId", annotationTarget.id);
    var text = document.createElementNS(constants_1.constants._SVGNS_, "svg");
    if (isLinked) text.classList.add("annotLinkedText");else if (isStaticText) text.classList.add("annotStaticText");
    var textForeignObject = document.createElementNS(constants_1.constants._SVGNS_, "foreignObject");
    textForeignObject.classList.add("annotFO");
    var textDiv = document.createElement("div");
    textDiv.setAttribute("contenteditable", "false");
    textDiv.setAttribute("data-text", "New Annotation");
    textDiv.textContent = "";
    textDiv.classList.add("annotDiv");
    text.append(textForeignObject);
    this.container.appendChild(textDiv);
    var rectPadding = 5;
    // text.setAttribute("x", "0")
    // text.setAttribute("y", "0")
    textForeignObject.setAttribute("x", (posx + rectPadding).toString());
    textForeignObject.setAttribute("y", posy.toString());
    textForeignObject.setAttribute("height", (50 + 2 * rectPadding + 10).toString());
    textForeignObject.setAttribute("width", (50 + 2 * rectPadding + 50).toString());
    if (isLinked) {
      var line = document.createElementNS(constants_1.constants._SVGNS_, "line");
      line.classList.add("annotLine");
      line.setAttribute("x2", textForeignObject.x.baseVal.valueAsString);
      line.setAttribute("y2", textForeignObject.y.baseVal.valueAsString);
      line.setAttribute("x1", annotationTarget.x.toString()); //(annotationTarget.x - this.rootBBox.x - window.pageXOffset).toString())
      line.setAttribute("y1", annotationTarget.y.toString()); //(annotationTarget.y - this.rootBBox.y - window.pageYOffset).toString())
      line.classList.add("annotLine");
      textGroup.appendChild(line);
    }
    textForeignObject.append(textDiv);
    textGroup.appendChild(text);
    var newAnnot = {
      sourceID: textGroup.id,
      targetID: annotationTarget.id
      // relativePos: {
      //     x: textGroup.getBoundingClientRect().x - annotationTarget.getBoundingClientRect().x, 
      //     y: textGroup.getBoundingClientRect().y - annotationTarget.getBoundingClientRect().y
      // }
    };

    this.annotations.push(newAnnot);
    this.annotationCanvas.appendChild(textGroup);
    this.deactivateEdit();
    this.resetTextListeners();
    this.interactionOverlay.dispatchEvent(new Event("annotChanged"));
    this.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
  }
  /**
   * Mark an annotation as selected.
   * @param e
   */
  select(e) {
    var _a, _b;
    e.stopPropagation(); //do not trigger other events
    var t = e.target;
    if (t.classList.contains("annotDiv") && t.closest(".annotLinkedText") !== null) {
      // only apply for linked texts
      //Add A selection Rect to line target
      this.interactionOverlay.querySelectorAll(".lineDragRect").forEach(ldr => ldr.remove());
      var line = t.closest("g").querySelector(".annotLine");
      //Rect attacted to x2 target
      var lineDragRect = document.createElementNS(constants_1.constants._SVGNS_, "rect");
      t.closest("g").appendChild(lineDragRect);
      lineDragRect.classList.add("lineDragRect");
      lineDragRect.classList.add("x2");
      lineDragRect.setAttribute("x", line.x2.baseVal.valueAsString);
      lineDragRect.setAttribute("y", line.y2.baseVal.valueAsString);
      //Rect attacted to x1 target
      lineDragRect = document.createElementNS(constants_1.constants._SVGNS_, "rect");
      t.closest("g").appendChild(lineDragRect);
      lineDragRect.classList.add("lineDragRect");
      lineDragRect.classList.add("x1");
      lineDragRect.setAttribute("x", line.x1.baseVal.valueAsString);
      lineDragRect.setAttribute("y", line.y1.baseVal.valueAsString);
      //this.AnnotationLineHandler.initDragRects()
    }

    (_b = (_a = t === null || t === void 0 ? void 0 : t.closest("svg")) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.add("selected");
    this.annotationChangeHandler.resetListeners();
  }
  deactivateEdit() {
    this.interactionOverlay.querySelectorAll(".annotDiv").forEach(ad => {
      ad.setAttribute("contenteditable", "false");
      ad.removeEventListener("dblclick", this.activateEditHandler);
    });
    this.annotationChangeHandler.removeListeners();
  }
  updateCanvas() {
    var _a;
    this.addCanvas();
    (_a = this.annotationChangeHandler) === null || _a === void 0 ? void 0 : _a.update();
    if (this.annotationCanvas.classList.contains("back")) {
      this.removeListeners();
    } else {
      this.resetTextListeners();
    }
  }
  updateAnnotationList(annotionCanvs) {
    //TODO: Aktuallsieren des Datenmodells aus den Informarionen in der SVG: übersetzen der SVG in Annotation-Objekte
    var that = this;
    this.annotationCanvas = annotionCanvs;
    this.annotationCanvas.querySelectorAll(":scope > g").forEach(g => {
      var a = {
        sourceID: g.id,
        targetID: g.getAttribute("targetId")
      };
      that.annotations.push(a);
    });
    this.interactionOverlay.dispatchEvent(new Event("annotChanged"));
    this.resetTextListeners();
  }
  /////////// UTILITIES //////////////
  /**
   * Put annotationCanvas to Front for editing
   * @returns
   */
  setToFront() {
    if (this.annotationCanvas.classList.contains("front")) {
      return this;
    }
    this.annotationCanvas.classList.remove("back");
    this.annotationCanvas.classList.add("front");
    this.interactionOverlay.insertBefore(this.getAnnotationCanvas(), this.interactionOverlay.lastChild.nextSibling);
    this.setListeners();
    this.container.classList.forEach(c => {
      if (c.toLowerCase().includes("mode")) {
        // ensure to only allow one mode when switching to annotMode
        this.container.classList.remove(c);
      }
    });
    this.container.classList.add("annotMode");
    return this;
  }
  /**
   * Set annotationCanvas to Back, when in different mode
   * @returns
   */
  setToBack() {
    // if( this.annotationCanvas.classList.contains("back")){return}
    // this.annotationCanvas.classList.remove("front")
    // this.annotationCanvas.classList.add("back")
    // if((this.getAnnotationCanvas() !== (this.interactionOverlay.firstChild as SVGSVGElement) && this.getAnnotationCanvas() !== null)){
    //     this.interactionOverlay.insertBefore(this.getAnnotationCanvas(), this.interactionOverlay.firstChild)
    // }
    // this.removeListeners()
    // this.container.classList.remove("annotMode")
    return this;
  }
  ////////// GETTER/ SETTER////////////
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  getAnnotationCanvas() {
    return this.interactionOverlay.querySelector("#annotationCanvas") || this.annotationCanvas;
  }
  setAnnotationCanvas(annotationCanvas) {
    this.updateAnnotationList(annotationCanvas);
  }
  getAnnotationChangeHandler() {
    return this.annotationChangeHandler;
  }
  setUndoStacks(arr) {
    if (arr[0] == undefined || this.undoStacks == undefined) {
      this.undoStacks = arr;
      var canvasClone = this.interactionOverlay.querySelector("#annotationCanvas").cloneNode(true);
      var listClone = this.container.querySelector("#annotList").cloneNode(true);
      this.undoStacks.push([canvasClone, listClone]);
      //this.annotationCanvas = document.getElementById("annotationCanvas") as unknown as SVGSVGElement
    }

    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.container = document.getElementById(id);
    this.rootSVG = cq.getRootSVG(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    return this;
  }
}
exports["default"] = Annotations;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/HarmonyLabel.js":
/*!**************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/HarmonyLabel.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
class HarmonyLabel {
  constructor(inputString, startid, mei) {
    this.isBassoContinuo = false;
    this.isText = false;
    this.startid = startid;
    this.currentMEI = mei;
    this.inputString = inputString;
    this.element = this.currentMEI.getElementById(startid);
    if (["note", "chord"].some(c => this.element.tagName === c)) {
      this.checkFormat(inputString);
      this.createElement(inputString);
    }
  }
  checkFormat(inputString) {
    this.isBassoContinuo = false;
    this.isText = false;
    var letters = /[Aa]|[C-Zc-z]+$/; // b is allowed character in bc
    if (inputString.match(letters)) {
      this.isText = true;
    } else {
      this.isBassoContinuo = true;
    }
  }
  /**
   * Change text of already existing label
   * @param inputString
   */
  modifyLabel(inputString) {
    this.checkFormat(inputString);
    this.parseInput(inputString);
  }
  createElement(inputString) {
    this.element = this.currentMEI.createElement("harm");
    this.element.setAttribute("id", random_1.uuidv4());
    this.element.setAttribute("place", "below");
    Array.from(this.element.children).forEach(c => {
      c.remove();
    });
    this.parseInput(inputString);
    this.setStartId();
  }
  parseInput(inputString) {
    if (this.isBassoContinuo) {
      this.parseFB(inputString);
    }
    if (this.isText) {
      this.parseText(inputString);
    }
  }
  parseText(inputString) {
    inputString = inputString.replace("b", "♭");
    inputString = inputString.replace("#", "♯");
    inputString = inputString.replace("|", "♮");
    this.element.textContent = inputString;
  }
  parseFB(inputString) {
    var splitArray = inputString.split(" ");
    splitArray = splitArray.filter(s => s !== "");
    var fb = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "fb");
    this.element.textContent = "";
    this.element.appendChild(fb);
    splitArray.forEach(sa => {
      var f = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "f");
      sa = sa.replace("b", "♭");
      sa = sa.replace("#", "♯");
      sa = sa.replace("|", "♮");
      f.textContent = sa;
      fb.appendChild(f);
    });
  }
  ///////// HARMONY HANDLER STUFF ////////////////
  /**
   * Has to be set by HarmonyHandler
   * @param el
   */
  setStartId(startId = this.startid) {
    this.element.setAttribute("startid", startId);
    return this;
  }
  ////////////// GETTER/ SETTER ////////////
  getElement() {
    return this.element;
  }
  getInput() {
    return this.inputString;
  }
  getStartId() {
    return this.startid;
  }
  setCurrentMEI(mei) {
    this.currentMEI = mei;
    return this;
  }
}
exports["default"] = HarmonyLabel;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/PhantomElement.js":
/*!****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/PhantomElement.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const mappings_1 = __webpack_require__(/*! ../utils/mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const svgNS = "http://www.w3.org/2000/svg";
class PhantomElement {
  constructor(elementName, containerId, options = null, canvas = undefined) {
    elementName = elementName.toLowerCase();
    this.setContainerId(containerId);
    this.phantomCanvas = canvas || this.interactionOverlay.querySelector("#phantomCanvas");
    switch (elementName) {
      case "note":
        this.makeNewPhantomNote();
        break;
      case "line":
        this.makeNewPhantomLine(options);
        break;
      case "timemarkers":
        //this.makeNewTimeMarkers(options)
        break;
      default:
        console.log("Element", elementName, "is not supported");
        break;
    }
  }
  makeNewPhantomNote() {
    this.removePhantomNote();
    if (this.container.classList.contains("clickmode") && this.interactionOverlay.querySelector("#phantomNote") === null) {
      var circle = document.createElementNS(svgNS, "circle");
      this.phantomCanvas.insertBefore(circle, this.phantomCanvas.firstChild);
      circle.setAttribute("id", "phantomNote");
      var r = 5;
      circle.setAttribute("r", r.toString());
      circle.setAttribute("fill", "black");
      circle.setAttribute("opacity", "0.5");
      circle.setAttribute("visibility", "hidden");
      this.noteElement = circle;
    }
  }
  makeNewPhantomLine(options) {
    if (options.lineX == undefined || options.lineY == undefined) {
      return;
    }
    if (this.container.classList.contains("clickmode")) {
      new Promise(resolve => {
        var _a;
        var line = document.createElementNS(svgNS, "line");
        this.phantomCanvas.insertBefore(line, this.phantomCanvas.firstChild);
        var width = 10;
        var x1, x2, y1, y2;
        y1 = y2 = options.lineY;
        x1 = options.lineX - width;
        x2 = options.lineX + width;
        line.setAttribute("x1", x1.toString());
        line.setAttribute("x2", x2.toString());
        line.setAttribute("y1", y1.toString());
        line.setAttribute("y2", y2.toString());
        line.classList.add("phantomLine");
        line.setAttribute("visibility", (_a = this.phantomCanvas.querySelector("#phantomNote")) === null || _a === void 0 ? void 0 : _a.getAttribute("visibility"));
        resolve(true);
      });
    }
  }
  /**
   * Draw markers in bar to approximate distances between notes.
   * Division is always based on the selected duration in the toolbar and the time unit.
   * @param options.lastStaffEnteredId Id of the staff where the markes will be drawn
   * @returns
   */
  makeNewTimeMarkers(options) {
    var _a;
    if (options.lastStaffEnteredId == undefined) return;
    var staff = cq.getRootSVG(this.containerId).querySelector("#" + options.lastStaffEnteredId);
    var staffHeight = Array.from(staff.querySelectorAll(".staffLine")).reverse()[0].getBoundingClientRect().bottom - staff.querySelector(".staffLine").getBoundingClientRect().top;
    var staffBegin = staff.closest(".measure").getAttribute("n") === "1" ? staff.querySelector(".meterSig").getBoundingClientRect().right : staff.getBoundingClientRect().left;
    var staffWidth = staff.getBoundingClientRect().right - staffBegin;
    var measureN = staff.closest(".measure").getAttribute("n");
    var staffN = staff.getAttribute("n");
    var ratio = parseInt(options.measureMatrix.get(staffN, measureN).meterSig.count) / parseInt(options.measureMatrix.get(staffN, measureN).meterSig.unit);
    var numLines = mappings_1.NoteButtonIdToNum.get((_a = cq.getContainer(this.containerId).querySelector("#noteGroup > .selected")) === null || _a === void 0 ? void 0 : _a.id) * ratio;
    var cutUnit = staffWidth / numLines;
    var linePosX = new Array();
    var linePosY = staff.querySelector(".staffLine").getBoundingClientRect().top;
    for (var i = 0; i < numLines; i++) {
      linePosX.push(staffBegin + i * cutUnit);
    }
    linePosX.forEach(l => {
      var _a;
      var line = document.createElementNS(svgNS, "line");
      this.phantomCanvas.insertBefore(line, this.phantomCanvas.firstChild);
      var x1, x2, y1, y2;
      y1 = linePosY;
      y2 = linePosY - staffHeight / 5;
      x1 = x2 = l; //+ (staffWidth / numLines)
      var coords1 = coordinates.transformToDOMMatrixCoordinates(x1, y1, this.phantomCanvas);
      var coords2 = coordinates.transformToDOMMatrixCoordinates(x2, y2, this.phantomCanvas);
      line.setAttribute("x1", coords1.x.toString());
      line.setAttribute("x2", coords2.x.toString());
      line.setAttribute("y1", coords1.y.toString());
      line.setAttribute("y2", coords2.y.toString());
      line.classList.add("phantomMarker");
      line.setAttribute("visibility", (_a = this.phantomCanvas.querySelector("#phantomNote")) === null || _a === void 0 ? void 0 : _a.getAttribute("visibility"));
    });
  }
  removePhantomNote() {
    if (this.container.querySelector("#phantomNote") !== null) {
      this.container.querySelector("#phantomNote").remove();
    }
  }
  setNoteRadius(r) {
    this.noteR = r;
  }
  setPhantomCanvas(canvas) {
    this.phantomCanvas = canvas;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.rootSVG = cq.getRootSVG(id);
    this.container = document.getElementById(id);
    return this;
  }
  getNoteElement() {
    return this.noteElement;
  }
}
exports["default"] = PhantomElement;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/ScoreManipulator.js":
/*!******************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/ScoreManipulator.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const manipFlag = "manipulator";
/**
 * Class for all manipulators (Buttons, Lists, etc) directly visible in the score
 */
class ScoreManipulator {
  constructor() {}
  drawButton(id = null, classNames = null, sign, posX, posY, size, targetParent, refId) {
    var _a;
    size = targetParent.getBoundingClientRect().height * 0.01;
    var newSVG = document.createElementNS(constants_1.constants._SVGNS_, "svg");
    //newSVG.setAttribute("viewBox", [posX.toString(), posY.toString(), size.toString(), size.toString()].join(" "))
    if (id !== null) newSVG.setAttribute("id", id);
    if (Array.from(this.interactionOverlay.querySelectorAll("maniplationCanvas *")).some(el => el.id === id)) {
      return;
    }
    newSVG.classList.add(manipFlag);
    newSVG.setAttribute("x", posX.toString());
    newSVG.setAttribute("y", posY.toString());
    newSVG.setAttribute("height", size.toString());
    newSVG.setAttribute("width", size.toString());
    if (classNames !== null) {
      var cn = classNames.split(" ");
      cn.forEach(c => {
        newSVG.classList.add(c);
      });
    }
    var circle = document.createElementNS(constants_1.constants._SVGNS_, "circle");
    circle.setAttribute("id", "manipulationButton");
    circle.setAttribute("cx", "50%");
    circle.setAttribute("cy", "50%");
    circle.setAttribute("r", "40%");
    newSVG.append(circle);
    if (sign === "-" || sign === "+") {
      var horizonal = document.createElementNS(constants_1.constants._SVGNS_, "line");
      horizonal.classList.add("signElement");
      horizonal.setAttribute("x1", "20%");
      horizonal.setAttribute("y1", "50%");
      horizonal.setAttribute("x2", "80%");
      horizonal.setAttribute("y2", "50%");
      newSVG.append(horizonal);
    }
    if (sign === "+") {
      var vertical = horizonal.cloneNode(true);
      vertical.setAttribute("transform", "rotate(90)");
      vertical.setAttribute("transform-origin", "center");
      newSVG.append(vertical);
    }
    newSVG.setAttribute("refId", refId);
    (_a = this.interactionOverlay.querySelector("#manipulatorCanvas")) === null || _a === void 0 ? void 0 : _a.appendChild(newSVG);
  }
  drawMeasureAdder() {
    this.lastBline = Array.from(this.rootSVG.querySelectorAll(".barLine")).reverse()[0];
    var lastBlineRect = this.lastBline.getBoundingClientRect();
    var rootBBox = this.rootSVG.getBoundingClientRect();
    var rootMatrix = this.rootSVG.getScreenCTM().inverse();
    var ptRootLT = new DOMPoint(rootBBox.left, rootBBox.top);
    ptRootLT = ptRootLT.matrixTransform(rootMatrix);
    var ptRootRB = new DOMPoint(rootBBox.right, rootBBox.bottom);
    ptRootRB = ptRootRB.matrixTransform(rootMatrix);
    var ptRootWidth = Math.abs(ptRootRB.x - ptRootLT.x);
    var ptRootHeight = Math.abs(ptRootRB.y - ptRootLT.y);
    var ptBlineLT = new DOMPoint(lastBlineRect.left, lastBlineRect.top);
    ptBlineLT = ptBlineLT.matrixTransform(rootMatrix);
    var ptBlineRB = new DOMPoint(lastBlineRect.right, lastBlineRect.bottom);
    ptBlineRB = ptBlineRB.matrixTransform(rootMatrix);
    var ptBlineWidth = Math.abs(ptBlineRB.x - ptBlineLT.x);
    var ptBlineHeight = Math.abs(ptBlineRB.y - ptBlineLT.y);
    var blineTop = lastBlineRect.top - rootBBox.y; // - root.scrollTop
    var blineRight = lastBlineRect.right + rootBBox.height * 0.007 - rootBBox.x; //+ root.scrollLeft
    // var blineTop = ptBlineLT.y //lastBlineRect.top - rootBBox.y - root.scrollTop
    // var blineRight = ptBlineRB.x + ptRootHeight*0.007 //lastBlineRect.right + rootBBox.height*0.007 - rootBBox.x + root.scrollLeft
    var containerSize = ptBlineHeight * 0.1; //(lastBlineRect.height * 0.1)
    this.drawButton("measureAdder", null, "+", blineRight, blineTop, containerSize, this.lastBline.closest("svg").parentElement, "Add Measure");
  }
  drawMeasureRemover() {
    var _a;
    this.lastBline = Array.from((_a = document.getElementById(this.containerId)) === null || _a === void 0 ? void 0 : _a.querySelectorAll(".barLine")).reverse()[0];
    var lastBlineRect = this.lastBline.getBoundingClientRect();
    var rootBBox = this.rootSVG.getBoundingClientRect();
    var rootMatrix = this.rootSVG.getScreenCTM().inverse();
    var ptRootLT = new DOMPoint(rootBBox.left, rootBBox.top);
    ptRootLT = ptRootLT.matrixTransform(rootMatrix);
    var ptRootRB = new DOMPoint(rootBBox.right, rootBBox.bottom);
    ptRootRB = ptRootRB.matrixTransform(rootMatrix);
    var ptRootWidth = Math.abs(ptRootRB.x - ptRootLT.x);
    var ptRootHeight = Math.abs(ptRootRB.y - ptRootLT.y);
    var ptBlineLT = new DOMPoint(lastBlineRect.left, lastBlineRect.top);
    ptBlineLT = ptBlineLT.matrixTransform(rootMatrix);
    var ptBlineRB = new DOMPoint(lastBlineRect.right, lastBlineRect.bottom);
    ptBlineRB = ptBlineRB.matrixTransform(rootMatrix);
    var ptBlineWidth = Math.abs(ptBlineRB.x - ptBlineLT.x);
    var ptBlineHeight = Math.abs(ptBlineRB.y - ptBlineLT.y);
    var blineTop = lastBlineRect.top + rootBBox.height * 0.01 - rootBBox.y; //+ root.scrollTop 
    var blineRight = lastBlineRect.right + rootBBox.height * 0.007 - rootBBox.x; //+ root.scrollLeft 
    // var blineTop = ptBlineLT.y + ptRootHeight * 0.01
    // var blineRight = ptBlineRB.x + ptRootHeight * 0.007
    var containerSize = ptBlineHeight * 0.1; //(lastBlineRect.height * 0.1)
    this.drawButton("measureRemover", null, "-", blineRight, blineTop, containerSize, this.lastBline.closest("svg").parentElement, "Remove Measure");
  }
  drawStaffManipulators() {
    this.rootSVG.querySelector(".measure").querySelectorAll(".staff").forEach(s => {
      //var clefBBox = s.querySelector(".clef").getBoundingClientRect()
      var rootBBox = this.rootSVG.getBoundingClientRect();
      var refStaffCoords = this.getStaffManipulatorCoords(s);
      var refStaffX = refStaffCoords.x;
      var refStaffYTop = refStaffCoords.yTop;
      var refStaffYBottom = refStaffCoords.yBottom;
      var refStaffWidth = refStaffCoords.width;
      var refStaffHeight = refStaffCoords.height;
      var posX = refStaffX - rootBBox.x; //-  staffBBox.x
      var topY = refStaffYTop - rootBBox.height * 0.01 - rootBBox.y; //- staffBBox.y
      var containerSize = refStaffWidth * 0.1;
      this.drawButton(null, "addStaff above", "+", posX, topY, containerSize, this.rootSVG, s.id);
      if (parseInt(s.getAttribute("n")) > 1) {
        posX = refStaffX + rootBBox.height * 0.01 - rootBBox.x;
        this.drawButton(null, "removeStaff above", "-", posX, topY, containerSize, this.rootSVG, s.id);
      }
      posX = refStaffX - rootBBox.x; //- staffBBox.x
      var bottomY = refStaffYBottom + 2 - rootBBox.y; //- staffBBox.y
      var containerSize = refStaffHeight * 0.1;
      this.drawButton(null, "addStaff below", "+", posX, bottomY, containerSize, this.rootSVG, s.id);
      var staffCount = s.parentElement.querySelectorAll(".staff");
      if (parseInt(s.getAttribute("n")) !== staffCount.length) {
        posX = refStaffX + rootBBox.height * 0.01 - rootBBox.x;
        this.drawButton(null, "removeStaff below", "-", posX, bottomY, containerSize, this.rootSVG, s.id);
      }
    });
  }
  /**
   * Get Coords for staf manipulators, since some browsers (Firefox) have problems with bounding boxes
   * @param referenceStaff Staff beside which the staff manipulator should be placed
   * @returns
   */
  getStaffManipulatorCoords(referenceStaff) {
    var x;
    var yTop;
    var yBottom;
    var bbox;
    var width;
    var height;
    if (navigator.userAgent.toLowerCase().indexOf("firefox") != -1) {
      bbox = referenceStaff.querySelector(".staffLine").getBoundingClientRect();
      x = bbox.left;
      yTop = bbox.top;
      yBottom = Array.from(referenceStaff.querySelectorAll(".staffLine")).reverse()[0].getBoundingClientRect().bottom;
    } else {
      bbox = referenceStaff.querySelector(".clef").getBoundingClientRect();
      x = bbox.left;
      yTop = bbox.top;
      yBottom = bbox.bottom;
    }
    height = referenceStaff.querySelector(".clef").getBoundingClientRect().height;
    width = referenceStaff.querySelector(".clef").getBoundingClientRect().width;
    return {
      x: x,
      yTop: yTop,
      yBottom: yBottom,
      width: width,
      height: height
    };
  }
  setMEI(mei) {
    this.mei = mei;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.container = document.getElementById(id);
    this.interactionOverlay = cq.getInteractOverlay(this.containerId);
    this.rootSVG = cq.getRootSVG(this.containerId);
    return this;
  }
}
exports["default"] = ScoreManipulator;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/Tabbar.js":
/*!********************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/Tabbar.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const dc = __webpack_require__(/*! ../utils/DOMCreator */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/DOMCreator.js");
const bootstrap_1 = __webpack_require__(/*! bootstrap */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/bootstrap/dist/js/bootstrap.esm.js");
//import Toggle from  "bootstrap5-toggle"
const interactjs_1 = __webpack_require__(/*! interactjs */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/interactjs/dist/interact.min.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const buttonStyleDarkOutline = "btn btn-outline-dark btn-sm";
const buttonStyleDark = "btn btn-dark btn-md";
const smuflFont = "smufl";
const alterBtn = "alterBtn";
const selectedFlag = "selected";
const tabFlag = "tabBtn";
class Tabbar {
  //private task: Evaluation
  constructor(options = null, containerId) {
    this.createAnnotListFunction = function (e) {
      var t = e.target;
      if (t.closest(".vse-container").id !== this.containerId) return;
      this.createAnnotList(e);
    }.bind(this);
    this.closeHandlerMouse = function closeHandlerMouse(e) {
      e.preventDefault();
      Array.from(cq.getContainer(this.containerId).querySelectorAll(".dropdown-toggle")).forEach(dd => {
        //this.closeDropdown(dd)
      });
    }.bind(this);
    // Macht momentan nix
    this.closeHandlerKey = function closeHandlerMouse(e) {
      if (!cq.hasActiveElement(this.containerId)) return;
      if (e.key === "Escape") {
        //e.preventDefault()
        Array.from(cq.getContainer(this.containerId).querySelectorAll(".dropdown-toggle")).forEach(dd => {
          //this.closeDropdown(dd)
        });
      }
    }.bind(this);
    /**
     * MAke Buttons in Toolbar selectable exclusively
     */
    this.exclusiveSelectHandler = function exclusiveSelectHandler(e) {
      this.exclusiveSelect(e);
    }.bind(this);
    this.styleCache = new Map();
    this.sidebarHandler = function sidebarHandler(e) {
      var _a, _b;
      //toggle
      var that = this;
      var elParent;
      if (this.sidebar.classList.contains("closedSidebar")) {
        Array.from(cq.getContainer(this.containerId).querySelectorAll(".closedSidebar")).forEach(el => {
          elParent = el.parentElement;
          el.classList.remove("closedSidebar");
          el.classList.add("openSidebar");
        });
        if (that.styleCache.size > 0) {
          for (const [key, value] of that.styleCache.entries()) {
            (_b = (_a = document.getElementById(that.containerId)) === null || _a === void 0 ? void 0 : _a.querySelector("#" + key)) === null || _b === void 0 ? void 0 : _b.setAttribute("style", value);
          }
        }
        that.styleCache = new Map();
      } else {
        //document.getElementById("sidebarContainer").style.width = "0"
        Array.from(cq.getContainer(this.containerId).querySelectorAll(".openSidebar")).forEach(el => {
          elParent = el.parentElement;
          elParent.querySelectorAll(":scope > div").forEach(d => {
            that.styleCache.set(d.id, d.getAttribute("style"));
            d.removeAttribute("style");
          });
          el.classList.add("closedSidebar");
          el.classList.remove("openSidebar");
        });
      }
    }.bind(this);
    /**
     * Creates second toolbar depending on selected option
     */
    this.customToolbarHandler = function customToolbarHandler(e) {
      var target = e.target;
      var tID = target.id;
      this.removeAllCustomGroups();
      switch (tID) {
        case "notationTabBtn":
        case "clickInsert":
          this.clickInsertHandler();
          break;
        case "keyMode":
          this.keyModeHandler();
          break;
        case "annotationTabBtn":
        case "activateAnnot":
          this.annotHandler();
          break;
        case "activateHarm":
          this.harmHandler();
          break;
      }
      if (target.textContent === cq.getContainer(this.containerId).querySelector("#insertMode").textContent) {
        this.removeAllCustomGroups();
      }
    }.bind(this);
    this.containerId = containerId;
    if (options !== null) {
      this.options = options;
    }
  }
  createToolbars() {
    this.sideBarGroup = cq.getContainer(this.containerId).querySelector("#sideBarGroup");
    var toggleBtn = dc.makeNewButton("", "toggleSidebar", buttonStyleDarkOutline + " closedSidebar");
    this.sideBarGroup.append(toggleBtn);
    this.createSideBar();
    this.createMainToolbar();
    this.createCustomToolbar();
    this.addElementsToBootstrap();
    this.setListeners();
  }
  createSideBar() {
    this.createModList();
    cq.getContainer(this.containerId).querySelectorAll("#sidebarList a, #timeDiv, #tempoDiv").forEach(sa => {
      sa.setAttribute("draggable", "true");
    });
    this.createAnnotList();
    this.optionalButtons();
  }
  createModList() {
    this.sidebar = cq.getContainer(this.containerId).querySelector("#sidebarContainer");
    var accordeon = dc.makeNewDiv("sidebarList", "accordion");
    this.sidebar.appendChild(accordeon);
    //Keysignatures
    accordeon.appendChild(this.createKeySigAccItem());
    //Music Key
    accordeon.appendChild(this.createClefAccItem());
    //Time Signature
    accordeon.appendChild(this.createTimeSigAccItem());
    //Tempo
    //accordeon.appendChild(this.createTempoAccItem())
  }

  createKeySigAccItem() {
    var keySelectItem = dc.makeNewAccordionItem("sidebarList", "selectKey", "selectKeyHeader", "selectKeyBtn", "Key", buttonStyleDark, "selectKeyDiv");
    var keyListCMajRow = dc.makeNewDiv("keyListCDIV", "row");
    var keyListCMaj = dc.makeNewDiv("keyListC", "list-group flex-fill col");
    keySelectItem.querySelector("#selectKeyDiv").appendChild(keyListCMajRow);
    keyListCMajRow.appendChild(keyListCMaj);
    keyListCMaj.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;=&#xE014;=&#xE014;=&#xE014;=&#xE014;=&#xE014;", "KeyCMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    var keyListSignedRow = dc.makeNewDiv("keyListCrossDIV", "col row g-0");
    var keyListCross = dc.makeNewDiv("keyListCross", "list-group flex-fill col");
    keySelectItem.querySelector("#selectKeyDiv").appendChild(keyListSignedRow);
    keyListSignedRow.appendChild(keyListCross);
    keyListCross.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;&#xEB93;&#xE262;=&#xE014;=&#xE014;=&#xE014;=&#xE014;=&#xE014;", "KeyGMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListCross.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;&#xEB93;&#xE262;=&#xE014;&#xEB90;&#xE262;=&#xE014;=&#xE014;=&#xE014;=&#xE014;", "KeyDMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListCross.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;&#xEB93;&#xE262;=&#xE014;&#xEB90;&#xE262;=&#xE014;&#xEB94;&#xE262;=&#xE014;=&#xE014;=&#xE014;", "KeyAMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListCross.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;&#xEB93;&#xE262;=&#xE014;&#xEB90;&#xE262;=&#xE014;&#xEB94;&#xE262;=&#xE014;&#xEB91;&#xE262;=&#xE014;=&#xE014;", "KeyEMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListCross.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;&#xEB93;&#xE262;=&#xE014;&#xEB90;&#xE262;=&#xE014;&#xEB94;&#xE262;=&#xE014;&#xEB91;&#xE262;=&#xE014;&#xEB98;&#xE262;=&#xE014;", "KeyBMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListCross.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE014;&#xEB93;&#xE262;=&#xE014;&#xEB90;&#xE262;=&#xE014;&#xEB94;&#xE262;=&#xE014;&#xEB91;&#xE262;=&#xE014;&#xEB98;&#xE262;=&#xE014;&#xEB92;&#xE262;", "KeyF#Maj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    var keyListB = dc.makeNewDiv("keyListB", "list-group flex-fill col");
    keyListSignedRow.appendChild(keyListB);
    keyListB.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE01A;&#xE260;=&#xE014;=&#xE014;=&#xE014;=&#xE014;=&#xE014;", "KeyFMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListB.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE01A;&#xE260;=&#xE014;&#xEB92;&#xE260;=&#xE014;=&#xE014;=&#xE014;=&#xE014;", "KeyBbMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListB.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE01A;&#xE260;=&#xE014;&#xEB92;&#xE260;=&#xE014;&#xEB98;&#xE260;=&#xE014;=&#xE014;=&#xE014;", "KeyEbMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListB.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE01A;&#xE260;=&#xE014;&#xEB92;&#xE260;=&#xE014;&#xEB98;&#xE260;=&#xE014;&#xEB91;&#xE260;=&#xE014;=&#xE014;", "KeyAbMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListB.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE01A;&#xE260;=&#xE014;&#xEB92;&#xE260;=&#xE014;&#xEB98;&#xE260;=&#xE014;&#xEB91;&#xE260;=&#xE014;&#xEB99;&#xE260;=&#xE014;", "KeyDbMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    keyListB.appendChild(dc.makeNewAElement("=&#xE01A;&#xE050;&#xE01A;&#xE260;=&#xE014;&#xEB92;&#xE260;=&#xE014;&#xEB98;&#xE260;=&#xE014;&#xEB91;&#xE260;=&#xE014;&#xEB99;&#xE260;=&#xE014;&#xEB90;&#xE260;", "KeyGbMaj", "list-group-item list-group-item-action " + smuflFont, "#", true));
    return keySelectItem;
  }
  createClefAccItem() {
    //Music Key
    var clefSelectItem = dc.makeNewAccordionItem("sidebarList", "selectClef", "selectClefHeader", "selectClefBtn", "Clef", buttonStyleDark, "selectClefDiv");
    var clefList = dc.makeNewDiv("clefList", "list-group flex-fill");
    clefSelectItem.querySelector("#selectClefDiv").appendChild(clefList);
    clefList.appendChild(dc.makeNewAElement("&#xE050", "GClef", "list-group-item list-group-item-action " + smuflFont, "#", true));
    clefList.appendChild(dc.makeNewAElement("&#xE05C", "CClef", "list-group-item list-group-item-action " + smuflFont, "#", true));
    clefList.appendChild(dc.makeNewAElement("&#xE062", "FClef", "list-group-item list-group-item-action " + smuflFont, "#", true));
    return clefSelectItem;
  }
  createTimeSigAccItem() {
    //Time Signature
    var timeSelectItem = dc.makeNewAccordionItem("sidebarList", "selectTime", "selectTimeHeader", "selectTimeBtn", "Time", buttonStyleDark, "selectTimeDiv");
    var timeDiv = dc.makeNewDiv("timeDiv", "row align-items-start");
    var countDiv = dc.makeNewDiv("countDiv", "col");
    var tcdatalistname = "timeCountDatalist";
    var timeCount = dc.makeNewInput("timeCount", "text", "", null, tcdatalistname);
    //create list for time code select
    var tcOptionValues = new Array();
    for (var i = 0; i < 16; i++) {
      tcOptionValues.push((i + 1).toString());
    }
    var tcDatalist = dc.makeNewSelect("timeCount", tcOptionValues);
    //countDiv.appendChild(timeCount)
    countDiv.appendChild(tcDatalist);
    var slashDiv = dc.makeNewDiv("slash", "col");
    slashDiv.textContent = "/";
    var unitDiv = dc.makeNewDiv("unitDiv", "col");
    var tudatalistname = "timeUnitDatalist";
    var timeUnit = dc.makeNewInput("timeUnit", "text", "", null, tudatalistname);
    //create list for time units select
    var tuOptionValues = new Array();
    for (var i = 0; i <= 16; i++) {
      if (Number.isInteger(Math.log2(i))) {
        tuOptionValues.push(i.toString());
      }
    }
    var tuDataList = dc.makeNewSelect("timeUnit", tuOptionValues);
    unitDiv.appendChild(tuDataList);
    timeSelectItem.querySelector("#selectTimeDiv").appendChild(timeDiv);
    timeDiv.appendChild(countDiv);
    timeDiv.appendChild(slashDiv);
    timeDiv.appendChild(unitDiv);
    return timeSelectItem;
  }
  createTempoAccItem() {
    var tempoItem = dc.makeNewAccordionItem("sidebarList", "selectTempo", "selectTempoHeader", "selectTempoBtn", "Tempo", buttonStyleDark, "selectTempoDiv");
    var tempoDiv = dc.makeNewDiv("tempoDiv", "row align-items-start");
    var tempoRefDurDiv = dc.makeNewDiv("tempoRefDurDif", "col");
    var tcdatalistname = "timeCountDatalist";
    var timeCount = dc.makeNewInput("timeCount", "text", "", null, tcdatalistname);
    //create list for time code select
    var tcOptionValues = new Array();
    for (var i = 0; i <= 16; i++) {
      if (Number.isInteger(Math.log2(i))) {
        tcOptionValues.push(i.toString());
        tcOptionValues.push(i.toString() + ".");
      }
    }
    var tcDatalist = dc.makeNewSelect("timeCount", tcOptionValues);
    tempoRefDurDiv.appendChild(tcDatalist);
    var equal = dc.makeNewDiv("equal", "col");
    equal.textContent = "=";
    var unitDiv = dc.makeNewDiv("unitDiv", "col");
    var timeUnit = dc.makeNewInput("timeUnit", "text", "", null);
    unitDiv.appendChild(timeUnit);
    tempoItem.querySelector("#selectTempoDiv").appendChild(tempoDiv);
    tempoDiv.appendChild(tempoRefDurDiv);
    tempoDiv.appendChild(equal);
    tempoDiv.appendChild(unitDiv);
    return tempoItem;
  }
  optionalButtons() {
    if (typeof this.sidebar === "undefined") {
      return;
    }
  }
  createAnnotList() {
    var _a, _b;
    (_a = cq.getContainer(this.containerId).querySelector("#annotList")) === null || _a === void 0 ? void 0 : _a.remove();
    var annotList = document.createElement("div");
    annotList.setAttribute("id", "annotList");
    annotList.classList.add("list-group");
    var that = this;
    (_b = cq.getContainer(this.containerId).querySelectorAll("#annotationCanvas > g")) === null || _b === void 0 ? void 0 : _b.forEach(c => {
      var text = c.querySelector(".annotDiv").textContent || c.querySelector(".annotDiv").getAttribute("data-text");
      var a = dc.makeNewAElement(text, "", "list-group-item list-group-item-action list-group-item-primary", "#");
      a.setAttribute("refId", c.id);
      a.setAttribute("contenteditable", "true");
      a.addEventListener("click", function () {
        var _a;
        Array.from(cq.getContainer(that.containerId).querySelectorAll(".selected")).forEach(s => s.classList.remove(selectedFlag));
        cq.getContainer(that.containerId).querySelector("#" + c.id).focus();
        (_a = cq.getContainer(that.containerId).querySelector("#" + c.id).querySelector(".annotLinkedText, .annotStaticText")) === null || _a === void 0 ? void 0 : _a.classList.add(selectedFlag);
      });
      a.addEventListener("blur", function (e) {
        var t = e.target;
        cq.getContainer(that.containerId).querySelector("#" + t.getAttribute("refid")).querySelector(".annotDiv").textContent = t.textContent;
      });
      a.addEventListener("keydown", function (e) {
        var t = e.target;
        if (e.code === "Enter") {
          t.blur();
        } else if (e.code === "Space") {
          e.preventDefault();
          document.execCommand("insertText", false, ' ');
        }
      });
      annotList.appendChild(a);
    });
    this.sidebar.appendChild(annotList);
  }
  createButtons() {
    var that = this;
    // Buttons können in eigenes package ausgelagert werden (Editor)
    // and now the tabs
    this.notationTab = cq.getContainer(this.containerId).querySelector("#notationTabGroup");
    this.notationTab.append(dc.makeNewButton("Notation", "notationTabBtn", buttonStyleDarkOutline + " " + tabFlag));
    this.annotationTab = cq.getContainer(this.containerId).querySelector("#annotationTabGroup");
    this.annotationTab.append(dc.makeNewButton("Annotation", "annotationTabBtn", buttonStyleDarkOutline + " " + tabFlag));
    this.articulationTab = cq.getContainer(this.containerId).querySelector("#articulationTabGroup");
    this.articulationTab.append(dc.makeNewButton("Articulation", "articulationTabBtn", buttonStyleDarkOutline + " " + tabFlag));
    this.melismaTab = cq.getContainer(this.containerId).querySelector("#melismaTabGroup");
    //this.melismaTab.append(dc.makeNewButton("Melisma", "melismaTabBtn", buttonStyleDarkOutline + " " + tabFlag))
    var handlerDropdown = dc.makeNewDiv("insertDropdown", "dropdown-menu");
    handlerDropdown.append(dc.makeNewAElement("Mouse Input", "clickInsert", "dropdown-item", "#"));
    handlerDropdown.append(dc.makeNewAElement("Keyboard Input", "keyMode", "dropdown-item", "#"));
    //handlerDropdown.append(dc.makeNewAElement("Select Mode", "activateSelect", "dropdown-item", "#"))
    handlerDropdown.append(dc.makeNewAElement("Annotations", "activateAnnot", "dropdown-item", "#"));
    //handlerDropdown.append(dc.makeNewAElement("Harmony Mode", "activateHarm", "dropdown-item", "#"))
    this.handlerGroup = cq.getContainer(this.containerId).querySelector("#handlerGroup");
    this.handlerGroup.append(dc.makeNewButton("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", "insertMode", buttonStyleDarkOutline + " empty", "dropdown"));
    this.handlerGroup.append(handlerDropdown);
    this.noteButtonGroup = cq.getContainer(this.containerId).querySelector("#noteGroup");
    this.noteButtonGroup.append(dc.makeNewButton("&#x1D15D", "fullNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.noteButtonGroup.append(dc.makeNewButton("&#x1D15E", "halfNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.noteButtonGroup.append(dc.makeNewButton("&#x1D15F", "quarterNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.noteButtonGroup.append(dc.makeNewButton("&#x1D160", "eigthNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.noteButtonGroup.append(dc.makeNewButton("&#x1D161", "sixteenthNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.noteButtonGroup.append(dc.makeNewButton("&#x1D162", "thirtysecondNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.dotButtonGroup = cq.getContainer(this.containerId).querySelector("#dotGroup");
    this.dotButtonGroup.append(dc.makeNewButton(".", "oneDot", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.dotButtonGroup.append(dc.makeNewButton(". .", "twoDot", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.modButtonGroup = cq.getContainer(this.containerId).querySelector("#modGroup");
    this.modButtonGroup.appendChild(dc.makeNewButton("&#x1D13D;&#x1D13E;", "pauseNote", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#8256", "tieNotes", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#9835;", "organizeBeams", buttonStyleDarkOutline + " " + smuflFont, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#x266D;", "alterDown", buttonStyleDarkOutline + " " + smuflFont + " " + alterBtn, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#x266F;", "alterUp", buttonStyleDarkOutline + " " + smuflFont + " " + alterBtn, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#x266E;", "alterNeutral", buttonStyleDarkOutline + " " + smuflFont + " " + alterBtn, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#x1D12B", "alterDDown", buttonStyleDarkOutline + " " + smuflFont + " " + alterBtn, "", true));
    this.modButtonGroup.appendChild(dc.makeNewButton("&#x1D12A", "alterDUp", buttonStyleDarkOutline + " " + smuflFont + " " + alterBtn, "", true));
    this.modButtonGroup.addEventListener("click", this.exclusiveSelectHandler);
    this.soundGroup = cq.getContainer(this.containerId).querySelector("#soundGroup");
    this.soundGroup.appendChild(dc.makeNewButton("", "playBtn", buttonStyleDarkOutline));
    //this.soundGroup.appendChild(dc.makeNewButton("", "pauseBtn", buttonStyleDarkOutline))
    this.soundGroup.appendChild(dc.makeNewButton("", "rewindBtn", buttonStyleDarkOutline));
    this.zoomGroup = cq.getContainer(this.containerId).querySelector("#zoomGroup");
    this.zoomGroup.append(dc.makeNewButton("", "zoomOutBtn", buttonStyleDarkOutline));
    this.zoomGroup.append(dc.makeNewButton("", "zoomInBtn", buttonStyleDarkOutline));
    this.fileSelectGroup = cq.getContainer(this.containerId).querySelector("#fileSelectGroup");
    this.fileSelectGroup.append(dc.makeNewInput("importFile", "file", ""));
    this.fileSelectGroup.append(dc.makeNewButton("Import File", "importFileBtn", buttonStyleDarkOutline));
    this.fileSelectGroup.append(dc.makeNewButton("Export MEI", "exportFileBtn", buttonStyleDarkOutline));
    var showBBToggle = dc.makeNewToggle("showBB", buttonStyleDark, "BBoxes", "showBBDiv");
    this.setToggleLogic(showBBToggle, function () {
      cq.getContainer(that.containerId).classList.add("debug");
    }, function () {
      cq.getContainer(that.containerId).classList.remove("debug");
    });
    this.fileSelectGroup.append(showBBToggle);
  }
  /**
   *
   * @param el element to set logic for
   * @param callBackChecked additional code to execute when toggle is checked
   * @param callBackUnchecked additional code to execute when toggle is unchecked
   * @param switchPair pair of words to change between when toggled
   */
  setToggleLogic(el, callbackChecked = null, callbackUnchecked = null, switchPair = new Array()) {
    if (switchPair.length > 2 || switchPair.length === 1) {
      throw new Error("switchPair Array must have exaclty 2 strings");
    }
    el.addEventListener("click", function (e) {
      e.preventDefault();
      var target = e.target;
      if (target.tagName.toLowerCase() !== "label") return;
      var label = e.target;
      var input = label.previousElementSibling;
      if (input.checked === true) {
        if (switchPair.length > 0) label.textContent = switchPair[0];
        input.checked = false;
        callbackUnchecked();
      } else {
        if (switchPair.length > 0) label.textContent = switchPair[1];
        input.checked = true;
        callbackChecked();
      }
    });
  }
  createInsertSelect() {
    //InsertSelect DropdownMenu
    this.insertSelectGroup = dc.makeNewDiv("insertGroup", "customGroup btn-group-sm me-2 h-100", {
      role: "group"
    });
    var toggle = dc.makeNewToggle("insertToggle", buttonStyleDarkOutline, "Replace", "insertToggleDiv");
    toggle.addEventListener("click", function (e) {
      e.preventDefault();
      var target = e.target;
      if (target.tagName.toLowerCase() !== "label") return;
      var label = e.target;
      var input = label.previousElementSibling;
      if (label.textContent === "Replace") {
        label.textContent = "Insert";
        input.checked = false;
      } else {
        label.textContent = "Replace";
        input.checked = true;
      }
    });
    this.insertSelectGroup.append(toggle);
  }
  createButtonsAnnotationMode() {
    this.annotGroupKM = dc.makeNewDiv("annotGroupKM", "customGroup btn-group-sm me-2 h-100", {
      role: "group"
    });
    this.annotGroupKM.append(dc.makeNewButton("Text", "staticTextButton", buttonStyleDarkOutline));
    this.annotGroupKM.append(dc.makeNewButton("Linked Text", "linkedAnnotButton", buttonStyleDarkOutline + " selected"));
    this.annotGroupKM.append(dc.makeNewButton("Harmony", "harmonyAnnotButton", buttonStyleDarkOutline));
    this.annotGroupKM.addEventListener("click", this.exclusiveSelectHandler);
  }
  createMainToolbar() {
    this.createButtons();
    var btnToolbar = cq.getContainer(this.containerId).querySelector("#btnToolbar");
    btnToolbar.appendChild(this.sideBarGroup);
    btnToolbar.parentElement.insertBefore(this.sidebar, btnToolbar.parentElement.firstChild); // important for ~ selector
    btnToolbar.appendChild(this.handlerGroup); // invisible
    //tabs
    btnToolbar.appendChild(this.notationTab);
    btnToolbar.appendChild(this.annotationTab);
    btnToolbar.appendChild(this.articulationTab);
    //btnToolbar.appendChild(this.melismaTab)
    //further utils
    btnToolbar.appendChild(this.soundGroup);
    btnToolbar.appendChild(this.zoomGroup);
    btnToolbar.appendChild(this.fileSelectGroup);
  }
  createCustomToolbar() {
    this.customToolbar = cq.getContainer(this.containerId).querySelector("#customToolbar");
    this.createInsertSelect();
    this.createButtonsAnnotationMode();
  }
  removeAllCustomGroups() {
    Array.from(this.customToolbar.children).forEach(c => {
      c.remove();
    });
  }
  addElementsToBootstrap() {
    //attach bootstrap functionality to Elements
    Array.from(cq.getContainer(this.containerId).querySelectorAll(".dropdown-toggle")).forEach(dd => {
      new bootstrap_1.Dropdown(dd);
    });
    Array.from(cq.getContainer(this.containerId).querySelectorAll(".collapsed")).forEach(c => {
      new bootstrap_1.Collapse(c);
    });
  }
  setListeners() {
    cq.getContainer(this.containerId).querySelectorAll("#handlerGroup *").forEach(el => {
      el.addEventListener("click", this.closeHandlerMouse);
    });
    // achtung: nie preventDefault in einem Document anwenden
    document.addEventListener("keydown", this.closeHandlerKey);
    //document.getElementsByClassName("vse-container")[0]?.addEventListener("click", this.closeHandlerMouse)
    cq.getContainer(this.containerId).querySelectorAll("#dotGroup button, #noteGroup button, #modGroup button").forEach(el => {
      el.addEventListener("click", this.exclusiveSelectHandler);
    });
    cq.getContainer(this.containerId).querySelector("#toggleSidebar").addEventListener("click", this.sidebarHandler);
    cq.getContainer(this.containerId).querySelectorAll(["#insertDropdown a", "." + tabFlag].join(",")).forEach(a => {
      a.addEventListener("click", this.customToolbarHandler);
    });
    // Why do I have to control this manually???
    cq.getContainer(this.containerId).querySelectorAll(".accordion-button").forEach(ac => {
      ac.addEventListener("hidden.bs.collapse", () => {
        ac.classList.add("show");
      });
      ac.addEventListener("hide.bs.collapse", () => {
        ac.classList.add("show");
      });
    });
    cq.getContainer(this.containerId).addEventListener("annotChanged", this.createAnnotListFunction, true);
    //FileSelection
    cq.getContainer(this.containerId).querySelector("#importFileBtn").addEventListener("click", function () {
      var impF = this.parentElement.querySelector("#importFile");
      impF.setAttribute("accept", [".musicxml", ".mei"].join(", "));
      impF.click();
    });
    var that = this;
    cq.getContainer(this.containerId).querySelector("#importFile").addEventListener("change", function (e) {
      var fr = new FileReader();
      fr.onload = function () {
        that.importCallback("", fr.result, false, constants_1.constants._TARGETDIVID_);
      };
      fr.readAsText(this.files[0]);
    }, false);
    cq.getContainer(this.containerId).querySelector("#exportFileBtn").addEventListener("click", function () {
      that.getMEICallback("").then(mei => {
        var d = new Date();
        var fileName = d.getUTCFullYear() + ("0" + d.getDate()).slice(-2) + ("0" + d.getMonth()).slice(-2) + "_" + ("0" + d.getHours()).slice(-2) + ("0" + d.getMinutes()).slice(-2) + ("0" + d.getSeconds()).slice(-2) + "_" + "vseScore_" + that.containerId + ".mei";
        that.download(fileName, mei);
      });
    });
  }
  download(file, text) {
    //creating an invisible element
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8, ' + encodeURIComponent(text));
    element.setAttribute('download', file);
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  }
  removeListeners() {
    cq.getContainer(this.containerId).querySelectorAll("#handlerGroup *").forEach(el => {
      el.removeEventListener("click", this.closeHandlerMouse);
    });
    document.removeEventListener("keydown", this.closeHandlerKey);
    cq.getContainer(this.containerId).querySelectorAll(".btn-group-sm button").forEach(el => {
      el.removeEventListener("click", this.exclusiveSelectHandler);
    });
    cq.getContainer(this.containerId).querySelector("#toggleSidebar").removeEventListener("click", this.sidebarHandler);
    cq.getContainer(this.containerId).querySelectorAll(["#insertDropdown a", "." + tabFlag].join(",")).forEach(a => {
      a.removeEventListener("click", this.customToolbarHandler);
    });
    cq.getContainer(this.containerId).removeEventListener("annotChanged", this.createAnnotListFunction);
    interactjs_1.default("#annotList").unset();
  }
  closeDropdown(ddButton) {
    if (ddButton.classList.contains("show")) {
      ddButton.classList.remove("show");
      ddButton.removeAttribute("data-popper-placement");
      ddButton.setAttribute("aria-expanded", "false");
      ddButton.nextElementSibling.classList.remove("show");
      ddButton.nextElementSibling.removeAttribute("data-popper-placement");
    }
  }
  resizeListListener(event) {
    event.stopImmediatePropagation();
    var target = event.target;
    var y = parseFloat(target.getAttribute('data-y')) || 0;
    target.style.height = event.rect.height + 'px';
    y += event.deltaRect.top;
    target.style.transform = 'translate(0px,' + y + 'px)';
    target.setAttribute('data-y', y.toString());
    var sibling = target.previousElementSibling;
    var sbb = sibling.getBoundingClientRect();
    sbb.height = sbb.height + y;
  }
  exclusiveSelect(e) {
    var select;
    var target = e.target;
    var tagname = "button";
    if (target.tagName.toLowerCase() === tagname) {
      Array.from(target.parentElement.children).forEach(btn => {
        if (btn.tagName.toLowerCase() === tagname && btn !== target) {
          btn.classList.remove(selectedFlag);
        }
      });
      if (!target.classList.contains(selectedFlag)) {
        target.classList.add(selectedFlag);
      } else if (["modGroup", "dotGroup", "chordGroupKM"].some(id => id === target.parentElement.id) && target.classList.contains(selectedFlag)) {
        target.classList.remove(selectedFlag);
      }
    }
  }
  clickInsertHandler() {
    this.customToolbar.appendChild(this.insertSelectGroup);
    this.customToolbar.appendChild(this.noteButtonGroup);
    this.customToolbar.appendChild(this.dotButtonGroup);
    this.customToolbar.appendChild(this.modButtonGroup);
  }
  keyModeHandler() {
    this.customToolbar.appendChild(this.insertSelectGroup);
    this.customToolbar.appendChild(this.chordGroupKM);
    this.customToolbar.appendChild(this.octaveGroupKM);
  }
  harmHandler() {
    this.removeAllCustomGroups();
  }
  annotHandler() {
    //this.removeAllCustomGroups()
    this.customToolbar.append(this.annotGroupKM);
  }
  /**
   * Callback from Core, so that imported mei or musicxml can be loaded in the editor
   * @param importCallback
   */
  setImportCallback(importCallback) {
    this.importCallback = importCallback;
  }
  setGetMEICallback(getMEICallback) {
    this.getMEICallback = getMEICallback;
  }
}
exports["default"] = Tabbar;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/TempoLabel.js":
/*!************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/TempoLabel.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
class TempoLabel {
  constructor(inputString, startid, mei) {
    this.startid = startid;
    this.currentMEI = mei;
    this.inputString = inputString;
    this.element = this.currentMEI.getElementById(startid);
    if (this.element.tagName === "note") {
      this.checkFormat(inputString);
      this.createElement(inputString);
    }
  }
  checkFormat(inputString) {
    this.tempoNumber = inputString.match(/\d+/).join("");
  }
  modifyLabel(inputString) {
    this.checkFormat(inputString);
    this.inputString = inputString;
    if (this.tempoNumber !== null && this.tempoNumber !== "") {
      this.element.setAttribute("mm", this.tempoNumber);
      var bpm = parseInt(this.tempoNumber) * parseInt(this.element.getAttribute("mm.unit"));
      this.element.setAttribute("midi.bpm", bpm.toString());
      // assume TEXT_NODE after rend element
      this.element.querySelector("rend").nextSibling.textContent = " = " + this.tempoNumber;
    }
  }
  createElement(inputString) {
    if (typeof this.element === "undefined") {
      this.element = this.currentMEI.createElement("tempo");
      this.element.setAttribute("id", random_1.uuidv4());
    }
    Array.from(this.element.children).forEach(c => {
      c.remove();
    });
    this.setStartId(this.startid);
  }
  ///////// HARMONY HANDLER STUFF ////////////////
  /**
   * Has to be set by HarmonyHandler
   * @param el
   */
  setStartId(startId) {
    this.element.setAttribute("startid", startId);
    return this;
  }
  ////////////// GETTER/ SETTERT ////////////
  getElement() {
    return this.element;
  }
  getInput() {
    return this.inputString;
  }
  setCurrentMEI(mei) {
    this.currentMEI = mei;
    return this;
  }
}
exports["default"] = TempoLabel;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/AnnotationChangeHandler.js":
/*!******************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/AnnotationChangeHandler.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const interactjs_1 = __webpack_require__(/*! interactjs */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/interactjs/dist/interact.min.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
class AnnotationChangeHandler {
  constructor(containerId) {
    // change to function after implementation
    this.selectHandler = function selectHandler(e) {
      var target = e.target;
      if (target.tagName === "rect") {
        var bbox = target.getBoundingClientRect();
        this.attachCornerCircle(target, bbox.x, bbox.y);
      }
      //TODO: Circles etc
    }.bind(this);
    this.setContainerId(containerId);
    //this.update()
    this.annotResizedEvent = new Event("annotResized");
    this.dragAnnotStartEvent = new Event("dragAnnotStart");
    this.dragAnnotEndEvent = new Event("dragAnnotEnd");
    this.isInteracting = false;
  }
  setListeners() {
    //if(document.getElementById(this.containerId).querySelector(".sidebar.openSidebar") != null) return
    var that = this;
    this.shapeListener = interactjs_1.default("#" + this.containerId + " #interactionOverlay .customAnnotShape").resizable({
      // resize from all edges and corners
      edges: {
        left: true,
        right: true,
        bottom: true,
        top: true
      },
      listeners: {
        move: this.resizeShapeListener.bind(this),
        end(event) {
          that.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
          that.deleteTempDistances();
          that.interactTarget.dispatchEvent(that.annotResizedEvent);
          that.isInteracting = false;
        }
      }
    }).draggable({
      listeners: {
        move: this.dragShapeListener.bind(this),
        end(event) {
          that.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
          that.deleteTempDistances();
          that.interactTarget.dispatchEvent(that.dragAnnotEndEvent);
          that.isInteracting = false;
        }
      },
      modifiers: [interactjs_1.default.modifiers.restrictRect({
        restriction: 'parent',
        endOnly: true
      })]
    });
    this.textListener = interactjs_1.default("#" + this.containerId + " #interactionOverlay .annotLinkedText, #" + this.containerId + " #interactionOverlay .annotStaticText").resizable({
      // resize from all edges and corners
      edges: {
        left: true,
        right: true,
        bottom: true,
        top: true
      },
      listeners: {
        move: this.resizeTextListener.bind(this),
        end(event) {
          that.deleteTempDistances();
          that.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
          that.interactTarget.dispatchEvent(that.annotResizedEvent);
          that.isInteracting = false;
        }
      }
    }).draggable({
      listeners: {
        move: this.dragTextListener.bind(this),
        end(event) {
          that.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
          that.deleteTempDistances();
          that.interactTarget.dispatchEvent(that.dragAnnotEndEvent);
          that.isInteracting = false;
        }
      },
      modifiers: [interactjs_1.default.modifiers.restrictRect({
        restriction: 'parent',
        endOnly: true
      })]
    });
    this.lineListener = interactjs_1.default("#" + this.containerId + " #interactionOverlay .lineDragRect.x1").draggable({
      listeners: {
        move: this.dragLineListener.bind(this),
        end(event) {
          that.snapToObj();
          that.interactionOverlay.dispatchEvent(new Event("annotationCanvasChanged"));
          that.deleteTempDistances();
          that.interactTarget.dispatchEvent(that.dragAnnotEndEvent);
          that.isInteracting = false;
        }
      },
      modifiers: [interactjs_1.default.modifiers.restrictRect({
        restriction: 'parent',
        endOnly: true
      })]
    });
  }
  removeListeners() {
    var _a, _b, _c;
    //interact(".customAnnotShape, .annotLinkedText, .lineDragRect").unset()
    (_a = this.shapeListener) === null || _a === void 0 ? void 0 : _a.unset();
    (_b = this.lineListener) === null || _b === void 0 ? void 0 : _b.unset();
    (_c = this.textListener) === null || _c === void 0 ? void 0 : _c.unset();
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  // SHAPES
  dragShapeListener(event) {
    var target = event.target;
    this.interactTarget = target;
    if (!this.isInteracting) {
      this.interactTarget.dispatchEvent(this.dragAnnotStartEvent);
    }
    this.isInteracting = true;
    //var pt = coordinates.transformToDOMMatrixCoordinates(event.clientX, event.clientY, this.interactionOverlay) //new DOMPoint(event.clientX, event.clientY)
    var pt = coordinates.transformToDOMMatrixCoordinates(event.clientX, event.clientY, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(event.clientX, event.clientY)
    var edx = pt.x; //pt.matrixTransform(this.canvasMatrix).x
    var edy = pt.y; //pt.matrixTransform(this.canvasMatrix).y
    //var ptDist = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y, this.interactionOverlay)//   new DOMPoint(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y)
    var ptDist = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
    var distX = parseFloat(target.getAttribute('distX')) || edx - ptDist.x; //ptDist.matrixTransform(this.canvasMatrix).x 
    var distY = parseFloat(target.getAttribute('distY')) || edy - ptDist.y; //ptDist.matrixTransform(this.canvasMatrix).y 
    target.setAttribute("distX", distX.toString());
    target.setAttribute("distY", distY.toString());
    target.setAttribute("x", (edx - distX).toString());
    target.setAttribute("y", (edy - distY).toString());
    var targetParent = target.parentElement;
    var line = targetParent.querySelector(":scope > .annotLine");
    //pt = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y, this.interactionOverlay) //new DOMPoint(target.getBoundingClientRect().x, target.getBoundingClientRect().y)
    pt = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
    var rectX = pt.x.toString(); //pt.matrixTransform(this.canvasMatrix).x.toString() 
    var rectY = pt.y.toString(); //pt.matrixTransform(this.canvasMatrix).y.toString() 
    if (line !== null) {
      line.setAttribute("x1", rectX);
      line.setAttribute("y1", rectY);
    }
    var dragRects = targetParent === null || targetParent === void 0 ? void 0 : targetParent.querySelectorAll(".lineDragRect");
    if (dragRects.length > 0) {
      dragRects.forEach(dr => {
        if (dr.classList.contains("x1")) {
          dr.setAttribute("x", rectX);
          dr.setAttribute("y", rectY);
        }
      });
    }
  }
  resizeShapeListener(event) {
    var target = event.target;
    this.interactTarget = target;
    // update overal dimensions
    var pt = coordinates.getDOMMatrixCoordinates(event.rect, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
    target.style.width = pt.width + 'px';
    target.style.height = pt.height + 'px';
    // translate when resizing from top or left edges
    if (event.edges.top === true || event.edges.left === true) {
      var edgesPt = coordinates.transformToDOMMatrixCoordinates(event.clientX, event.clientY, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); // new DOMPoint(event.clientX, event.clientY)
      var edx = edgesPt.x; //pt.matrixTransform(this.canvasMatrix).x
      var edy = edgesPt.y; //pt.matrixTransform(this.canvasMatrix).y
      var ptDist = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y)
      var distX = parseFloat(target.getAttribute('distX')) || edx - ptDist.x; //ptDist.matrixTransform(this.canvasMatrix).x 
      var distY = parseFloat(target.getAttribute('distY')) || edy - ptDist.y; //ptDist.matrixTransform(this.canvasMatrix).y 
      target.setAttribute("distX", distX.toString());
      target.setAttribute("distY", distY.toString());
      if (event.edges.left === true) target.setAttribute("x", (edx - distX).toString());
      if (event.edges.top === true) target.setAttribute("y", (edy - distY).toString());
      //target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height)
    }
    //update attached line
    var targetParent = target.parentElement;
    var line = targetParent === null || targetParent === void 0 ? void 0 : targetParent.querySelector(".annotLine");
    var dragRects = targetParent === null || targetParent === void 0 ? void 0 : targetParent.querySelectorAll(".lineDragRect");
    var rectX = pt.x.toString(); //ptTL.matrixTransform(this.canvasMatrix).x.toString()
    var rectY = pt.y.toString(); //ptTL.matrixTransform(this.canvasMatrix).y.toString()
    if (line !== null) {
      line.setAttribute("x1", rectX);
      line.setAttribute("y1", rectY);
    }
    if (dragRects.length > 0) {
      dragRects.forEach(dr => {
        if (dr.classList.contains("x1")) {
          dr.setAttribute("x", rectX);
          dr.setAttribute("y", rectY);
        }
      });
    }
  }
  // TEXTBOXES
  resizeTextListener(event) {
    var target = event.target.querySelector(".annotFO");
    this.interactTarget = target;
    //this.canvasMatrix = (document.getElementById("annotationCanvas") as unknown as SVGGraphicsElement).getScreenCTM().inverse()
    // update overal dimensions
    var ptTL = coordinates.getDOMMatrixCoordinates(event.rect, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
    target.style.width = ptTL.width + 'px';
    target.style.height = ptTL.height + 'px';
    // translate when resizing from top or left edges
    if (event.edges.top === true || event.edges.left === true) {
      var pt = coordinates.transformToDOMMatrixCoordinates(event.clientX, event.clientY, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(event.clientX, event.clientY)
      var edx = pt.x; //.matrixTransform(this.canvasMatrix).x
      var edy = pt.y; //matrixTransform(this.canvasMatrix).y
      var ptDist = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y)
      var distX = parseFloat(target.getAttribute('distX')) || edx - ptDist.x; //matrixTransform(this.canvasMatrix).x 
      var distY = parseFloat(target.getAttribute('distY')) || edy - ptDist.y; //matrixTransform(this.canvasMatrix).y 
      target.setAttribute("distX", distX.toString());
      target.setAttribute("distY", distY.toString());
      if (event.edges.left === true) target.setAttribute("x", (edx - distX).toString());
      if (event.edges.top === true) target.setAttribute("y", (edy - distY).toString());
      //target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height)
    }
    //update attached line
    var targetParent = target.closest("g");
    var line = targetParent === null || targetParent === void 0 ? void 0 : targetParent.querySelector(".annotLine");
    var dragRects = targetParent === null || targetParent === void 0 ? void 0 : targetParent.querySelectorAll(".lineDragRect");
    var rectX = ptTL.x.toString(); //.matrixTransform(this.canvasMatrix).x.toString()
    var rectY = ptTL.y.toString(); //).matrixTransform(this.canvasMatrix).y.toString()
    if (line !== null) {
      line.setAttribute("x2", rectX);
      line.setAttribute("y2", rectY);
    }
    if (dragRects.length > 0) {
      dragRects.forEach(dr => {
        if (dr.classList.contains("x2")) {
          dr.setAttribute("x", rectX);
          dr.setAttribute("y", rectY);
        }
      });
    }
  }
  dragTextListener(event) {
    var target = event.target.querySelector(".annotFO");
    this.interactTarget = target;
    if (!this.isInteracting) {
      this.interactTarget.dispatchEvent(this.dragAnnotStartEvent);
    }
    this.isInteracting = true;
    //this.canvasMatrix = (document.getElementById("annotationCanvas") as unknown as SVGGraphicsElement).getScreenCTM().inverse()
    var pt = coordinates.transformToDOMMatrixCoordinates(event.clientX, event.clientY, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(event.clientX, event.clientY)
    var edx = pt.x; //matrixTransform(this.canvasMatrix).x
    var edy = pt.y; //matrixTransform(this.canvasMatrix).y
    var ptDist = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(target.getBoundingClientRect().x, event.target.getBoundingClientRect().y)
    var distX = parseFloat(target.getAttribute('distX')) || edx - ptDist.x; //matrixTransform(this.canvasMatrix).x 
    var distY = parseFloat(target.getAttribute('distY')) || edy - ptDist.y; //matrixTransform(this.canvasMatrix).y 
    target.setAttribute("distX", distX.toString());
    target.setAttribute("distY", distY.toString());
    target.setAttribute("x", (edx - distX).toString());
    target.setAttribute("y", (edy - distY).toString());
    var targetParent = target.closest("g");
    var line = targetParent.querySelector(".annotLine");
    var dragRects = targetParent.querySelectorAll(".lineDragRect");
    pt = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(target.getBoundingClientRect().x, target.getBoundingClientRect().y)
    var rectX = pt.x.toString(); //.matrixTransform(this.canvasMatrix).x.toString() 
    var rectY = pt.y.toString(); //matrixTransform(this.canvasMatrix).y.toString() 
    if (line !== null) {
      line.setAttribute("x2", rectX);
      line.setAttribute("y2", rectY);
    }
    if (dragRects.length > 0) {
      dragRects.forEach(dr => {
        if (dr.classList.contains("x2")) {
          dr.setAttribute("x", rectX);
          dr.setAttribute("y", rectY);
        }
      });
    }
  }
  //LINES
  dragLineListener(event) {
    //if(document.getElementById(this.containerId).querySelector(".sidebar.openSidebar") != null) return
    var target = event.target;
    this.interactTarget = target;
    if (!this.isInteracting) {
      this.interactTarget.dispatchEvent(this.dragAnnotStartEvent);
    }
    this.isInteracting = true;
    //this.canvasMatrix = (document.getElementById("annotationCanvas") as unknown as SVGGraphicsElement).getScreenCTM().inverse()
    this.dragedRect = target;
    var pt = coordinates.transformToDOMMatrixCoordinates(event.clientX, event.clientY, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas")); //new DOMPoint(event.clientX, event.clientY)
    var edx = pt.x; //matrixTransform(this.canvasMatrix).x
    var edy = pt.y; //matrixTransform(this.canvasMatrix).y
    target.setAttribute("x", edx.toString());
    target.setAttribute("y", edy.toString());
    var targetParent = target.closest("g");
    var line = targetParent.querySelector(".annotLine");
    pt = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, target.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
    var rectX = pt.x.toString(); //.matrixTransform(this.canvasMatrix).x.toString() 
    var rectY = pt.y.toString(); //matrixTransform(this.canvasMatrix).y.toString() 
    if (target.classList.contains("x1")) {
      line.setAttribute("x1", rectX);
      line.setAttribute("y1", rectY);
      this.highlightNextAttachObject(target);
    }
    this.interactionOverlay.dispatchEvent(new Event("annotChanged"));
  }
  /**
   * Highlight the next Element where the lineDragRect could attach to
   * @param lineDragRect
   * @returns
   */
  highlightNextAttachObject(lineDragRect) {
    var pt = coordinates.transformToDOMMatrixCoordinates(lineDragRect.getBoundingClientRect().x, lineDragRect.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
    var posx = pt.x;
    var posy = pt.y;
    var nextScoreObj = this.m2m.findScoreTarget(posx, posy);
    var nextShapeObj = this.findCustomShapeTarget(posx, posy);
    var possibleCoords = new Array();
    var shapeCoord;
    if (nextShapeObj !== null) {
      var shapept = coordinates.transformToDOMMatrixCoordinates(nextShapeObj.getBoundingClientRect().x, nextShapeObj.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
      shapeCoord = {
        obj: nextShapeObj,
        x: shapept.x,
        y: shapept.y
      };
      possibleCoords.push(shapeCoord);
    }
    if (nextScoreObj != undefined) {
      var measurept = coordinates.transformToDOMMatrixCoordinates(nextScoreObj.parentMeasure.getBoundingClientRect().x, nextScoreObj.parentMeasure.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
      var measureCoord = {
        obj: nextScoreObj.parentMeasure,
        x: measurept.x,
        y: measurept.y
      };
      possibleCoords.push(measureCoord);
      var staffpt = coordinates.transformToDOMMatrixCoordinates(nextScoreObj.parentStaff.getBoundingClientRect().x, nextScoreObj.parentStaff.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
      var staffCoord = {
        obj: nextScoreObj.parentStaff,
        x: staffpt.x,
        y: staffpt.y
      };
      possibleCoords.push(staffCoord);
      var notept = coordinates.transformToDOMMatrixCoordinates(document.getElementById(nextScoreObj.id).getBoundingClientRect().x, document.getElementById(nextScoreObj.id).getBoundingClientRect().y, this.interactionOverlay);
      var noteCoord = {
        obj: cq.getRootSVG(this.containerId).querySelector("#" + nextScoreObj.id),
        x: notept.x,
        y: notept.y
      };
      possibleCoords.push(noteCoord);
    }
    var tempDist = Math.pow(10, 10);
    var objToHighlight;
    var objCoord;
    possibleCoords.forEach(coord => {
      var dist = Math.sqrt(Math.abs(coord.x - posx) ** 2 + Math.abs(coord.y - posy) ** 2);
      if (dist < tempDist) {
        tempDist = dist;
        objToHighlight = coord.obj;
        objCoord = coord;
      }
    });
    this.updateAnnotationIDs(objToHighlight, lineDragRect, objCoord);
    return objToHighlight;
  }
  /**
   * Find nearest Custom Shape to given Position (e.g. Mouse)
   * @param posx
   * @param posy
   * @returns
   */
  findCustomShapeTarget(posx, posy) {
    var shapes = Array.from(this.interactionOverlay.querySelectorAll(".customAnnotShape"));
    var nextShape;
    var tempDist = Math.pow(10, 10);
    shapes.forEach(s => {
      var pt = coordinates.transformToDOMMatrixCoordinates(s.getBoundingClientRect().x, s.getBoundingClientRect().y, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
      //var spt = pt.matrixTransform(this.rootMatrix)
      var dist = Math.sqrt(Math.abs(pt.x - posx) ** 2 + Math.abs(pt.y - posy) ** 2);
      if (dist < tempDist) {
        tempDist = dist;
        nextShape = s;
      }
    });
    if (nextShape == undefined) {
      return null;
    }
    return nextShape;
  }
  /**
   * Update Set of saved Annotations and their relations to Shapes or Score
   * @param objToAttach
   * @param lineDragRect
   */
  updateAnnotationIDs(objToAttach, lineDragRect, objCoord) {
    var line;
    var targetx;
    var targety;
    var highlightRect;
    var parentGroup = lineDragRect.closest("g");
    var otaBBox = objToAttach.getBoundingClientRect();
    this.annotations.some(annot => {
      if (annot.sourceID = parentGroup.id) {
        var pt = coordinates.getDOMMatrixCoordinates(otaBBox, cq.getInteractOverlay(this.containerId).querySelector("#annotationCanvas"));
        annot.targetID = objToAttach.id;
        targetx = pt.x;
        targety = pt.y;
        // draw rect for highlighting
        if (parentGroup.querySelector(".highlightAnnotation") === null) {
          highlightRect = document.createElementNS(constants_1.constants._SVGNS_, "rect");
          parentGroup.insertBefore(highlightRect, parentGroup.firstChild);
        } else {
          highlightRect = parentGroup.querySelector(".highlightAnnotation");
        }
        var highlightMargin = 0;
        highlightRect.classList.add("highlightAnnotation");
        highlightRect.setAttribute("x", (targetx - highlightMargin).toString());
        highlightRect.setAttribute("y", (targety - highlightMargin).toString());
        highlightRect.setAttribute("height", (pt.height + 2 * highlightMargin).toString());
        highlightRect.setAttribute("width", (pt.width + 2 * highlightMargin).toString());
        return annot.sourceID === parentGroup.id;
      }
    });
    this.snapCoords = {
      obj: line,
      x: targetx,
      y: targety
    };
    // this.container.querySelectorAll("*[fill=green]").forEach(fg => {
    //     fg.removeAttribute("fill")
    // })
    //objToAttach.setAttribute("fill", "green")
    // some rules for custom shapes
    if (objToAttach.classList.contains("customAnnotShape")) {
      parentGroup.querySelector(".highlightAnnotation").remove();
      // ensure that only one shape is attached
      if (parentGroup.querySelector(".customAnnotShape") !== null) {
        var prevShape = parentGroup.querySelector(".customAnnotShape");
        parentGroup.parentElement.appendChild(prevShape);
      }
      parentGroup.insertBefore(objToAttach, parentGroup.firstChild);
      var newAnnot = {
        sourceID: objToAttach.id,
        targetID: new Array()
      };
      // get annotated elements into shape info
      var shapeBBox = objToAttach.getBoundingClientRect();
      var shapeX = shapeBBox.x;
      var shapeY = shapeBBox.y;
      this.m2m.getNoteBBoxes().forEach(bb => {
        if (bb.x >= shapeX && bb.x <= shapeX + shapeBBox.width && bb.y >= shapeY && bb.y <= shapeY + shapeBBox.height) {
          newAnnot.targetID.push(bb.id);
        }
      });
      this.annotations.push(newAnnot);
    }
  }
  /**
   * Delete attributes from Elements which are just used temporarily to resize or drag objects
   */
  deleteTempDistances() {
    var _a;
    (_a = cq.getInteractOverlay(this.containerId)) === null || _a === void 0 ? void 0 : _a.querySelector("#annotationCanvas").querySelectorAll("*[distX], *[distY]").forEach(d => {
      d.removeAttribute("distX");
      d.removeAttribute("distY");
    });
  }
  /**
   * Snap Annotation Pointer to highlighted Object
   */
  snapToObj() {
    this.dragedRect.setAttribute("x", this.snapCoords.x.toString());
    this.dragedRect.setAttribute("y", this.snapCoords.y.toString());
    var line = this.dragedRect.closest("g").querySelector(".annotLine");
    line.setAttribute("x1", this.snapCoords.x.toString());
    line.setAttribute("y1", this.snapCoords.y.toString());
    // clean up after snap
    this.interactionOverlay.querySelector("#annotationCanvas").querySelectorAll("g").forEach(el => {
      var shapeChild = el.querySelector(".customAnnotShape");
      var highlightChild = el.querySelector(".highlightAnnotation");
      if (shapeChild !== null && el.childElementCount === 1) {
        el.parentElement.appendChild(shapeChild);
        document.getElementById(el.id).remove();
      }
      if (shapeChild !== null && highlightChild !== null) {
        el.parentElement.appendChild(shapeChild);
      }
    });
  }
  update() {
    this.setContainerId(this.containerId);
    //this.updateCallback()
    this.rootBBox = this.interactionOverlay.getBoundingClientRect();
    this.rootMatrix = this.interactionOverlay.getScreenCTM().inverse();
    this.customShapes = Array.from(this.interactionOverlay.querySelectorAll(".customAnnotShape"));
    //this.resetListeners()
    return this;
  }
  setUpdateCallback(updateCallback) {
    this.updateCallback = updateCallback;
    return this;
  }
  setAnnotations(annotations) {
    this.annotations = annotations;
    return this;
  }
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.container = document.getElementById(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.annotationCanvas = this.interactionOverlay.querySelector("#annotationCanvas");
    return this;
  }
}
exports["default"] = AnnotationChangeHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ClickModeHandler.js":
/*!***********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ClickModeHandler.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
class ClickModeHandler {
  constructor() {
    /**
     * Event handler for inserting Notes
     */
    this.clickHandler = function clickHandler(e) {
      var _a;
      var t = e.target;
      if (this.interactionOverlay.querySelector(".moving") !== null) return;
      if (["clef", "meterSig", "keySig", "rest", "notehead"].some(c => t.parentElement.classList.contains(c))) {
        this.hideCursor();
        return;
      }
      // when over other interactable elements discard event
      if (!this.phantomElementHandler.getIsTrackingMouse()) {
        return;
      }
      if (this.musicPlayer.getIsPlaying() === true) {
        return;
      } // getIsPlaying could also be undefined
      var pt = new DOMPoint(e.clientX, e.clientY);
      var rootSVG = this.rootSVG;
      var pospt = pt.matrixTransform(rootSVG.getScreenCTM().inverse());
      var posx = pospt.x;
      var posy = pospt.y;
      var target = e.target;
      var options = {};
      if (target.classList.contains("staffLine")) {
        options["staffLineId"] = target.id;
      }
      if ((_a = this.interactionOverlay.querySelector("#phantomNote")) === null || _a === void 0 ? void 0 : _a.classList.contains("onChord")) {
        options["targetChord"] = this.findScoreTarget(posx, posy);
      }
      //this.m2m.defineNote(e.pageX, e.pageY, options);
      this.m2m.defineNote(posx, posy, options);
      var newNote = this.m2m.getNewNote();
      if (newNote == undefined) return; //Eingabemaske in Chrome: zusätzliche Notenlinien in Noteneditor #10
      var meiDoc = this.m2m.getCurrentMei();
      var pitchExists = false;
      // do not insert same note more than once in chord
      if (newNote.chordElement != undefined) {
        var chordEl = meiDoc.getElementById(newNote.chordElement.id);
        if (chordEl.getAttribute("pname") === newNote.pname && chordEl.getAttribute("oct") === newNote.oct) {
          pitchExists = true;
        } else {
          for (let c of chordEl.children) {
            if (c.getAttribute("pname") === newNote.pname && c.getAttribute("oct") === newNote.oct) {
              pitchExists = true;
              break;
            }
          }
        }
      }
      if (!pitchExists) {
        var replace = this.container.querySelector("#insertToggle").checked && newNote.chordElement == undefined;
        this.insertCallback(this.m2m.getNewNote(), replace).then(() => {
          this.musicPlayer.generateTone(this.m2m.getNewNote());
        }).catch(() => {
          //alert("Your bar is to small")
        });
      }
    }.bind(this);
    this.hideCursor = function () {
      if (this.interactionOverlay.querySelector(".moving") !== null) return;
      this.container.querySelectorAll("#phantomCanvas > *").forEach(ph => {
        ph.setAttribute("visibility", "hidden");
      }); // make phantoms invisible
    }.bind(this);
    this.showCursor = function () {
      this.container.querySelectorAll("#phantomCanvas > *").forEach(ph => ph.setAttribute("visibility", "visible")); // make phantoms invisible
    }.bind(this);
    this.mouseOverChordHandler = function mouseOverHandler(e) {
      var _a;
      if (!this.phantomElementHandler.getIsTrackingMouse()) {
        return;
      }
      var posx = e.offsetX;
      var posy = e.offsetY;
      var elementToHighlight = this.findScoreTarget(posx, posy);
      if (elementToHighlight == undefined || elementToHighlight.closest(".mRest") !== null || elementToHighlight.closest(".rest") !== null) {
        return;
      }
      if (this.prevElementToHighlight == undefined || this.currentElementToHighlight !== elementToHighlight) {
        //update focussed layer if element and layer do not match
        if (elementToHighlight.closest(".layer").id !== ((_a = this.m2m.getMouseEnterElementByName("layer")) === null || _a === void 0 ? void 0 : _a.id) && this.m2m.getMouseEnterElementByName("layer") !== null) {
          this.m2m.setMouseEnterElements(elementToHighlight);
        }
        //snap note to closest Chord
        var phantom = this.interactionOverlay.querySelector("#phantomNote");
        var cx = parseFloat(phantom.getAttribute("cx"));
        var bboxElemenet = this.interactionOverlay.querySelector("[refId=" + elementToHighlight.id + "]");
        var ptLeft = new DOMPoint(bboxElemenet.getBoundingClientRect().left, 0);
        var ptRight = new DOMPoint(bboxElemenet.getBoundingClientRect().right, 0);
        var rootSVG = this.rootSVG;
        var left = ptLeft.matrixTransform(rootSVG.getScreenCTM().inverse()).x;
        var right = ptRight.matrixTransform(rootSVG.getScreenCTM().inverse()).x;
        //snap only when within boundaries of target Chord
        if (cx > left && cx < right) {
          var snapTarget;
          var snapTargetBBox;
          var phantomSnapX;
          var targetwidth;
          var snapCoord;
          // if(navigator.userAgent.toLowerCase().includes("firefox")){ // special rules for buggy firefox
          //     if(elementToHighlight.querySelector(".notehead") === null) return
          //     targetwidth = right - left//elementToHighlight.querySelector(".notehead")?.getBoundingClientRect().width
          //     snapTarget = elementToHighlight.classList.contains("chord") ?  elementToHighlight : elementToHighlight.querySelector(".note") || elementToHighlight
          //     console.log("snapTarget", snapTarget)
          //     snapTargetBBox = snapTarget.getBoundingClientRect()
          //     // phantomSnapX = snapTargetBBox.x - window.scrollX - rootBBox.x - root.scrollLeft
          //     snapCoord = snapTargetBBox.x
          // }else{
          snapTarget = bboxElemenet; //elementToHighlight.querySelector(".notehead")|| elementToHighlight
          snapTargetBBox = snapTarget.getBoundingClientRect();
          // phantomSnapX = snapTargetBBox.x + snapTargetBBox.width/2 - window.scrollX - rootBBox.x - root.scrollLeft
          snapCoord = snapTargetBBox.x + snapTargetBBox.width / 2;
          //}
          let snappt = new DOMPoint(snapCoord, 0);
          phantomSnapX = snappt.matrixTransform(rootSVG.getScreenCTM().inverse()).x;
          if (elementToHighlight.querySelector(".chord") !== null) {
            console.log(phantomSnapX);
          }
          phantom.setAttribute("cx", phantomSnapX.toString());
          if (!phantom.classList.contains("onChord")) {
            phantom.classList.add("onChord");
            phantom.classList.add("l" + elementToHighlight.closest(".layer").getAttribute("n"));
            if (!elementToHighlight.classList.contains("chord")) {
              elementToHighlight.classList.add("highlighted");
            } else {
              elementToHighlight.querySelectorAll(".note").forEach(c => {
                c.classList.add("highlighted");
              });
            }
          }
        } else {
          for (const [key, value] of phantom.classList.entries()) {
            if (value.indexOf("l") === 0) {
              phantom.classList.remove(value);
            }
          }
          phantom.classList.remove("onChord");
          phantom.setAttribute("fill", "black");
          this.container.querySelectorAll(".highlighted").forEach(h => {
            h.classList.remove("highlighted");
          });
        }
        //MaNo: 6.9.2021: Chords will be detected by vertical snapping, not by highlighting box
        // var highLightRects: NodeListOf<Element> = this.annotations.getCanvasGroup().querySelectorAll(".highlightChord")
        // Array.from(highLightRects).forEach(el => {
        //     el.remove()
        // })
        // var ebb: DOMRect = elementToHighlight.getBoundingClientRect()
        // var highlightRect: SVGElement = document.createElementNS(c._SVGNS_, "rect")
        // var margin = 5
        // highlightRect.setAttribute("x", (ebb.x - rootBBox.x - margin).toString())
        // highlightRect.setAttribute("y", (ebb.y - rootBBox.y - 10*margin).toString())
        // highlightRect.setAttribute("height", (ebb.height + 20*margin).toString())
        // highlightRect.setAttribute("width", (ebb.width + 2*margin).toString())
        // highlightRect.classList.add("highlightChord")
        // this.annotations.getCanvasGroup().appendChild(highlightRect)
        // //highlightRect.addEventListener("click", this.clickHandler)
        this.currentElementToHighlight = elementToHighlight;
      }
    }.bind(this);
  }
  setListeners() {
    this.interactionOverlay.addEventListener('click', this.clickHandler);
    this.interactionOverlay.addEventListener("mousemove", this.mouseOverChordHandler);
    this.interactionOverlay.querySelectorAll("#scoreRects > *").forEach(sr => {
      if (["clef", "meterSig", "keySig", "rest", "notehead", "harm"].some(c => sr.classList.contains(c))) {
        sr.addEventListener("mouseover", this.hideCursor);
      } else {
        sr.addEventListener("mouseover", this.showCursor);
      }
    });
    this.interactionOverlay.querySelectorAll("#manipulatorCanvas *, #annotationCanvas *").forEach(sr => {
      sr.addEventListener("mouseover", this.hideCursor);
      sr.addEventListener("mouseleave", this.showCursor);
    });
    // Listener just for staves
    var staves = this.interactionOverlay.querySelectorAll(".staffLine");
    Array.from(staves).forEach(element => {
      element.addEventListener('click', this.clickHandler);
    });
  }
  removeListeners() {
    this.interactionOverlay.removeEventListener('click', this.clickHandler);
    this.interactionOverlay.removeEventListener("mousemove", this.mouseOverChordHandler);
    if (this.annotations != undefined) {
      var highLightElements = this.annotations.getAnnotationCanvas().querySelectorAll(".highlightChord");
      Array.from(highLightElements).forEach(el => {
        el.remove();
      });
    }
    this.container.querySelectorAll(".highlighted").forEach(c => {
      c.classList.remove("highlighted");
    });
    this.interactionOverlay.querySelectorAll("#scoreRects > *").forEach(sr => {
      if (["clef", "meterSig", "keySig", "rest", "notehead", "harm"].some(c => sr.classList.contains(c))) {
        sr.removeEventListener("mouseover", this.hideCursor);
      } else {
        sr.removeEventListener("mouseover", this.showCursor);
      }
    });
    // Listener just for staves
    var staves = this.interactionOverlay.querySelectorAll(".staffLine");
    Array.from(staves).forEach(element => {
      element.removeEventListener('click', this.clickHandler);
    });
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  /**
       * Find Score Element nearest to given Position (e.g. Mouse)
       * @param posx
       * @param posy
       * @returns
       */
  findScoreTarget(posx, posy) {
    var nextNote = this.m2m.findScoreTarget(posx, posy);
    if (nextNote != undefined) {
      var el = this.rootSVG.querySelector("#" + nextNote.id).closest(".chord") || this.rootSVG.querySelector("#" + nextNote.id);
      if (el.classList.contains("notehead")) {
        el = el.parentElement;
      }
      return el;
    }
    return;
  }
  ///// GETTER / SETTER////////////////
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.rootSVG = cq.getRootSVG(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.container = document.getElementById(id);
    return this;
  }
  setAnnotations(annotations) {
    this.annotations = annotations;
    return this;
  }
  setInsertCallback(insertCallback) {
    this.insertCallback = insertCallback;
    return this;
  }
  setDeleteCallback(deleteCallback) {
    this.deleteCallback = deleteCallback;
    return this;
  }
  setPhantomCursor(peh) {
    this.phantomElementHandler = peh;
    return this;
  }
}
exports["default"] = ClickModeHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/CustomAnnotationShapeDrawer.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/CustomAnnotationShapeDrawer.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const d3 = __webpack_require__(/*! d3 */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/d3/index.js");
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
class CustomAnnotationShapeDrawer {
  constructor(containerId) {
    this.setContainerId(containerId);
    this.shapes = new Array();
    this.shapeID = "";
    this.dragged = false;
    this.canvas = d3.select("#" + this.containerId + " #interactionOverlay"); // draw directly in svg
    this.dragBehaviour = d3.drag().on('start', drawStart).on('drag', this.drawing.bind(this)).on('end', this.drawEnd.bind(this));
    var that = this;
    function drawStart() {
      var pt = coordinates.transformToDOMMatrixCoordinates(d3.event.sourceEvent.clientX, d3.event.sourceEvent.clientY, that.interactionOverlay);
      that.initialX = pt.x; //d3.event.x
      that.initialY = pt.y; //d3.event.y
      if (d3.event.sourceEvent.srcElement.id === that.interactionOverlay.id) {
        that.initRect(that.initialX, that.initialY);
        //that.initCircle(that.initialX, that.initialY)
      }
    }

    this.setListeners();
  }
  drawing() {
    var pt = coordinates.transformToDOMMatrixCoordinates(d3.event.sourceEvent.clientX, d3.event.sourceEvent.clientY, this.interactionOverlay);
    const curX = pt.x; //d3.event.x
    const curY = pt.y; //d3.event.y
    if (this.shape == undefined) {
      return;
    }
    if (Math.abs(curX - this.initialX) > 20 || Math.abs(curY - this.initialY) > 20) {
      this.dragged = true;
      const newX = curX < this.initialX ? curX : this.initialX;
      const newY = curY < this.initialY ? curY : this.initialY;
      const width = curX < this.initialX ? this.initialX - curX : curX - this.initialX;
      const height = curY < this.initialY ? this.initialY - curY : curY - this.initialY;
      this.updateRect(newX, newY, width, height);
      //this.updateCircle(newX, newY, width, height);
    }
  }

  drawEnd() {
    if (this.shapeID === "") return;
    if (!this.dragged) {
      var elToRemove = this.interactionOverlay.querySelector("#" + this.shapeID);
      if (elToRemove !== null) {
        elToRemove.remove();
      }
    } else {
      var annotCanvas = this.interactionOverlay.querySelector("#annotationCanvas");
      var pt = coordinates.getDOMMatrixCoordinates(this.shape, annotCanvas);
      this.interactionOverlay.querySelector("#annotationCanvas").appendChild(this.shape);
      this.shape.setAttribute("x", pt.left.toString());
      this.shape.setAttribute("y", pt.top.toString());
      this.shape.setAttribute("width", pt.width.toString());
      this.shape.setAttribute("height", pt.height.toString());
      this.shapes.push(this.shape.cloneNode(true));
    }
    this.shape = undefined;
    this.updateCallback();
  }
  initRect(ulx, uly) {
    this.shapeID = random_1.uuidv4();
    this.canvas.append('rect').attr('x', ulx).attr('y', uly).attr('width', 0).attr('height', 0).attr("class", "customAnnotShape").attr("id", this.shapeID);
    this.shape = document.getElementById(this.shapeID);
  }
  initCircle(cx, cy) {
    this.shapeID = random_1.uuidv4();
    this.canvas.append('ellipse').attr('cx', cx).attr('cy', cy).attr('rx', 0).attr('ry', 0).attr("class", "customAnnotShape").attr("id", this.shapeID);
    this.shape = document.getElementById(this.shapeID);
  }
  updateRect(newX, newY, currentWidth, currentHeight) {
    this.shape.setAttribute('x', newX.toString());
    this.shape.setAttribute('y', newY.toString());
    this.shape.setAttribute('width', currentWidth.toString());
    this.shape.setAttribute('height', currentHeight.toString());
  }
  updateCircle(newX, newY, currentWidth, currentHeight) {
    this.shape.setAttribute('cx', newX.toString());
    this.shape.setAttribute('cy', newY.toString());
    this.shape.setAttribute('rx', currentWidth.toString());
    this.shape.setAttribute('ry', currentHeight.toString());
  }
  removeListeners() {
    d3.select("#" + this.containerId + " #interactionOverlay").on('mousedown.drag', null);
  }
  setListeners() {
    this.canvas.call(this.dragBehaviour);
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  ///////// GETTER/ SETTER ////////
  setM2M(m2m) {
    this.m2m = m2m;
  }
  setContainerId(id) {
    this.containerId = id;
    this.container = document.getElementById(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.rootSVG = cq.getRootSVG(id);
  }
  getShapes() {
    return this.shapes;
  }
  //////////// CALLBACKS /////////////
  setUpdateCallback(updateCallback) {
    this.updateCallback = updateCallback;
  }
}
exports["default"] = CustomAnnotationShapeDrawer;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/DeleteHandler.js":
/*!********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/DeleteHandler.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const action = "mousedown";
class DeleteHandler {
  constructor(containerId) {
    this.primaryDeleteFlag = "marked";
    this.secondaryDeleteFlag = "lastAdded";
    this.clickHandler = function clickHandler(e) {
      var target = e.target;
      target = target.closest(".note");
      let stem = target.querySelector(".stem");
      if (!target.classList.contains(this.primaryDeleteFlag)) {
        target.classList.add(this.primaryDeleteFlag);
        if (stem !== null) {
          stem.classList.add(this.primaryDeleteFlag);
        }
      } else {
        target.classList.remove(this.primaryDeleteFlag);
        if (stem !== null) {
          stem.classList.remove(this.primaryDeleteFlag);
        }
      }
    }.bind(this);
    /**
     * Delete all Elements which are marked
     */
    this.backSpaceHandler = function backSpaceHandler(e) {
      if (!cq.hasActiveElement(this.containerId)) return;
      if (e.code !== "Backspace") return;
      var hasRests = false;
      var hasNotes = false;
      if (cq.getRootSVG(this.containerId).querySelectorAll("." + this.primaryDeleteFlag + ".rest, ." + this.secondaryDeleteFlag + ".rest").length > 0) {
        hasRests = true;
      }
      if (cq.getRootSVG(this.containerId).querySelectorAll("." + this.primaryDeleteFlag + ":not(.rest), ." + this.secondaryDeleteFlag + ":not(.rest)").length > 0) {
        hasNotes = true;
      }
      Array.from(cq.getRootSVG(this.containerId).querySelectorAll("." + this.primaryDeleteFlag + ", ." + this.secondaryDeleteFlag)).forEach(el => {
        if (hasNotes && hasRests) {
          if (!el.classList.contains("rest")) {
            this.selectedElements.push(el);
          }
        } else {
          this.selectedElements.push(el);
        }
      });
      if ((e.code === "Backspace" || e.code === "Delete") && this.selectedElements.length > 0 && this.container.querySelectorAll(".harmonyDiv").length === 0) {
        this.deleteCallback(this.selectedElements).then(() => {
          this.selectedElements.length = 0;
          cq.getRootSVG(this.containerId).querySelectorAll("." + this.primaryDeleteFlag + ", ." + this.secondaryDeleteFlag).forEach(el => {
            el.classList.remove(this.primaryDeleteFlag);
            el.classList.remove(this.secondaryDeleteFlag);
          });
        });
      }
    }.bind(this);
    this.setContainerId(containerId);
  }
  setListeners() {
    // Listenere for whole SVG (maybe just layer?)
    var notes = this.rootSVG.querySelectorAll(".note");
    Array.from(notes).forEach(element => {
      element.addEventListener(action, this.clickHandler);
    });
    document.addEventListener("keyup", this.backSpaceHandler);
  }
  removeListeners() {
    var notes = this.rootSVG.querySelectorAll(".note");
    Array.from(notes).forEach(element => {
      element.removeEventListener(action, this.clickHandler);
    });
    document.removeEventListener("keyup", this.backSpaceHandler);
  }
  update() {
    this.selectedElements = new Array();
    this.setContainerId(this.containerId);
    this.removeListeners();
    this.setListeners();
    return this;
  }
  /////////// GETTER/ SETTER ////////////
  setDeleteCallback(deleteCallback) {
    this.deleteCallback = deleteCallback;
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.container = cq.getContainer(containerId);
    this.rootSVG = cq.getRootSVG(containerId);
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    return this;
  }
  getDeleteFlag() {
    return this.primaryDeleteFlag;
  }
}
exports["default"] = DeleteHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/GlobalKeyboardHandler.js":
/*!****************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/GlobalKeyboardHandler.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const meiConverter = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const marked = "marked";
const lastAdded = "lastAdded";
const editStates = [marked, lastAdded];
const editStateSelector = "." + editStates.join(",.");
const noteEditStateSelector = editStateSelector.replace(".", ".note.");
class GlobalKeyboardHandler {
  constructor(containerId) {
    this.preventScroll = function (e) {
      if (this.hasEditableOpen()) return;
      if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].indexOf(e.code) > -1) {
        e.preventDefault();
      }
    }.bind(this);
    this.keydownHandler = function keydownHandler(e) {
      if (this.hasContainerFocus()) {
        if (e.key == undefined) {
          return;
        }
        if (this.hasEditableOpen()) return;
        var isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
        var ctrl = e.ctrlKey;
        if (isMac) {
          ctrl = e.metaKey;
        }
        if (ctrl) {
          if (e.key === "z") {
            this.undoHandler(e);
          }
          if (e.key === "y") {
            this.redoHandler(e);
          }
          if (e.key === "a") {
            this.selectAllHandler(e);
          }
          if (e.key === "c") {
            this.copyHandler(e);
          }
          if (e.key === "v") {
            this.pasteHandler(e);
          }
          // if(e.key === "k" && Array.from(document.querySelectorAll(".note, .chord, .rest, .mrest")).some(el => el.classList.contains(marked))){
          //      this.handleHarmony(e)
          // }
        } else if (e.key.includes("Arrow")) {
          //document.removeEventListener("keydown", this.keydownHandler)
          this.transposeHandler(e);
        } else if (e.key === "Escape") {
          this.resetHandler(e);
        }
      }
    }.bind(this);
    this.prolongHandler = function prolongHandler(e) {
      if (this.hasContainerFocus()) {
        if (e.code === "Semicolon") {
          // Deutsch: Ä
          this.reduceDur();
        } else if (e.code === "Quote") {
          // Deutsch: Ö
          this.prolongDur();
        }
      }
    }.bind(this);
    this.containerId = containerId;
    this.container = document.getElementById(containerId);
    this.setListeners();
  }
  setListeners() {
    document.addEventListener("keydown", this.keydownHandler);
    //document.addEventListener("keydown", this.prolongHandler)
    window.addEventListener("keydown", this.preventScroll, false);
  }
  removeListeners() {
    document.removeEventListener("keydown", this.keydownHandler);
    //document.removeEventListener("keydown", this.prolongHandler)
    window.removeEventListener("keydown", this.preventScroll, false);
  }
  undoHandler(e) {
    e.preventDefault();
    if (!this.hasContainerFocus()) return;
    e.stopImmediatePropagation();
    this.undoCallback();
    //document.removeEventListener("keydown", this.keydownHandler)
  }

  redoHandler(e) {
    e.preventDefault();
    if (!this.hasContainerFocus()) return;
    e.stopImmediatePropagation();
    this.redoCallback();
    //document.removeEventListener("keydown", this.keydownHandler)     
  }

  selectAllHandler(e) {
    if (!this.hasContainerFocus()) return;
    e.preventDefault();
    cq.getRootSVG(this.containerId).querySelectorAll(".note").forEach(note => {
      let stem = note.querySelector(".stem");
      note.classList.add(marked);
      if (stem !== null) {
        stem.classList.add(marked);
      }
      var chord = note.closest(".chord");
      if (chord !== null) {
        if (!chord.classList.contains(marked)) chord.classList.add(marked);
      }
    });
  }
  /**
   * Copy marked Elements
   * @param e
   */
  copyHandler(e) {
    if (!this.hasContainerFocus()) return;
    e.preventDefault();
    this.copiedIds = new Array();
    document.querySelectorAll(".marked").forEach(m => {
      this.copiedIds.push(m.id);
    });
    this.copiedIds.filter(n => n); //undefined and null Elements will be excluded
  }
  /**
   * paste marked Elements
   * @param e
   */
  pasteHandler(e) {
    var _a, _b;
    //if(!this.hasContainerFocus()) return
    //e.preventDefault()
    var pastePosition = ((_a = this.container.querySelector(".chord.marked, .note.marked, .rest.marked, .mRest.marked")) === null || _a === void 0 ? void 0 : _a.id) || ((_b = this.container.querySelector("#cursor")) === null || _b === void 0 ? void 0 : _b.getAttribute("refId"));
    if (this.copiedIds != undefined && pastePosition != undefined) {
      var lastId = meiOperation.paste(this.copiedIds, pastePosition, this.currentMEI);
      var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
      this.loadDataCallback("", mei, false).then(mei => {
        //Tell everyone that a past just occured to readjust certain elements e.g.
        var pastedEvent = new CustomEvent("pasted", {
          detail: lastId
        });
        document.dispatchEvent(pastedEvent);
      });
    }
  }
  resetHandler(e) {
    if (!this.hasContainerFocus()) return;
    e.preventDefault();
    this.container.querySelectorAll(editStateSelector).forEach(el => {
      editStates.forEach(es => {
        el.classList.remove(es);
      });
    });
    this.musicPlayer.rewind();
    this.resetLastInsertedNoteId();
    this.container.querySelectorAll("#modGroup *").forEach(mg => mg.classList.remove("selected"));
  }
  transposeHandler(e) {
    if (!this.hasContainerFocus()) return;
    if (["annotMode", "harmonyMode"].some(cn => this.container.classList.contains(cn))) return;
    //e.preventDefault()
    if (document.querySelectorAll(noteEditStateSelector).length === 0) {
      return;
    }
    var mei;
    switch (e.key) {
      case "ArrowUp":
        mei = meiOperation.transposeByStep(this.currentMEI, "up");
        break;
      case "ArrowDown":
        mei = meiOperation.transposeByStep(this.currentMEI, "down");
        break;
      default:
      //console.log(this, "Sorry, wrong turn")
    }

    if (mei != undefined) {
      if (cq.getContainer(this.containerId).querySelector(".marked") !== null) this.resetLastInsertedNoteId();
      mei = meiConverter.restoreXmlIdTags(mei);
      this.loadDataCallback("", mei, false);
    }
  }
  handleHarmony(e) {
    if (!this.hasContainerFocus()) return;
    this.harmonyHandlerCallback(e);
  }
  // Helpers
  reduceDur() {
    var additionalElements = new Array();
    additionalElements.push(document.getElementById(this.scoreGraph.nextRight().getId()));
    //meiOperation.changeDuration(this.currentMEI, "reduce", additionalElements)
    meiOperation.changeDuration(this.currentMEI, additionalElements);
    var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
    this.loadDataCallback("", mei, false);
  }
  prolongDur() {
    var additionalElements = new Array();
    additionalElements.push(document.getElementById(this.scoreGraph.nextRight().getId()));
    //meiOperation.changeDuration(this.currentMEI, "prolong", additionalElements)
    meiOperation.changeDuration(this.currentMEI, additionalElements);
    var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
    this.loadDataCallback("", mei, false);
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
    return this;
  }
  hasContainerFocus() {
    return this.container.classList.contains("activeContainer");
  }
  hasEditableOpen() {
    return document.getElementById(this.containerId).querySelector(".canvas *[contenteditable=true]") !== null;
  }
  /////// GETTER/ SETTER ///////
  setUndoCallback(undoCallback) {
    this.undoCallback = undoCallback;
    return this;
  }
  setRedoCallback(redoCallback) {
    this.redoCallback = redoCallback;
    return this;
  }
  setCurrentMei(mei) {
    this.currentMEI = mei;
    return this;
  }
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  setScoreGraph(scoreGraph) {
    this.scoreGraph = scoreGraph;
    return this;
  }
  resetLastInsertedNoteId() {}
  setHarmonyHandlerCallback(harmonyHandlerCallback) {
    this.harmonyHandlerCallback = harmonyHandlerCallback;
    return this;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    return this;
  }
  resetLastInsertedNoteCallback(resetLastInsertedNoteId) {
    this.resetLastInsertedNoteId = resetLastInsertedNoteId;
    return this;
  }
}
exports["default"] = GlobalKeyboardHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/InsertModeHandler.js":
/*!************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/InsertModeHandler.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const SelectionHandler_1 = __webpack_require__(/*! ./SelectionHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/SelectionHandler.js");
const Annotations_1 = __webpack_require__(/*! ../gui/Annotations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/Annotations.js");
const LabelHandler_1 = __webpack_require__(/*! ./LabelHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/LabelHandler.js");
const KeyModeHandler_1 = __webpack_require__(/*! ./KeyModeHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/KeyModeHandler.js");
const ClickModeHandler_1 = __webpack_require__(/*! ./ClickModeHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ClickModeHandler.js");
const PhantomElementHandler_1 = __webpack_require__(/*! ./PhantomElementHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/PhantomElementHandler.js");
const MEIConverter_1 = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const ScoreManipulatorHandler_1 = __webpack_require__(/*! ./ScoreManipulatorHandler */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ScoreManipulatorHandler.js");
const MEIOperations_1 = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
/**
 * Class that handles insert mode, events, and actions.
 */
class InsertModeHandler {
  constructor(containerId) {
    //For Callbacks
    this.activateHarmonyModeFunction = function activateHarmonyModeFunction(clicked = false) {
      this.activateHarmonyMode(clicked);
    }.bind(this);
    this.isGlobal = true;
    this.annotations = new Annotations_1.default(containerId);
  }
  activateInsertMode(clicked = false) {
    var _a, _b;
    if (this.annotationMode || this.harmonyMode) {
      this.insertDeactivate();
    }
    if (clicked) {
      if (this.unselectMenuItem("clickInsert")) {
        return;
      }
    }
    this.container.classList.add("clickmode");
    this.container.classList.add("textmode");
    this.keyMode = true;
    this.clickInsertMode = true;
    this.annotationMode = false;
    this.harmonyMode = false;
    this.phantomNoteHandler = new PhantomElementHandler_1.default(this.containerId);
    this.setPhantomNote();
    this.clickModeHandler = this.clickModeHandler == undefined ? new ClickModeHandler_1.default() : this.clickModeHandler;
    this.clickModeHandler.setContainerId(this.containerId).setInsertCallback(this.insertCallback).setDeleteCallback(this.deleteCallback).setAnnotations(this.annotations).setM2M(this.m2m).setMusicPlayer(this.musicPlayer).setPhantomCursor(this.phantomNoteHandler).resetListeners();
    this.keyModeHandler = this.keyModeHandler || new KeyModeHandler_1.default(this.containerId);
    this.keyModeHandler.setContainerId(this.containerId).setInsertCallback(this.insertCallback).setDeleteCallback(this.deleteCallback).setScoreGraph(this.scoreGraph).setM2M(this.m2m).setMusicPlayer(this.musicPlayer).resetListeners();
    this.deleteHandler.setListeners();
    (_a = this.annotations) === null || _a === void 0 ? void 0 : _a.setM2M(this.m2m);
    (_b = this.annotations) === null || _b === void 0 ? void 0 : _b.updateCanvas();
    //this.annotations?.resetTextListeners() // annotations should also be interactable when in notation mode
    this.activateSelectionMode();
  }
  activateSelectionMode() {
    //this.insertDeactivate()
    this.selectionHandler = new SelectionHandler_1.default(this.containerId);
    this.selectionHandler.setM2M(this.m2m).setScoreGraph(this.scoreGraph).resetListeners();
    //this.selectionHandler.setHarmonyHandler(this.harmonyHandler)
    //this.deleteHandler.setListeners()
    return this;
  }
  activateAnnotationMode(clicked = false) {
    this.insertDeactivate();
    if (clicked) {
      if (this.unselectMenuItem("activateAnnot")) {
        return;
      }
    }
    if (this.annotations == undefined) {
      this.annotations = new Annotations_1.default(this.containerId);
    } else {
      this.annotations.updateCanvas();
    }
    this.annotations.setContainerId(this.containerId).setM2M(this.m2m).setMusicPlayer(this.musicPlayer).setToFront().setMenuClickHandler();
    this.keyMode = false;
    this.clickInsertMode = false;
    this.annotationMode = true;
    this.harmonyMode = false;
  }
  activateHarmonyMode(clicked = false) {
    try {
      if (clicked) {
        if (this.unselectMenuItem("activateHarm")) {
          return;
        }
      }
    } catch (_a) {
      try {
        var harmonyButton = this.container.querySelector("#harmonyAnnotButton");
        if (!harmonyButton.classList.contains("selected")) {
          harmonyButton.classList.add("selected");
        }
      } catch (e) {
        console.error("There was a problem in activating harmonymode", e);
        return;
      }
    }
    if (this.labelHandler == undefined) {
      this.labelHandler = new LabelHandler_1.default(this.containerId);
    }
    //Activate/ Deactivate Global functions according to selected harmonymode
    if (this.container.querySelector("#activateHarm.selected, #harmonyAnnotButton.selected") !== null) {
      this.insertDeactivate();
      this.container.classList.add("harmonyMode");
      this.isGlobal = false;
    } else {
      this.isGlobal = true;
    }
    this.labelHandler.setContainerId(this.containerId).setGlobal(this.isGlobal).setListeners().setM2M(this.m2m).setMusicPlayer(this.musicPlayer).setCurrentMEI(this.m2m.getCurrentMei()).setLoadDataCallback(this.loadDataCallback);
    //this.keyMode = false;
    //this.clickInsertMode = false;
    //this.annotationMode = false;
    this.harmonyMode = true;
    return this;
  }
  insertDeactivate() {
    this.container.classList.remove("textmode");
    this.container.classList.remove("clickmode");
    this.container.classList.remove("annotMode");
    this.container.classList.remove("harmonyMode");
    this.keyMode = false;
    this.clickInsertMode = false;
    this.harmonyMode = false;
    this.annotationMode = false;
    if (this.clickModeHandler != undefined) {
      this.clickModeHandler.removeListeners();
      this.phantomNoteHandler.removeListeners().removeLines();
    }
    if (this.keyModeHandler != undefined) {
      this.keyModeHandler.removeListeners();
    }
    // if(typeof this.selectionHandler !== "undefined"){
    //   this.selectionHandler.removeListeners()
    // }
    // this.selectionHandler = undefined
    if (this.annotations != undefined) {
      this.annotations.removeListeners();
      this.annotations.setToBack();
      this.annotationMode = false;
    }
    if (this.labelHandler != undefined) {
      //this.labelHandler.removeListeners()
      this.isGlobal = true;
      this.labelHandler.reset();
    }
    if (this.deleteHandler != undefined) {
      this.deleteHandler.removeListeners();
    }
    //selectionnmode should be always active. 
    //Listeners will overwritten if another mode listen same behaviour on same element (d3.js), e.g. annotation
    //this.activateSelectionMode()
  }

  setSMHandler() {
    if (this.smHandler == undefined) {
      this.smHandler = new ScoreManipulatorHandler_1.default();
    }
    this.smHandler.setContainerId(this.containerId).setMEI(this.m2m.getCurrentMei()).setMusicPlayer(this.musicPlayer).setLoadDataCallback(this.loadDataCallback).drawElements();
  }
  setListeners() {
    var that = this;
    Array.from(this.container.querySelectorAll(".dropdown-item, .tabBtn")).forEach(n => {
      n.addEventListener("click", function (e) {
        e.preventDefault();
        switch (this.id) {
          case "notationTabBtn":
          case "clickInsert":
            //that.activateClickMode(true);
            that.activateInsertMode(true);
            break;
          case "keyMode":
            //that.activateKeyMode(true);
            that.activateInsertMode(true);
            break;
          case "annotationTabBtn":
          case "activateAnnot":
            that.activateAnnotationMode(true);
            break;
          case "activateHarm":
            that.activateHarmonyMode(true);
            break;
          default:
            that.insertDeactivate();
            break;
        }
      });
    });
    this.container.addEventListener("annotationButtonClicked", function (e) {
      var t = e.target;
      if (t.id === "harmonyAnnotButton") {
        that.activateHarmonyMode(true);
      } else {
        that.activateHarmonyMode(false);
      }
    }, true);
    Array.from(this.container.querySelectorAll("#noteGroup > *")).forEach(b => {
      b.addEventListener("click", function (e) {
        let dur = 0;
        switch (this.id) {
          case "fullNote":
            dur = 1;
            break;
          case "halfNote":
            dur = 2;
            break;
          case "quarterNote":
            dur = 4;
            break;
          case "eigthNote":
            dur = 8;
            break;
          case "sixteenthNote":
            dur = 16;
            break;
          case "thirtysecondNote":
            dur = 32;
            break;
        }
        that.m2m.setDurationNewNote(dur);
        if (that.m2m.setMarkedNoteDurations(dur)) {
          MEIOperations_1.cleanUp(that.m2m.getCurrentMei());
          var mei = MEIConverter_1.restoreXmlIdTags(that.m2m.getCurrentMei());
          that.loadDataCallback("", mei, false);
        }
      });
    });
    Array.from(this.container.querySelectorAll("#dotGroup > *")).forEach(b => {
      b.addEventListener("click", function (e) {
        let dots = 0;
        if (this.classList.contains("selected")) {
          switch (this.id) {
            case "oneDot":
              dots = 1;
              break;
            case "twoDot":
              dots = 2;
          }
        }
        that.m2m.setDotsNewNote(dots);
        if (that.m2m.setMarkedNoteDots(dots)) {
          MEIOperations_1.cleanUp(that.m2m.getCurrentMei());
          var mei = MEIConverter_1.restoreXmlIdTags(that.m2m.getCurrentMei());
          that.loadDataCallback("", mei, false);
        }
      });
    });
    this.navBarLoaded = true;
    return this;
  }
  removeListeners() {
    // No Changes in Navbar = no remove
  }
  resetModes() {
    //reset  
    if (!this.navBarLoaded) this.setListeners();
    //if(this.keyMode) this.activateKeyMode();
    if (this.clickInsertMode || this.keyMode) this.activateInsertMode(); //this.activateClickMode();
    if (this.annotationMode) this.activateAnnotationMode();
    if (this.harmonyMode) this.activateHarmonyMode();
    this.setSMHandler();
    return this;
  }
  unselectMenuItem(key) {
    var menuitem = this.container.querySelector("#" + key);
    var modeButton = this.container.querySelector("#insertMode");
    if (menuitem.classList.contains("selected")) {
      menuitem.classList.remove("selected");
      modeButton.innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
      modeButton.classList.add("empty");
      this.insertDeactivate();
      return true;
    } else {
      this.container.querySelectorAll("#insertDropdown > a").forEach(a => {
        if (a.id !== key) {
          a.classList.remove("selected");
        }
      });
      menuitem.classList.add("selected");
      modeButton.textContent = menuitem.textContent;
      modeButton.classList.remove("empty");
      return false;
    }
  }
  /////////////// GETTER/ SETTER /////////////////
  setM2M(m2m) {
    this.m2m = m2m;
    //this.selectionHandler = new SelectionHandler()
    //this.selectionHandler?.setM2M(this.m2m)
    return this;
  }
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  setScoreGraph(scoreGraph) {
    this.scoreGraph = scoreGraph;
    return this;
  }
  setDeleteHandler(deleteHandler) {
    this.deleteHandler = deleteHandler;
    return this;
  }
  setLabelHandler(labelHandler) {
    this.labelHandler = labelHandler;
    return this;
  }
  setPhantomNote() {
    if (this.phantomNoteHandler != undefined) {
      this.phantomNoteHandler.setPhantomNote().setListeners().setM2M(this.m2m);
    }
    return this;
  }
  setInsertCallback(insertCallback) {
    this.insertCallback = insertCallback;
    return this;
  }
  setDeleteCallback(deleteCallback) {
    this.deleteCallback = deleteCallback;
    return this;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setUndoAnnotationStacks(arr) {
    this.annotations.setUndoStacks(arr);
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.rootSVG = cq.getRootSVG(containerId);
    this.container = document.getElementById(containerId);
    return this;
  }
  resetCanvas() {
    if (this.annotations != undefined) {
      this.annotations.addCanvas();
    }
    return this;
  }
  getAnnotations() {
    return this.annotations;
  }
  getSMHandler() {
    return this.smHandler;
  }
  getPhantomNoteHandler() {
    return this.phantomNoteHandler;
  }
}
exports["default"] = InsertModeHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/KeyModeHandler.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/KeyModeHandler.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const mappings_1 = __webpack_require__(/*! ../utils/mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const marked = "marked";
class KeyModeHandler {
  constructor(containerId) {
    /**
     * Event handler for inserting Notes
     */
    this.noteInputHandler = function noteInputHandler(e) {
      this.noteInput(e);
    }.bind(this);
    this.pressedHandler = function pressedHandler(e) {
      this.assignKeys(e);
    }.bind(this);
    /**
     * Event Handler for any Keyboard input (except inserting)
     */
    this.keyInputHandler = function keyInputHandler(e) {
      if (!cq.hasActiveElement(this.containerId)) return;
      if (e.ctrlKey || e.metaKey) return; //prevent confusion with global keyboard functionalities
      if (this.interactionOverlay.querySelector("div[contenteditable=true]") !== null) return; // prevent navigating in scrore, when label editor is open
      if (this.scoreGraph.getCurrentNode() == undefined) return;
      if (e.shiftKey && e.key.includes("Arrow")) {
        e.preventDefault();
        this.navigateSelection(e.key);
      } else if (e.key.includes("Arrow")) {
        e.preventDefault();
        this.endSelection();
        this.navigateCursor(e.key);
      } else if (["Delete", "Backspace"].indexOf(e.key) > -1) {
        e.preventDefault();
        //this.deleteByKey(e.key)
      }
    }.bind(this);
    /**
     * Set Cursor to new position after pasting
     */
    this.pastedHandler = function pastedHandler(e) {
      var _a;
      console.log("PASTED ", e);
      this.scoreGraph.setCurrentNodeById(e.detail);
      this.cursor.definePosById((_a = this.scoreGraph.getCurrentNode()) === null || _a === void 0 ? void 0 : _a.getId());
    }.bind(this);
    this.setContainerId(containerId);
  }
  setListeners() {
    document.addEventListener("keydown", this.pressedHandler);
    document.addEventListener("keyup", this.pressedHandler);
    document.addEventListener('keydown', this.noteInputHandler);
    document.addEventListener('keydown', this.keyInputHandler);
    document.addEventListener("pasted", this.pastedHandler);
  }
  removeListeners() {
    document.removeEventListener("keydown", this.pressedHandler);
    document.removeEventListener("keyup", this.pressedHandler);
    document.removeEventListener('keydown', this.noteInputHandler);
    document.removeEventListener('keydown', this.keyInputHandler);
    document.removeEventListener("pasted", this.pastedHandler);
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  noteInput(e) {
    var _a, _b, _c, _d, _e, _f;
    if (this.container.querySelector("[contenteditable=true]")) return;
    var currentNode = this.scoreGraph.getCurrentNode();
    if (!cq.hasActiveElement(this.containerId)) return;
    if (this.musicPlayer.getIsPlaying() === true) {
      return;
    } // getIsPlaying could also be undefined
    if (mappings_1.keyCodeNoteMap.has(e.code)) {
      e.preventDefault();
      var pname = mappings_1.keyCodeNoteMap.get(e.code);
      var oct = mappings_1.octToNum.get((_a = this.container.querySelector("#octaveGroupKM .selected")) === null || _a === void 0 ? void 0 : _a.id) || "4";
      const newNote = this.createNewNote(pname, oct, null);
      if (newNote == undefined) return;
      var noteExists = false;
      var noteToDelete;
      if (document.getElementById(currentNode.getId()).closest(".chord") !== null) {
        var chordNotes = Array.from(document.getElementById(currentNode.getId()).closest(".chord").querySelectorAll(".note"));
        chordNotes.forEach(n => {
          var meiNote = this.m2m.getCurrentMei().getElementById(n.id);
          var sameOct = meiNote.getAttribute("oct") === newNote.oct;
          var samePname = meiNote.getAttribute("pname") === newNote.pname;
          if (sameOct && samePname) {
            noteExists = true;
            noteToDelete = n;
          }
        });
      }
      if (!noteExists) {
        // check if new note should replace a rest
        if (this.scoreGraph.getCurrentNode().getDocElement().classList.contains("rest")) {
          newNote.relPosX = "left";
          newNote.nearestNoteId = this.scoreGraph.getCurrentNode().getId();
          //newNote.id = this.scoreGraph.getCurrentNode().getId()
        } else if (!((_b = this.scoreGraph.getCurrentNode()) === null || _b === void 0 ? void 0 : _b.getDocElement().classList.contains("mRest")) && ((_c = this.scoreGraph.getCurrentNode()) === null || _c === void 0 ? void 0 : _c.getRight()) == null && newNote.chordElement == undefined) {
          //check if new Measure must be created 
          meiOperation.addMeasure(this.m2m.getCurrentMei());
          var currentStaff = this.m2m.getCurrentMei().getElementById(newNote.staffId);
          var staffN = currentStaff.getAttribute("n");
          newNote.staffId = currentStaff.closest("measure").nextElementSibling.querySelector("staff[n=\"" + staffN + "\"]").id;
          newNote.relPosX = "left";
          newNote.nearestNoteId = this.m2m.getCurrentMei().querySelector("#" + newNote.staffId).querySelector("mRest").id;
        } else {
          //or if ne note must be in new measure
          var oldStaffId = newNote.staffId;
          newNote.staffId = ((_f = this.m2m.getCurrentMei().getElementById((_e = (_d = this.scoreGraph.getCurrentNode()) === null || _d === void 0 ? void 0 : _d.getRight()) === null || _e === void 0 ? void 0 : _e.getId())) === null || _f === void 0 ? void 0 : _f.closest("staff").id) || newNote.staffId;
          if (oldStaffId !== newNote.staffId) {
            newNote.relPosX = "left";
            newNote.nearestNoteId = this.scoreGraph.getCurrentNode().getRight().getId();
          }
        }
        this.insertCallback(newNote, true).then(() => {
          //this.m2m.update();
          this.resetListeners();
          var currentTargetId;
          if (newNote.chordElement != undefined) {
            currentTargetId = this.rootSVG.querySelector("#" + newNote.chordElement.id).closest(".chord").id; // new chord with own ID is created, if note is added
          } else {
            currentTargetId = newNote.id;
          }
          this.scoreGraph.setCurrentNodeById(currentTargetId);
          this.musicPlayer.generateTone(newNote);
        }).catch(() => {
          //alert("your bar is too small")
        });
      } else {
        this.deleteCallback([noteToDelete]).then(() => {
          var _a;
          //this.m2m.update();
          this.resetListeners();
          this.scoreGraph.setCurrentNodeById((_a = newNote.chordElement) === null || _a === void 0 ? void 0 : _a.id);
        });
      }
    }
  }
  assignKeys(e) {
    var b = false;
    if (e.type === "keydown") {
      b = true;
    } else if (e.type === "keyup") {
      b = false;
    }
    switch (e.key) {
      case "Shift":
        this.shiftDown = b;
        break;
    }
  }
  /**
   * create a newNote
   * @param pname pitch name
   * @param oct octave
   * @param options
   * @returns
   */
  createNewNote(pname, oct, options) {
    var _a, _b;
    //get relevant staffinfo
    var nearestNodeId = (_a = this.scoreGraph.getCurrentNode()) === null || _a === void 0 ? void 0 : _a.getId();
    if (nearestNodeId == undefined) return;
    var closestStaff = ((_b = this.m2m.getCurrentMei().getElementById(nearestNodeId)) === null || _b === void 0 ? void 0 : _b.closest("staff")) || this.m2m.getCurrentMei().querySelector("measure > staff"); //asume first measure first staff
    var closestMeasure = closestStaff.closest("measure");
    var closestStaffIdx = parseInt(closestStaff.getAttribute("n")) - 1;
    var closestMeasureIdx = parseInt(closestMeasure.getAttribute("n")) - 1;
    var keysig = this.m2m.getMeasureMatrix().get(closestMeasureIdx, closestStaffIdx).keysig;
    var accids;
    var accid;
    if (keysig == undefined) {
      accids = mappings_1.keysigToNotes.get(keysig);
      accids = accids.filter(s => {
        return s === pname;
      });
      if (accids.length === 1) {
        accid = keysig.charAt(1);
      }
    }
    var targetChord;
    //if(this.container.querySelector("#chordButton")?.classList.contains("selected")){
    if (this.shiftDown) {
      targetChord = this.rootSVG.querySelector("#" + nearestNodeId);
      if ((targetChord === null || targetChord === void 0 ? void 0 : targetChord.closest(".chord")) !== null) {
        targetChord = targetChord.closest(".chord");
      }
    }
    this.setContainerId(this.containerId);
    var newNote = {
      pname: pname,
      id: random_1.uuidv4(),
      dur: this.m2m.getDurationNewNote(),
      dots: this.m2m.getDotsNewNote(),
      oct: oct,
      keysig: keysig,
      accid: accid,
      nearestNoteId: nearestNodeId,
      relPosX: "right",
      staffId: this.rootSVG.querySelector("#" + nearestNodeId).closest(".staff").id,
      chordElement: targetChord,
      rest: this.container.querySelector("#pauseNote").classList.contains("selected")
    };
    return newNote;
  }
  /**
   * Navigate through Scoregraph with Arrow Keys
   * @param direction Key Code for Arrows
   */
  navigateCursor(direction) {
    var _a, _b, _c;
    var prevNode = this.scoreGraph.getCurrentNode();
    switch (direction) {
      case "ArrowLeft":
        (_a = document.querySelectorAll(".lastAdded")) === null || _a === void 0 ? void 0 : _a.forEach(la => la.classList.remove("lastAdded"));
        this.scoreGraph.nextLeft();
        break;
      case "ArrowRight":
        (_b = document.querySelectorAll(".lastAdded")) === null || _b === void 0 ? void 0 : _b.forEach(la => la.classList.remove("lastAdded"));
        this.scoreGraph.nextRight();
        break;
      default:
        return;
    }
    if (this.scoreGraph.getCurrentNode() == undefined) return;
    this.container.querySelectorAll(".marked").forEach(m => m.classList.remove("marked"));
    (_c = this.container.querySelector("#" + prevNode.getId())) === null || _c === void 0 ? void 0 : _c.classList.remove("lastAdded");
    var currEl = this.container.querySelector("#" + this.scoreGraph.getCurrentNode().getId());
    currEl.classList.add("marked");
    if (currEl.closest(".chord") !== null) {
      currEl.querySelectorAll(".note, .notehead").forEach(n => n.classList.add("marked"));
    }
  }
  /**
   * End selection in Keyboardmode
   */
  endSelection() {
    this.startSelect = undefined;
    if (this.selectRect !== null && typeof this.selectRect !== "undefined") {
      this.selectRect.remove();
      this.rootSVG.querySelectorAll(".marked").forEach(m => {
        m.classList.remove("marked");
      });
    }
    this.selectRect = undefined;
  }
  /**
   *
   * @param elementId Id of the current Element to be set in the ScoreGrap
   */
  setCurrentNodeScoreGraph(elementId = null) {
    // if(this.scoreGraph.getCurrentNode() == undefined || elementId === null){
    //   var nextEl = this.cursor.getNextElement()
    //   if(nextEl == undefined) return
    //   if(nextEl.classList.contains("staff")){
    //     nextEl = nextEl.querySelector(".layer")
    //   }
    //   this.scoreGraph.setCurrentNodeById(nextEl.id)
    // }else if(elementId !== null){
    //   this.scoreGraph.setCurrentNodeById(elementId)
    // }
    this.scoreGraph.setCurrentNodeById(elementId);
    return this;
  }
  /**
   * Delete next element depending on Keyboad input (Backspace: left, Delete: right)
   * @param key "Backspace" or "Delete"
   */
  deleteByKey(key) {
    var _a, _b;
    var elementToDelete;
    var currNodeId;
    var isFocusedChord = ((_a = this.container.querySelector("#chordButton")) === null || _a === void 0 ? void 0 : _a.classList.contains("selected")) ? true : false;
    if (isFocusedChord) {
      key = "Backspace";
    }
    switch (key) {
      case "Delete":
      //elementToDelete = this.rootSVG.querySelector("#" + this.scoreGraph.getCurrentNode().getRight().getId())
      //break;
      case "Backspace":
        elementToDelete = this.rootSVG.querySelector("#" + this.scoreGraph.getCurrentNode().getId());
        if (this.scoreGraph.getCurrentNode().isLayer()) {
          elementToDelete = this.rootSVG.querySelector("#" + this.scoreGraph.getCurrentNode().getLeft().getId());
          this.navigateCursor("ArrowLeft");
        }
        if (!((_b = this.scoreGraph.getCurrentNode().getLeft()) === null || _b === void 0 ? void 0 : _b.isBOL())) {
          this.navigateCursor("ArrowLeft");
        } else {
          this.navigateCursor("ArrowRight");
        }
        break;
    }
    currNodeId = this.scoreGraph.getCurrentNode().getId();
    // if(this.rootSVG.querySelector(".marked") === null){
    //   this.deleteCallback([elementToDelete]).then(() => {
    //     this.m2m.update();
    //     this.resetListeners()
    //     this.cursor.definePosById(currNodeId)
    //   })
    // }
  }
  ///// GETTER / SETTER////////////////
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  setScoreGraph(scoreGraph) {
    this.scoreGraph = scoreGraph;
    return this;
  }
  setCurrentMEI(mei) {
    this.currentMEI = mei;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.rootSVG = cq.getRootSVG(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.container = document.getElementById(id);
    return this;
  }
  setInsertCallback(insertCallback) {
    this.insertCallback = insertCallback;
    return this;
  }
  setDeleteCallback(deleteCallback) {
    this.deleteCallback = deleteCallback;
    return this;
  }
}
exports["default"] = KeyModeHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/LabelHandler.js":
/*!*******************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/LabelHandler.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const meiConverter = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const HarmonyLabel_1 = __webpack_require__(/*! ../gui/HarmonyLabel */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/HarmonyLabel.js");
const TempoLabel_1 = __webpack_require__(/*! ../gui/TempoLabel */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/TempoLabel.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const labelClasses = ["harm", "tempo", "note", "chord", "fb"];
const labelSelectors = "." + labelClasses.join(",.");
class LabelHandler {
  constructor(containerId) {
    this.setHarmonyLabelHandlerClick = function setHarmonyLabelHandler(e) {
      if (this.container.classList.contains("harmonyMode")) {
        this.harmonyLabelHandler(e);
      }
    }.bind(this);
    this.setTempoLabelHandlerClick = function setTempoLabelHandlerClick(e) {
      this.tempoLabelHandler(e);
    }.bind(this);
    this.setHarmonyLabelHandlerKey = function setHarmonyLabelHandler(e) {
      if (!cq.hasActiveElement(this.containerId)) return;
      var isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
      var ctrl = e.ctrlKey;
      if (isMac) {
        ctrl = e.metaKey;
      }
      if (ctrl) {
        if (e.key === "k" && Array.from(this.rootSVG.querySelectorAll(".note, .chord, .rest, .mrest")).some(el => el.classList.contains("marked"))) {
          e.preventDefault();
          this.harmonyLabelHandler(e);
        }
      }
    }.bind(this);
    this.activateHarmonyHighlight = function highlightNextHarmonyHandler(e) {
      if (e.type === "mouseleave" && !this.isGlobal) {
        this.interactionOverlay.addEventListener("mousemove", this.activateHarmonyHighlight);
      }
      if (!this.isGlobal) {
        this.highlightNextHarmony(e);
      }
    }.bind(this);
    this.deactivateHarmonyHighlight = function deactivateHighlight(e) {
      // document.querySelectorAll(".marked").forEach(m => {
      //     m.classList.remove("marked")
      // })
      this.interactionOverlay.removeEventListener("mousemove", this.activateHarmonyHighlight);
    }.bind(this);
    this.modifyLabelHandler = function modifyLabelHandler(e) {
      e.stopImmediatePropagation();
      this.rootSVG.querySelectorAll(".marked").forEach(m => {
        var _a;
        m.classList.remove("marked");
        (_a = this.interactionOverlay.querySelector("*[refId=" + m.id + "]")) === null || _a === void 0 ? void 0 : _a.classList.remove("marked");
      });
      this.modifyLabel(e);
    }.bind(this);
    /**
     * Wrapper function for submitlabel()
     */
    this.submitLabelHandler = function submitHandler(e) {
      if (!cq.hasActiveElement(this.containerId)) return;
      if (e.key === "Enter" && this.labelCanvas.hasChildNodes()) {
        e.target.removeEventListener("keydown", this.submitLabelHandler);
        this.submitLabel();
      }
    }.bind(this);
    this.typeLabelHandler = function (e) {
      if (!cq.hasActiveElement(this.containerId)) return;
      var t = e.target;
      var parent = t.parentElement;
      var tWidth = t.getBoundingClientRect().width.toString();
      var tHeigth = t.getBoundingClientRect().height.toString();
      parent.setAttribute("width", tWidth);
      parent.setAttribute("height", tHeigth);
    }.bind(this);
    this.closeModifyWindowHandler = function closeModifyWindow(e) {
      if (e instanceof KeyboardEvent) {
        if (e.key === "Escape") {
          this.closeModifyWindow();
        }
      } else if (e instanceof MouseEvent && !e.target.classList.contains("labelFO")) {
        this.closeModifyWindow();
      }
    }.bind(this);
    this.setContainerId(containerId);
    this.addCanvas();
  }
  /**
   * Set own canvas for manipulating labels
   */
  addCanvas() {
    this.rootBBox = this.interactionOverlay.getBoundingClientRect();
    var rootWidth = this.rootBBox.width.toString();
    var rootHeigth = this.rootBBox.height.toString();
    var vb = this.interactionOverlay.getAttribute("viewBox");
    if (this.labelCanvas == undefined) {
      this.labelCanvas = document.createElementNS(constants_1.constants._SVGNS_, "svg");
      this.labelCanvas.setAttribute("id", "labelCanvas");
      this.labelCanvas.classList.add("canvas");
      //this.labelCanvas.setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "))
    }

    this.labelCanvas.setAttribute("viewBox", vb);
    this.interactionOverlay.insertBefore(this.labelCanvas, this.interactionOverlay.firstChild);
    return this;
  }
  /**
   * Create label instances for elements already present in the score.
   */
  initLabels() {
    this.labels = new Map();
    this.rootSVG.querySelectorAll(labelSelectors).forEach(el => {
      var _a, _b;
      var className = labelClasses.filter(l => this.rootSVG.querySelector("#" + el.id).classList.contains(l))[0];
      var inputString;
      switch (className) {
        case "harm":
          inputString = (_a = Array.from(this.rootSVG.querySelector("#" + el.id).querySelectorAll(".text")).filter(el => el.textContent !== null)[0]) === null || _a === void 0 ? void 0 : _a.textContent.trim();
          this.labels.set(el.id, new HarmonyLabel_1.default(inputString, el.id, this.currentMEI));
          break;
        case "tempo":
          inputString = ((_b = Array.from(this.rootSVG.querySelector("#" + el.id).querySelectorAll(".text")).filter(e => /\d+/.test(e.textContent))[0]) === null || _b === void 0 ? void 0 : _b.textContent.match(/\d+/).join("")) || "";
          this.labels.set(el.id, new TempoLabel_1.default(inputString, el.id, this.currentMEI));
          break;
      }
    });
  }
  setListeners() {
    document.querySelectorAll(".sylTextRect").forEach(s => {
      s.remove();
    });
    // isGlobal = false: Editor is not in harmony mode
    if (!this.isGlobal) {
      this.interactionOverlay.addEventListener("click", this.setHarmonyLabelHandlerClick, true);
      this.interactionOverlay.addEventListener("mousemove", this.activateHarmonyHighlight);
      this.interactionOverlay.addEventListener("keydown", this.closeModifyWindowHandler, true);
    }
    this.interactionOverlay.addEventListener("click", this.closeModifyWindowHandler);
    document.addEventListener("keydown", this.setHarmonyLabelHandlerKey);
    this.interactionOverlay.querySelectorAll(labelSelectors).forEach(h => {
      h.addEventListener("mouseover", this.deactivateHarmonyHighlight);
      h.addEventListener("mouseleave", this.activateHarmonyHighlight);
      h.addEventListener("dblclick", this.modifyLabelHandler);
    });
    this.interactionOverlay.querySelectorAll(".harm, .label, .manipulator").forEach(h => h.addEventListener("click", e => e.stopImmediatePropagation())); // prevent inseerting notes, wenn cursor is over a harm symbol
    return this;
  }
  removeListeners() {
    this.interactionOverlay.removeEventListener("click", this.closeModifyWindowHandler);
    this.interactionOverlay.removeEventListener("click", this.setHarmonyLabelHandlerClick);
    document.removeEventListener("keydown", this.setHarmonyLabelHandlerKey);
    this.interactionOverlay.removeEventListener("mousemove", this.activateHarmonyHighlight);
    this.interactionOverlay.removeEventListener("keydown", this.closeModifyWindowHandler);
    this.interactionOverlay.querySelectorAll(labelSelectors).forEach(h => {
      h.removeEventListener("mouseenter", this.deactivateHarmonyHighlight);
      h.removeEventListener("mouseleave", this.activateHarmonyHighlight);
      h.removeEventListener("dblclick", this.modifyLabelHandler);
    });
    return this;
  }
  // HARMONY LABELS
  /**
   * Open Inputbox for (first) selected Note
   */
  harmonyLabelHandler(e) {
    var nextNote = this.rootSVG.querySelector(".note.marked, .chord.marked");
    if (nextNote === null) {
      return;
    }
    var nextNoteBBox = nextNote.getBoundingClientRect();
    var staffBBox = nextNote.closest(".staff").getBoundingClientRect();
    var canvasMatrix = this.labelCanvas.getScreenCTM().inverse();
    var ptNoteLT = new DOMPoint(nextNoteBBox.left, nextNoteBBox.top);
    ptNoteLT = ptNoteLT.matrixTransform(canvasMatrix);
    var ptNoteRB = new DOMPoint(nextNoteBBox.right, nextNoteBBox.bottom);
    ptNoteRB = ptNoteRB.matrixTransform(canvasMatrix);
    var ptNoteWidth = Math.abs(ptNoteRB.x - ptNoteLT.x);
    var ptNoteHeight = Math.abs(ptNoteRB.y - ptNoteLT.y);
    var ptStaffLT = new DOMPoint(staffBBox.left, staffBBox.top);
    ptStaffLT = ptStaffLT.matrixTransform(canvasMatrix);
    var ptStaffRB = new DOMPoint(staffBBox.right, staffBBox.bottom);
    ptStaffRB = ptStaffRB.matrixTransform(canvasMatrix);
    var ptStaffWidth = Math.abs(ptStaffRB.x - ptStaffLT.x);
    var ptStaffHeight = Math.abs(ptStaffRB.y - ptStaffLT.y);
    var posx = ptNoteLT.x - ptNoteWidth / 2; //nextNoteBBox.left - nextNoteBBox.width/2 - window.scrollX - rootBBox.x - root.scrollLeft
    var posy = ptStaffRB.y; //staffBBox.bottom - window.scrollY - rootBBox.y - root.scrollLeft
    var tstamp = meiOperation.getElementTimestampById(nextNote.id, this.currentMEI);
    var existsTstamp = Array.from(this.currentMEI.getElementById(nextNote.id).closest("measure").querySelectorAll("harm")).some(h => {
      if (h.getAttribute("tstamp") !== null) {
        return parseFloat(h.getAttribute("tstamp")) === tstamp;
      } else {
        return false;
      }
    });
    var hasStartId = this.currentMEI.querySelector("harm[startid=\"" + nextNote.id + "\"]") !== null;
    var isEmptyLabelCanvas = !this.labelCanvas.hasChildNodes();
    if (!hasStartId && isEmptyLabelCanvas && !existsTstamp) {
      this.createInputBox(posx, posy, nextNote.id, "harm");
    } else if (!isEmptyLabelCanvas) {
      this.closeModifyWindow();
    }
  }
  setLabel(labelString, bboxId) {
    var className = labelClasses.filter(l => this.rootSVG.querySelector("#" + bboxId).classList.contains(l))[0];
    var label;
    switch (className) {
      case "note":
      case "chord":
      case "harm":
        label = new HarmonyLabel_1.default(labelString, bboxId, this.currentMEI);
        break;
      case "tempo":
        label = new TempoLabel_1.default(labelString, bboxId, this.currentMEI);
        break;
      default:
        return;
    }
    if (this.labels.get(label.getElement().id) == undefined) {
      this.labels.set(label.getElement().id, label);
    }
    return label;
  }
  highlightNextHarmony(e, active = true) {
    if (!active) {
      return;
    }
    var pt = new DOMPoint(e.clientX, e.clientY);
    var rootMatrix = this.labelCanvas.getScreenCTM().inverse();
    pt = pt.matrixTransform(rootMatrix);
    var posx = pt.x;
    var posy = pt.y;
    var nextNoteBBox = this.m2m.findScoreTarget(posx, posy);
    if (nextNoteBBox == undefined) {
      return;
    }
    var el = this.rootSVG.querySelector("#" + nextNoteBBox.id);
    if (el.closest(".chord") !== null) {
      el = el.closest(".chord");
    }
    if (!el.classList.contains("marked")) {
      this.rootSVG.querySelectorAll(".marked").forEach(m => {
        var _a;
        m.classList.remove("marked");
        (_a = this.interactionOverlay.querySelector("[refId=" + m.id + "]")) === null || _a === void 0 ? void 0 : _a.classList.remove("marked");
      });
      el.classList.add("marked");
    }
  }
  /**
   * modify existing label
   * @param e
   * @returns
   */
  modifyLabel(e) {
    var _a, _b;
    this.closeModifyWindow();
    var target = e.target;
    if (target.id === "") {
      var refId = (_a = target.closest("[refId]")) === null || _a === void 0 ? void 0 : _a.getAttribute("refId");
      if (refId === null) return;
      target = (_b = this.rootSVG.querySelector("#" + refId)) === null || _b === void 0 ? void 0 : _b.closest(".harm");
    }
    target = target.closest(labelSelectors);
    target.setAttribute("visibility", "hidden");
    var targetBBox = target.getBoundingClientRect();
    var pt = new DOMPoint(targetBBox.x, targetBBox.y);
    var rootMatrix = this.labelCanvas.getScreenCTM().inverse();
    pt = pt.matrixTransform(rootMatrix);
    var posx = pt.x - 5; //targetBBox.x - window.scrollX - rootBBox.left - root.scrollLeft //coordinates.adjustToPage(e.pageX, "x")
    var posy = pt.y - 5; //targetBBox.y - window.scrollY - rootBBox.top - root.scrollTop //coordinates.adjustToPage(e.pageY, "y")
    // prevent double input boxes for same Element
    this.elementId = target.id;
    if (this.container.querySelector("*[refElementId=\"" + target.id + "\"]") !== null) {
      return;
    }
    var className = labelClasses.filter(l => target.classList.contains(l))[0]; //assume only one output, therefore alway return idx 0  
    this.createInputBox(posx, posy, target.id, className);
  }
  /**
   * Close the modifier Window and make the hidden Element visible again
   */
  closeModifyWindow() {
    try {
      Array.from(this.labelCanvas.children).forEach(c => {
        c === null || c === void 0 ? void 0 : c.remove();
      });
    } catch (_a) {}
    // clean MEI from empty harm Elements
    this.currentMEI.querySelectorAll(labelClasses.join(",")).forEach(h => {
      var _a;
      if (h.id === "") return;
      (_a = this.container.querySelector("#" + h.id)) === null || _a === void 0 ? void 0 : _a.setAttribute("visibility", "visible");
    });
  }
  /**
   * Save label information in current MEI
   */
  submitLabel() {
    var labelDiv = this.labelCanvas.getElementsByClassName("labelDiv")[0];
    var text = labelDiv.textContent;
    var refElementClass = labelClasses.filter(l => this.container.querySelector("#" + labelDiv.closest("g").getAttribute("refElementId")).classList.contains(l))[0]; // assume only one result
    var label = this.labels.get(labelDiv.closest("g").getAttribute("refElementId"));
    if (refElementClass === "harm") {
      // change existing harm
      let harmLabel = label;
      harmLabel.modifyLabel(text);
      //this.currentMEI.getElementById(harmLabel.getElement().id).replaceWith(harmLabel.getElement())
    } else if (["note", "chord"].some(cn => refElementClass === cn)) {
      //create new harm
      let harmLabel = this.setLabel(labelDiv.textContent, labelDiv.closest("g").getAttribute("refElementId"));
      this.currentMEI.getElementById(harmLabel.getStartId()).closest("measure").append(harmLabel.getElement());
    } else if (refElementClass === "tempo") {
      // change existing tempo
      var tempoLabel = label;
      tempoLabel.modifyLabel(text);
    }
    this.closeModifyWindow();
    meiOperation.cleanUp(this.currentMEI);
    var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
    this.loadDataCallback("", mei, false).then(() => {
      this.reset();
    });
  }
  createInputBox(posx, posy, targetId, targetClass) {
    var _a;
    var textGroup = document.createElementNS(constants_1.constants._SVGNS_, "g");
    textGroup.setAttribute("id", random_1.uuidv4());
    textGroup.setAttribute("refElementId", targetId);
    var text = document.createElementNS(constants_1.constants._SVGNS_, "svg");
    text.classList.add("labelText");
    var textForeignObject = document.createElementNS(constants_1.constants._SVGNS_, "foreignObject");
    textForeignObject.classList.add("labelFO");
    var textDiv = document.createElement("div");
    textDiv.setAttribute("contenteditable", "true");
    switch (targetClass) {
      case "harm":
        textDiv.textContent = ((_a = this.labels.get(targetId)) === null || _a === void 0 ? void 0 : _a.getInput()) || "";
        break;
      case "tempo":
        textDiv.textContent = Array.from(this.container.querySelector("#" + targetId).querySelectorAll(".text")).filter(el => /\d+/.test(el.textContent))[0].textContent.match(/\d+/).join("") || "";
        break;
      default:
        return;
    }
    textDiv.classList.add("labelDiv");
    text.append(textForeignObject);
    this.container.appendChild(textDiv);
    var rectPadding = 5;
    text.setAttribute("x", (posx + rectPadding).toString());
    text.setAttribute("y", posy.toString());
    textForeignObject.setAttribute("x", "0");
    textForeignObject.setAttribute("y", "0");
    textForeignObject.setAttribute("height", (textDiv.clientHeight + 2 * rectPadding).toString());
    textForeignObject.setAttribute("width", (textDiv.clientHeight + 2 * rectPadding).toString());
    this.labelCanvas.appendChild(textGroup);
    textGroup.appendChild(text);
    textForeignObject.appendChild(textDiv);
    // Special Listeners while Editing Harmonies
    var that = this;
    textDiv.addEventListener("focus", function () {
      that.removeListeners();
      that.musicPlayer.removePlayListener();
    });
    textDiv.addEventListener("blur", function () {
      textDiv.dispatchEvent(new KeyboardEvent("keydown", {
        "key": "Enter"
      })); // trigger submitLabel when bluring
      that.setListeners();
      that.musicPlayer.setPlayListener();
    });
    textDiv.addEventListener("keydown", this.submitLabelHandler);
    textDiv.addEventListener("keydown", this.typeLabelHandler);
    textDiv.focus();
  }
  getTimestamp(note) {
    var layer = note.closest("layer");
    var elements = Array.from(layer.querySelectorAll("*[dur]"));
    elements = elements.filter((v, i) => i <= elements.indexOf(note));
    var tstamp = 0;
    elements.forEach(e => {
      var dur = parseInt(e.getAttribute("dur"));
      tstamp += 4 / dur;
      var dots = e.getAttribute("dots");
      var add = dur;
      if (dots !== null) {
        for (var i = 0; i < parseInt(dots); i++) {
          add = add / 2;
          tstamp += add;
        }
      }
    });
    return tstamp;
  }
  reset() {
    this.setContainerId(this.containerId);
    this.addCanvas();
    this.initLabels();
    this.removeListeners();
    this.setListeners();
    return this;
  }
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setCurrentMEI(mei) {
    this.currentMEI = mei;
    return this;
  }
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  setGlobal(global) {
    this.isGlobal = global;
    return this;
  }
  getGlobal() {
    return this.isGlobal;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.container = document.getElementById(id);
    this.rootSVG = cq.getRootSVG(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    return this;
  }
}
exports["default"] = LabelHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ModHandler.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ModHandler.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const random_1 = __webpack_require__(/*! ../utils/random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const meiConverter = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const modSelector = ".slur, .tie, .accid";
/**
 * Handler for all options which could modulate the given score. These functions are related to all buttons in the sidebar and toolbar
 */
class ModHandler {
  constructor(containerId) {
    /** Wrapperfunction for Eventslistener */
    this.connectNotesFunction = function connectNotesFunction(e) {
      e.preventDefault();
      this.connectNotes(e);
    }.bind(this);
    /** Wrapperfunction for Eventslistener */
    this.organizeBeamsFunction = function organizeBeamsFunction(e) {
      e.preventDefault();
      this.organizeBeams(e);
    }.bind(this);
    this.alterFunction = function alterFunction(e) {
      e.preventDefault();
      e.stopPropagation();
      this.alterNotes(e);
    }.bind(this);
    this.setContainerId(containerId);
    this.tieNotesButton = this.container.querySelector("#tieNotes");
    this.organizeBeamsButton = this.container.querySelector("#organizeBeams");
    var a = this.alterUpButton = this.container.querySelector("#alterUp");
    var b = this.alterDownButton = this.container.querySelector("#alterDown");
    var c = this.alterNeutralButton = this.container.querySelector("#alterNeutral");
    var d = this.alterDUpButton = this.container.querySelector("#alterDUp");
    var e = this.alterDDownButton = this.container.querySelector("#alterDDown");
    this.alterButtons = [a, b, c, d, e];
  }
  setListeners() {
    this.tieNotesButton.addEventListener("click", this.connectNotesFunction);
    this.organizeBeamsButton.addEventListener("click", this.organizeBeamsFunction);
    this.alterButtons.forEach(ab => {
      ab.addEventListener("click", this.alterFunction);
    });
    this.makeScoreElementsClickable();
  }
  removeListeners() {
    this.tieNotesButton.removeEventListener("click", this.connectNotesFunction);
    this.organizeBeamsButton.removeEventListener("click", this.organizeBeamsFunction);
    this.alterButtons.forEach(ab => {
      ab.removeEventListener("click", this.alterFunction);
    });
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
    return this;
  }
  /**
   * Make slur or tie for 2 or more elements when tie button is clicked
   * Tie, only when there are two selected elemets which are the same pitch
   * Delete otherwise
   * @param e
   */
  connectNotes(e) {
    var markedElements = Array.from(this.rootSVG.querySelectorAll(".note.marked"));
    markedElements = markedElements.filter(me => me.closest(".layer").getAttribute("n") === markedElements[0].closest(".layer").getAttribute("n"));
    if (markedElements.length <= 1) {
      return;
    }
    var makeSlur = markedElements.length > 2;
    //if(!makeSlur && markedElements.length > 1){ // assert only 2 items
    var leftId = markedElements[0].id;
    var rightId = markedElements.reverse()[0].id;
    var leftMeiElement = this.currentMEI.getElementById(leftId);
    var rightMeiElement = this.currentMEI.getElementById(rightId);
    var leftpname = leftMeiElement.getAttribute("pname");
    var leftoct = leftMeiElement.getAttribute("oct");
    var leftAccid = leftMeiElement.getAttribute("accid") || leftMeiElement.getAttribute("accid.ges");
    var rightpname = rightMeiElement.getAttribute("pname");
    var rightoct = rightMeiElement.getAttribute("oct");
    var rightAccid = rightMeiElement.getAttribute("accid") || rightMeiElement.getAttribute("accid.ges");
    if (!(leftpname === rightpname && leftoct === rightoct && leftAccid === rightAccid)) {
      makeSlur = true;
    }
    //}
    var connections = this.currentMEI.querySelectorAll("tie, slur");
    var deleted = false;
    connections.forEach(c => {
      var sid = c.getAttribute("startid").replace("#", "");
      var eid = c.getAttribute("endid").replace("#", "");
      if (sid === leftId && eid === rightId) {
        c.remove();
        deleted = true;
      }
    });
    if (!deleted) {
      var tieElement;
      if (makeSlur) {
        tieElement = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "slur");
      } else {
        tieElement = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "tie");
      }
      tieElement.setAttribute("startid", "#" + leftId);
      tieElement.setAttribute("endid", "#" + rightId);
      tieElement.setAttribute("id", random_1.uuidv4());
      this.currentMEI.getElementById(leftId).closest("measure").append(tieElement);
    }
    var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
    this.loadDataCallback("", mei, false);
  }
  /**
   * Pack selected elements in own beam element. Only for dur > 4
   * @param e
   */
  organizeBeams(e) {
    var markedElements = Array.from(this.rootSVG.querySelectorAll(".marked")); // (".note.marked, .chord.marked"))
    markedElements = markedElements.filter(me => {
      var isInLayer = me.closest(".layer").getAttribute("n") === markedElements[0].closest(".layer").getAttribute("n");
      var hasDur = this.currentMEI.getElementById(me.id) !== null ? this.currentMEI.getElementById(me.id).getAttribute("dur") !== null : false;
      return isInLayer && hasDur;
    });
    if (markedElements.length === 0) {
      return;
    }
    var haveRightDur = markedElements.filter(me => {
      var _a;
      var dur = (_a = this.currentMEI.getElementById(me.id)) === null || _a === void 0 ? void 0 : _a.getAttribute("dur");
      return parseInt(dur) > 4;
    }).length >= 2;
    if (haveRightDur) {
      var firstMeiElement = this.currentMEI.getElementById(markedElements[0].id);
      var newBeam = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "beam");
      var oldBeam = firstMeiElement.closest("beam");
      firstMeiElement.parentElement.insertBefore(newBeam, firstMeiElement);
      markedElements.forEach(me => {
        newBeam.append(this.currentMEI.getElementById(me.id));
      });
      if (oldBeam !== null && oldBeam.childElementCount > 1) {
        var beamCandidates = new Array();
        var bc;
        oldBeam.querySelectorAll(":scope > *").forEach(cn => {
          if (cn.tagName.toLowerCase() === "beam") {
            if (beamCandidates.length > 0) {
              if (beamCandidates.length === 1) {
                bc = beamCandidates[0];
              } else if (beamCandidates.length > 1) {
                bc = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "beam");
                beamCandidates.forEach(b => bc.append(b));
              }
              oldBeam.parentElement.insertBefore(bc, oldBeam);
              beamCandidates = new Array();
            }
            oldBeam.parentElement.insertBefore(cn, oldBeam);
          } else {
            beamCandidates.push(cn);
          }
        });
        if (beamCandidates.length > 0) {
          // if array is still full after loop
          if (beamCandidates.length === 1) {
            bc = beamCandidates[0];
          } else if (beamCandidates.length > 1) {
            bc = this.currentMEI.createElementNS(constants_1.constants._MEINS_, "beam");
            beamCandidates.forEach(b => bc.append(b));
          }
          oldBeam.parentElement.insertBefore(bc, oldBeam);
        }
      } else if ((oldBeam === null || oldBeam === void 0 ? void 0 : oldBeam.childElementCount) === 1) {
        if (oldBeam.firstElementChild.tagName.toLowerCase() === "beam") {
          Array.from(oldBeam.firstElementChild.children).forEach(c => {
            oldBeam.parentElement.insertBefore(c, oldBeam);
          });
        } else {
          oldBeam.parentElement.insertBefore(oldBeam.firstElementChild, oldBeam);
        }
        oldBeam.remove();
      }
      meiOperation.cleanUp(this.currentMEI);
      var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
      this.loadDataCallback("", mei, false);
    }
  }
  /**
   * Alter Notes (accid) according to button.
   * @param e
   * @returns
   */
  alterNotes(e) {
    var target = e.target;
    var accidSig;
    switch (target.id) {
      case "alterUp":
        accidSig = "s";
        break;
      case "alterDown":
        accidSig = "f";
        break;
      case "alterDUp":
        accidSig = "ss";
        break;
      case "alterDDown":
        accidSig = "ff";
        break;
      case "alterNeutral":
        accidSig = "n";
        break;
      default:
        console.error(target.id, "No such option for accid alteration");
        return;
    }
    this.rootSVG.querySelectorAll(".note.marked").forEach(nm => {
      var meiElement = this.currentMEI.getElementById(nm.id);
      meiElement.setAttribute("accid", accidSig);
      meiElement.removeAttribute("accid.ges");
    });
    var mei = meiConverter.restoreXmlIdTags(this.currentMEI);
    meiOperation.adjustAccids(mei);
    this.loadDataCallback("", mei, false);
  }
  /**
   * Make Score Elements Clickable (and mark them), which are important for functions in the modulation toolbar group
   * @returns this
   */
  makeScoreElementsClickable() {
    var that = this;
    cq.getInteractOverlay(this.containerId).querySelectorAll(modSelector).forEach(c => {
      c.addEventListener("click", function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        that.rootSVG.querySelectorAll(modSelector).forEach(c => c.classList.remove("marked"));
        var originSVG = that.rootSVG.querySelector("#" + this.getAttribute("refId"));
        if (originSVG.classList.contains("marked")) {
          originSVG.classList.remove("marked");
        } else {
          originSVG.classList.add("marked");
        }
      });
    });
  }
  //GETTER/ SETTER
  setCurrentMEI(mei) {
    this.currentMEI = mei;
    return this;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.rootSVG = cq.getRootSVG(containerId);
    this.container = document.getElementById(containerId);
    return this;
  }
}
exports["default"] = ModHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/NoteDragHandler.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/NoteDragHandler.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const interactjs_1 = __webpack_require__(/*! interactjs */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/interactjs/dist/interact.min.js");
/**
 * Class that handles insert mode, events, and actions.
 */
class NoteDragHandler {
  constructor(containerId) {
    this.setContainerId(containerId);
  }
  setListeners() {
    var that = this;
    this.noteDragListener = interactjs_1.default("#" + this.containerId + " #interactionOverlay .notehead rect").draggable({
      startAxis: "y",
      lockAxis: "y",
      listeners: {
        move: this.dragNote.bind(this),
        end(event) {
          that.deleteTempDistances();
          that.insertCallback(that.newNote, true);
        }
      },
      modifiers: [interactjs_1.default.modifiers.restrictRect({
        endOnly: true
      })]
    });
  }
  removeListeners() {
    var _a;
    (_a = this.noteDragListener) === null || _a === void 0 ? void 0 : _a.unset();
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
    return this;
  }
  deleteTempDistances() {
    var _a;
    (_a = cq.getInteractOverlay(this.containerId)) === null || _a === void 0 ? void 0 : _a.querySelectorAll("*[distY]").forEach(d => {
      d.removeAttribute("distY");
      d.classList.remove("moving");
    });
  }
  dragNote(e) {
    var _a;
    var noteHeadBBox = e.target;
    this.noteDragEvent = new MouseEvent("draggingNote", e);
    noteHeadBBox.dispatchEvent(this.noteDragEvent);
    var refNote = cq.getRootSVG(this.containerId).querySelector("#" + noteHeadBBox.parentElement.getAttribute("refId")).closest(".note");
    var note = cq.getInteractOverlay(this.containerId).querySelector("*[refId=\"" + refNote.id + "\"] rect");
    if (!noteHeadBBox.classList.contains("moving")) noteHeadBBox.classList.add("moving");
    var headPos = this.newPos(noteHeadBBox, e);
    this.m2m.defineNote(headPos.x, headPos.y, {});
    this.newNote = this.m2m.getNewNote();
    if (refNote.closest(".chord") !== null) {
      this.newNote.chordElement = refNote.closest(".chord");
      (_a = this.currentMEI.querySelector("#" + refNote.id)) === null || _a === void 0 ? void 0 : _a.remove();
    }
  }
  newPos(target, e) {
    var pt = coordinates.transformToDOMMatrixCoordinates(e.clientX, e.clientY, target.closest("*[viewBox]"));
    var edy = pt.y;
    var ptDist = coordinates.transformToDOMMatrixCoordinates(target.getBoundingClientRect().x, target.getBoundingClientRect().y, target.closest("*[viewBox]"));
    var distY = parseFloat(target.getAttribute('distY')) || edy - ptDist.y;
    target.setAttribute("distY", distY.toString());
    target.setAttribute("y", (edy - distY).toString());
    return {
      x: pt.x,
      y: pt.y
    };
  }
  //////////////// GETTER/ SETTER ////////////
  setMusicPlayer(musicPlayer) {
    this.musicPlayer = musicPlayer;
    return this;
  }
  setCurrentMEI(xmlDoc) {
    this.currentMEI = xmlDoc;
    return this;
  }
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setInsertCallback(insertCallback) {
    this.insertCallback = insertCallback;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    return this;
  }
}
exports["default"] = NoteDragHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/PhantomElementHandler.js":
/*!****************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/PhantomElementHandler.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const PhantomElement_1 = __webpack_require__(/*! ../gui/PhantomElement */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/PhantomElement.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
class PhantomElementHandler {
  constructor(containerId) {
    this.trackMouseHandler = function handler(e) {
      var that = this;
      that.trackMouse(e);
    }.bind(this);
    this.timeMarkerHandler = function timeMarkerHandler(e) {
      this.drawMarkers(e);
    }.bind(this);
    this.setContainerId(containerId);
    this.addCanvas();
    this.phantom = new PhantomElement_1.default("note", containerId);
    this.isTrackingMouse = false;
  }
  addCanvas() {
    this.rootBBox = this.rootSVG.getBoundingClientRect();
    var rootWidth = this.rootBBox.width.toString();
    var rootHeigth = this.rootBBox.height.toString();
    if (this.phantomCanvas == undefined) {
      this.phantomCanvas = document.createElementNS(constants_1.constants._SVGNS_, "svg");
      this.phantomCanvas.setAttribute("id", "phantomCanvas");
    }
    this.interactionOverlay.insertBefore(this.phantomCanvas, this.interactionOverlay.firstChild);
  }
  setListeners() {
    this.interactionOverlay.addEventListener("mousemove", this.trackMouseHandler);
    this.interactionOverlay.querySelectorAll(".notehead rect").forEach(n => n.addEventListener("draggingNote", this.trackMouseHandler));
    // Listener just for staves
    this.interactionOverlay.querySelectorAll(".staffLine").forEach(element => {
      element.addEventListener('click', this.trackMouseHandler);
    });
    this.interactionOverlay.querySelectorAll(".staff").forEach(s => {
      s.addEventListener("currStaffChanged", this.timeMarkerHandler);
    });
    return this;
  }
  setPhantomLineListeners() {
    this.interactionOverlay.querySelectorAll(".phantomLine").forEach(element => {
      element.addEventListener('click', this.trackMouseHandler);
    });
  }
  removeListeners() {
    this.interactionOverlay.removeEventListener("mousemove", this.trackMouseHandler);
    this.interactionOverlay.querySelectorAll(".notehead rect").forEach(n => n.removeEventListener("draggingNote", this.trackMouseHandler));
    this.interactionOverlay.querySelectorAll(".staff").forEach(s => {
      s.removeEventListener("currStaffChanged", this.timeMarkerHandler);
    });
    this.interactionOverlay.querySelectorAll(".staffLine").forEach(element => {
      element.removeEventListener('click', this.trackMouseHandler);
      clearInterval(this.trackMouseHandler);
    });
    if (this.phantom != undefined) {
      this.phantom.removePhantomNote();
      this.phantom = undefined;
    }
    return this;
  }
  removePhantomLineListeners() {
    this.interactionOverlay.querySelectorAll(".phantomLine").forEach(element => {
      element.removeEventListener('click', this.trackMouseHandler);
    });
  }
  /**
   * Draw circle under mouse cursor
   * @param e
   */
  trackMouse(e) {
    var _a, _b, _c;
    var pt = coordinates.transformToDOMMatrixCoordinates(e.clientX, e.clientY, this.interactionOverlay);
    var relX = pt.x;
    var relY = pt.y;
    var definitionScale = cq.getRootSVG(this.containerId).querySelector(".definition-scale");
    var dsCoords = coordinates.getDOMMatrixCoordinates(definitionScale, this.rootSVG);
    if (relX < dsCoords.left || relX > dsCoords.right) {
      this.isTrackingMouse = false;
      return;
    }
    this.isTrackingMouse = true;
    var target = e.target;
    target = target.closest("g");
    var options = {};
    if (target === null || target === void 0 ? void 0 : target.classList.contains("staffLine")) {
      options["staffLineId"] = target.id;
    }
    var phantomNoteElement = this.phantom.getNoteElement();
    if (phantomNoteElement == undefined) {
      return;
    }
    phantomNoteElement.setAttribute("cx", relX.toString());
    phantomNoteElement.setAttribute("cy", relY.toString());
    phantomNoteElement.setAttribute("r", ((_b = (_a = this.m2m) === null || _a === void 0 ? void 0 : _a.getLineDist()) === null || _b === void 0 ? void 0 : _b.toString()) || "0");
    phantomNoteElement.setAttribute("visibility", phantomNoteElement.getAttribute("visibility") || "visible");
    this.m2m.defineNote(relX, relY, options);
    var newCY = (_c = this.m2m.getNewNoteY()) === null || _c === void 0 ? void 0 : _c.toString();
    phantomNoteElement.setAttribute("cy", newCY || "0");
    this.removeLines();
    if (this.m2m.getPhantomLines() != undefined) {
      this.phantomLines = new Array();
      this.m2m.getPhantomLines().forEach(pl => {
        this.phantomLines.push(new PhantomElement_1.default("line", this.containerId, {
          lineX: relX,
          lineY: pl
        }, this.phantomCanvas));
      });
      this.setPhantomLineListeners();
    }
    // if(e.type === "draggingNote"){
    //     console.log(phantomNoteElement, this.phantomLines)
    // }
  }

  removeLines() {
    var lines = this.interactionOverlay.querySelectorAll(".phantomLine");
    this.removePhantomLineListeners();
    if (lines.length > 0) {
      lines.forEach(l => {
        l.remove();
      });
    }
    return this;
  }
  drawMarkers(e) {
    this.container.querySelectorAll(".phantomMarker").forEach(pm => pm.remove());
    var pm = new PhantomElement_1.default("timeMarkers", this.containerId, {
      lastStaffEnteredId: e.target.getAttribute("refId"),
      measureMatrix: this.m2m.getMeasureMatrix()
    });
  }
  resetCanvas() {
    this.setContainerId(this.containerId);
    this.rootBBox = this.rootSVG.getBoundingClientRect();
    this.phantomCanvas = this.interactionOverlay.querySelector("#phantomCanvas");
    this.removeListeners();
    this.removePhantomLineListeners();
    this.phantom = new PhantomElement_1.default("note", this.containerId);
    this.setListeners();
    this.setPhantomLineListeners();
  }
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.rootSVG = cq.getRootSVG(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.container = document.getElementById(id);
    return this;
  }
  setPhantomNote(note = undefined) {
    this.phantom = note || new PhantomElement_1.default("note", this.containerId);
    return this;
  }
  getIsTrackingMouse() {
    return this.isTrackingMouse;
  }
}
exports["default"] = PhantomElementHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ScoreManipulatorHandler.js":
/*!******************************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/ScoreManipulatorHandler.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const ScoreManipulator_1 = __webpack_require__(/*! ../gui/ScoreManipulator */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/gui/ScoreManipulator.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const meiConverter = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const manipSelector = ".manipulator";
/**
 * Handler for all options which could modulate the given score from within the score. These functions are related to all elements seen inside a score
 */
class ScoreManipulatorHandler {
  constructor() {
    this.addMeasure = function handler(e) {
      e.target.dispatchEvent(this.manipulateEvent);
      e.preventDefault();
      e.stopPropagation();
      meiOperation.addMeasure(this.currentMEI);
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
    }.bind(this);
    this.removeMeasure = function handler(e) {
      e.target.dispatchEvent(this.manipulateEvent);
      e.preventDefault();
      e.stopPropagation();
      meiOperation.removeMeasure(this.currentMEI);
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
    }.bind(this);
    this.addStaff = function handler(e) {
      var target = e.target.closest(".manipulator");
      target.dispatchEvent(this.manipulateEvent);
      e.preventDefault();
      e.stopPropagation();
      var relpos = target.classList.contains("below") ? "below" : "above";
      meiOperation.addStaff(this.currentMEI, document.getElementById(target.getAttribute("refId")), relpos);
      this.musicPlayer.resetInstruments();
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
    }.bind(this);
    this.removeStaff = function handler(e) {
      var target = e.target.closest(".manipulator");
      target.dispatchEvent(this.manipulateEvent);
      e.preventDefault();
      e.stopPropagation();
      var relpos = target.classList.contains("below") ? "below" : "above";
      meiOperation.removeStaff(this.currentMEI, document.getElementById(target.getAttribute("refId")), relpos);
      this.musicPlayer.resetInstruments();
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
      e.target.dispatchEvent(this.manipulateEvent);
    }.bind(this);
    this.removeFunction = function handler() {
      this.removeElements();
    }.bind(this);
    this.drawFunction = function handler(e) {
      var that = this;
      setTimeout(function () {
        that.drawElements();
      }, 500);
      //this.drawElements()
    }.bind(this);
    this.sm = new ScoreManipulator_1.default();
    this.manipulateEvent = new Event("manipulated");
  }
  addCanvas() {
    var rootBBox = cq.getRootSVG(this.containerId).getBoundingClientRect();
    var rootWidth = rootBBox.width.toString();
    var rootHeigth = rootBBox.height.toString();
    this.manipulatorCanvas = document.createElementNS(constants_1.constants._SVGNS_, "svg");
    this.manipulatorCanvas.setAttribute("id", "manipulatorCanvas");
    this.manipulatorCanvas.classList.add("canvas");
    this.manipulatorCanvas.setAttribute("preserveAspectRatio", "xMinYMin meet");
    this.manipulatorCanvas.setAttribute("viewBox", ["0", "0", rootWidth, rootHeigth].join(" "));
    this.manipulatorCanvas.insertAdjacentElement("beforebegin", this.interactionOverlay.querySelector("#scoreRects"));
    this.interactionOverlay.append(this.manipulatorCanvas);
  }
  drawElements() {
    this.addCanvas();
    this.sm.drawMeasureAdder();
    this.sm.drawMeasureRemover();
    this.sm.drawStaffManipulators();
    this.setListeners();
  }
  removeElements() {
    //this.removeListeners()
    this.interactionOverlay.querySelectorAll(manipSelector).forEach(m => {
      m.remove();
    });
  }
  setListeners() {
    var that = this;
    this.removeListeners();
    this.interactionOverlay.querySelector("#measureAdder").addEventListener("click", this.addMeasure, true);
    this.interactionOverlay.querySelector("#measureRemover").addEventListener("click", this.removeMeasure, true);
    this.interactionOverlay.querySelectorAll(".addStaff").forEach(as => {
      as.addEventListener("click", that.addStaff, true);
    });
    this.interactionOverlay.querySelectorAll(".removeStaff").forEach(as => {
      as.addEventListener("click", that.removeStaff, true);
    });
  }
  removeListeners() {
    var _a, _b;
    var that = this;
    (_a = this.interactionOverlay.querySelector("#measureAdder")) === null || _a === void 0 ? void 0 : _a.removeEventListener("click", this.addMeasure);
    (_b = this.interactionOverlay.querySelector("#measureRemover")) === null || _b === void 0 ? void 0 : _b.removeEventListener("click", this.removeMeasure);
    this.interactionOverlay.querySelectorAll(".addStaff").forEach(as => {
      as.removeEventListener("click", that.addStaff);
    });
    this.interactionOverlay.querySelectorAll(".removeStaff").forEach(as => {
      as.removeEventListener("click", that.removeStaff);
    });
  }
  //SETTER////
  setMEI(mei) {
    this.currentMEI = mei;
    this.sm.setMEI(mei);
    return this;
  }
  setMusicPlayer(mp) {
    this.musicPlayer = mp;
    return this;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.sm.setContainerId(this.containerId);
    return this;
  }
}
exports["default"] = ScoreManipulatorHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/SelectionHandler.js":
/*!***********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/SelectionHandler.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const d3 = __webpack_require__(/*! d3 */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/d3/index.js");
const mappings_1 = __webpack_require__(/*! ../utils/mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const marked = "marked";
class SelectionHandler {
  constructor(containerId) {
    /**
     *  Mark clicked element
     */
    this.markedHandler = function markedHandler(e) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      if (!this.shiftPressed) {
        Array.from(this.container.querySelectorAll("." + marked)).forEach(n => {
          n.classList.remove(marked);
        });
      }
      e.preventDefault();
      var target = e.target;
      if (target.getAttribute("refId") === null) {
        target = target.closest("[refId]");
        target = this.rootSVG.querySelector("#" + target.getAttribute("refId"));
      }
      target = target.closest(".note, .rest, .mRest, .chord") || target;
      target.classList.add(marked);
      this.scoreGraph.setCurrentNodeById(target.id);
      // change the selected durations in the toolbar
      var firstMarkedNote = (_a = this.rootSVG.querySelector(".chord.marked, .note.marked, .rest.marked")) === null || _a === void 0 ? void 0 : _a.id;
      var meiNote = this.m2m.getCurrentMei().getElementById(firstMarkedNote);
      if ((meiNote === null || meiNote === void 0 ? void 0 : meiNote.closest("chord")) !== null) {
        meiNote = meiNote.closest("chord");
      }
      if ((firstMarkedNote === null || firstMarkedNote === void 0 ? void 0 : firstMarkedNote.length) > 0) {
        (_b = document.getElementById(this.containerId)) === null || _b === void 0 ? void 0 : _b.querySelectorAll("#noteGroup *, #dotGroup *, #modGroup *").forEach(b => b.classList.remove("selected"));
        (_d = (_c = document.getElementById(this.containerId)) === null || _c === void 0 ? void 0 : _c.querySelectorAll(".lastAdded")) === null || _d === void 0 ? void 0 : _d.forEach(la => la.classList.remove("lastAdded"));
        //select buttons for given note state
        (_f = (_e = document.getElementById(this.containerId)) === null || _e === void 0 ? void 0 : _e.querySelector("#" + mappings_1.accidToModButtonId.get(meiNote === null || meiNote === void 0 ? void 0 : meiNote.getAttribute("accid")))) === null || _f === void 0 ? void 0 : _f.classList.add("selected");
        if ((meiNote === null || meiNote === void 0 ? void 0 : meiNote.closest("chord")) !== null) {
          meiNote = meiNote.closest("chord");
        }
        (_h = (_g = document.getElementById(this.containerId)) === null || _g === void 0 ? void 0 : _g.querySelector("#" + mappings_1.numToNoteButtonId.get(meiNote === null || meiNote === void 0 ? void 0 : meiNote.getAttribute("dur")))) === null || _h === void 0 ? void 0 : _h.classList.add("selected");
        (_k = (_j = document.getElementById(this.containerId)) === null || _j === void 0 ? void 0 : _j.querySelector("#" + mappings_1.numToDotButtonId.get(meiNote === null || meiNote === void 0 ? void 0 : meiNote.getAttribute("dots")))) === null || _k === void 0 ? void 0 : _k.classList.add("selected");
      }
    }.bind(this);
    this.shiftKeyHandler = function shiftKeyHandler(e) {
      if (e.key === "Shift") {
        if (e.type === "keydown") {
          this.shiftPressed = true;
        } else if (e.type === "keyup") {
          this.shiftPressed = false;
        }
      }
      console.log("shiftPressed ", this.shiftPressed);
    }.bind(this);
    this.setContainerId(containerId);
    this.selectStartEvent = new Event("selectStart");
    this.selectEndEvent = new Event("selectEnd");
    this.shiftPressed = false;
    this.setKeyListeners();
    this.canvas = d3.select("#" + this.containerId + " #interactionOverlay"); // draw directly in svg
    var dragSelectAction = d3.drag().on('start', selStart).on('drag', selecting).on('end', selEnd);
    var that = this;
    function selStart() {
      if (document.getElementById(that.containerId).classList.contains("annotMode")) return; // prevent selecting when resizing annotation objects
      var pt = coordinates.transformToDOMMatrixCoordinates(d3.event.sourceEvent.clientX, d3.event.sourceEvent.clientY, cq.getInteractOverlay(that.containerId));
      that.initialX = pt.x; //d3.event.x
      that.initialY = pt.y; //d3.event.y
      if (!document.getElementById(that.containerId).classList.contains("harmonyMode") && !that.shiftPressed) {
        //!that.harmonyHandler.getGlobal()){
        that.m2m.getNoteBBoxes().forEach(bb => {
          let note = that.rootSVG.querySelector("#" + bb.id);
          note.classList.remove(marked);
        });
      }
      that.initRect(that.initialX, that.initialY);
    }
    function selecting() {
      if (document.getElementById(that.containerId).classList.contains("annotMode")) return; // prevent selecting when resizing annotation objects
      var pt = coordinates.transformToDOMMatrixCoordinates(d3.event.sourceEvent.clientX, d3.event.sourceEvent.clientY, cq.getInteractOverlay(that.containerId));
      const curX = pt.x; //d3.event.x + container.scrollLeft 
      const curY = pt.y; //d3.event.y + container.scrollTop 
      const newX = curX < that.initialX ? curX : that.initialX;
      const newY = curY < that.initialY ? curY : that.initialY;
      const width = curX < that.initialX ? that.initialX - curX : curX - that.initialX;
      const height = curY < that.initialY ? that.initialY - curY : curY - that.initialY;
      that.updateRect(newX, newY, width, height);
      var rect = that.interactionOverlay.querySelector("#selectRect");
      var rectpt = coordinates.getDOMMatrixCoordinates(rect, that.rootSVG);
      var rectHeightpt = rectpt.height; //Math.abs(rectpt.y - ptBottom.matrixTransform(rootMatrix.getScreenCTM().inverse()).y) 
      var rectWidthpt = rectpt.width; //Math.abs(rectpt.x - ptRight.matrixTransform(rootMatrix.getScreenCTM().inverse()).x)
      var rx = rectpt.x;
      var ry = rectpt.y;
      var noteBBoxes = that.m2m.getNoteBBoxes();
      noteBBoxes.forEach(bb => {
        var note = cq.getRootSVG(that.containerId).querySelector("#" + bb.id);
        let stem = note.querySelector(".stem");
        let accid = note.querySelector(".accid");
        if (bb.x >= rx &&
        //bb.x <= rx + rectBBox.width &&
        bb.x <= rx + rectWidthpt && bb.y >= ry &&
        //bb.y <= ry + rectBBox.height
        bb.y <= ry + rectHeightpt) {
          note.classList.add(marked);
          if (stem !== null) stem.classList.add(marked);
          var chord = note.closest(".chord");
          if (chord !== null) {
            //if(!chord.classList.contains(marked)) 
            let noteArr = Array.from(chord.querySelectorAll(".note"));
            if (noteArr.every(c => c.classList.contains(marked)) && noteArr.length > 0) {
              chord.classList.add(marked);
            }
          }
        } else if (!that.shiftPressed) {
          note.classList.remove(marked);
          stem === null || stem === void 0 ? void 0 : stem.classList.remove(marked);
          accid === null || accid === void 0 ? void 0 : accid.classList.remove(marked);
          var chord = note.closest(".chord");
          chord === null || chord === void 0 ? void 0 : chord.classList.remove(marked);
        }
      });
    }
    function selEnd() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      if (document.getElementById(that.containerId).classList.contains("annotMode")) return; // prevent selecting when resizing annotation objects
      var selectRect = that.interactionOverlay.querySelector("#selectRect");
      if (selectRect !== null && (selectRect === null || selectRect === void 0 ? void 0 : selectRect.getAttribute("width")) !== "0" && (selectRect === null || selectRect === void 0 ? void 0 : selectRect.getAttribute("height")) !== "0") {
        document.dispatchEvent(that.selectEndEvent);
      }
      selectRect === null || selectRect === void 0 ? void 0 : selectRect.remove();
      var firstMarkedNote = (_a = that.rootSVG.querySelector(".chord.marked, .note.marked, .rest.marked")) === null || _a === void 0 ? void 0 : _a.id;
      var meiNote = that.m2m.getCurrentMei().getElementById(firstMarkedNote);
      (_c = (_b = document.getElementById(that.containerId)) === null || _b === void 0 ? void 0 : _b.querySelectorAll(".lastAdded")) === null || _c === void 0 ? void 0 : _c.forEach(la => la.classList.remove("lastAdded"));
      if ((firstMarkedNote === null || firstMarkedNote === void 0 ? void 0 : firstMarkedNote.length) > 0) {
        (_d = document.getElementById(that.containerId)) === null || _d === void 0 ? void 0 : _d.querySelectorAll("#noteGroup *, #dotGroup *, #modGroup *").forEach(b => b.classList.remove("selected"));
        //select buttons for given note state
        (_f = (_e = document.getElementById(that.containerId)) === null || _e === void 0 ? void 0 : _e.querySelector("#" + mappings_1.accidToModButtonId.get(meiNote === null || meiNote === void 0 ? void 0 : meiNote.getAttribute("accid")))) === null || _f === void 0 ? void 0 : _f.classList.add("selected");
        if ((meiNote === null || meiNote === void 0 ? void 0 : meiNote.closest("chord")) !== null) {
          meiNote = meiNote.closest("chord");
        }
        (_h = (_g = document.getElementById(that.containerId)) === null || _g === void 0 ? void 0 : _g.querySelector("#" + mappings_1.numToNoteButtonId.get(meiNote === null || meiNote === void 0 ? void 0 : meiNote.getAttribute("dur")))) === null || _h === void 0 ? void 0 : _h.classList.add("selected");
        (_k = (_j = document.getElementById(that.containerId)) === null || _j === void 0 ? void 0 : _j.querySelector("#" + mappings_1.numToDotButtonId.get(meiNote === null || meiNote === void 0 ? void 0 : meiNote.getAttribute("dots")))) === null || _k === void 0 ? void 0 : _k.classList.add("selected");
      }
    }
    this.dsa = dragSelectAction;
    this.setListeners();
    //this.canvas.call(dragSelectAction);
  }

  initRect(ulx, uly) {
    this.canvas.append('rect').attr('x', ulx).attr('y', uly).attr('width', 0).attr('height', 0).attr('id', 'selectRect').attr('stroke', 'black').attr('stroke-width', "1px").attr('fill', 'none');
  }
  updateRect(newX, newY, currentWidth, currentHeight) {
    d3.select('#selectRect').attr('x', newX).attr('y', newY).attr('width', currentWidth).attr('height', currentHeight);
  }
  removeListeners() {
    d3.select("#" + this.containerId + " #interactionOverlay").on('mousedown.drag', null);
    this.interactionOverlay.querySelectorAll(".note, .rest, .mRest, .notehead").forEach(el => {
      el.removeEventListener("click", this.markedHandler);
    });
    this.interactionOverlay.removeEventListener("keydown", this.shiftKeyHandler);
    this.interactionOverlay.removeEventListener("keyup", this.shiftKeyHandler);
  }
  setListeners() {
    this.canvas.call(this.dsa);
    cq.getInteractOverlay(this.containerId).querySelectorAll(".note, .rest, .mRest, .notehead").forEach(el => {
      el.addEventListener("click", this.markedHandler);
    });
  }
  setKeyListeners() {
    this.interactionOverlay.addEventListener("keydown", this.shiftKeyHandler);
    this.interactionOverlay.addEventListener("keyup", this.shiftKeyHandler);
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  ///////// GETTER/ SETTER ////////
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setScoreGraph(sg) {
    this.scoreGraph = sg;
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.container = document.getElementById(id);
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.rootSVG = cq.getRootSVG(id);
    return this;
  }
}
exports["default"] = SelectionHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/SidebarHandler.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/SidebarHandler.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const mappings_1 = __webpack_require__(/*! ../utils/mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const meiConverter = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const coordinates = __webpack_require__(/*! ../utils/coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const mei_template_1 = __webpack_require__(/*! ../assets/mei_template */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/assets/mei_template.js");
const interactjs_1 = __webpack_require__(/*! interactjs */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/interactjs/dist/interact.min.js");
/**
 * Handles all Events when interacting with the sidebar.
 * There is only one instance necessary.
 * Every change that results from a sidebar interaction is returned by a meiOperation
 */
class SidebarHandler {
  constructor() {
    this.changeTimeHandler = function changeTimeHandler(e) {
      e.preventDefault();
      this.setTimeForSelectedElements(e);
    }.bind(this);
    this.keySigSelectHandler = function keySigSelectHandler(e) {
      e.preventDefault();
      this.setKeyGlobal(e);
    }.bind(this);
    this.keyChangeHandler = function keyChangeHandler(e) {
      e.preventDefault();
      this.setKeyLocal(e);
    }.bind(this);
    /**
     * Handler for changing Time Signatures (+ Loading)
     */
    this.changeMeterHandler = function changeMeter(e) {
      var mei = meiOperation.changeMeter(this.currentMEI);
      if (mei !== null) {
        mei = meiConverter.restoreXmlIdTags(mei);
        this.loadDataCallback("", mei, false);
      }
    }.bind(this);
    this.clefChangeHandler = function clefChangeHandler(e) {
      e.preventDefault();
      this.setClef(e);
    }.bind(this);
    this.resizeSidebarFunction = this.resizeSidebar.bind(this);
    this.findDropTargetFunction = function findBarline(e) {
      this.findDropTarget(e);
    }.bind(this);
    this.dropOnTargetFunction = function dropOnBarline(e) {
      this.dropOnTarget(e);
    }.bind(this);
    //this.setListeners()
    document.addEventListener("dragover", e => {
      e.preventDefault();
    });
  }
  setListeners() {
    this.setSelectListeners();
    //this.setChangeMeterListeners()
    // Controll dpossible drag and drop zones on screen
    var that = this;
    var dragTarget = this.interactionOverlay.querySelector("#scoreRects"); //document.getElementById("rootSVG")
    this.interactionOverlay.addEventListener("dragleave", function (event) {
      event.preventDefault();
      event.stopPropagation();
      if (event.target === dragTarget) {
        that.removeSelectListeners();
      }
    }, false);
    this.interactionOverlay.addEventListener("dragenter", function (event) {
      event.preventDefault();
      event.stopPropagation();
      if (Array.from(dragTarget.querySelectorAll("*")).every(c => c !== event.target)) {
        that.setSelectListeners();
      }
    }, false);
    this.resizeListener = interactjs_1.default("#" + this.containerId + " #sidebarContainer").resizable({
      edges: {
        left: false,
        right: true,
        bottom: false,
        top: false
      },
      listeners: {
        move: this.resizeSidebarFunction,
        end(e) {
          var target = e.target;
          target.style.transition = "0.5s";
          target.parentElement.querySelectorAll(":scope > div:not(#sidebarContainer)").forEach(d => {
            var ds = d;
            ds.style.transition = "0.5s";
          });
        }
      }
    });
    return this;
  }
  removeListeners() {
    this.removeSelectListeners();
    //this.resizeListener?.unset()
    return this;
  }
  removeSelectListeners() {
    this.container.querySelectorAll("*[id*=keyList] > *").forEach(k => {
      if (k.tagName === "A") {
        k.removeEventListener("dblclick", this.keySigSelectHandler);
        k.removeEventListener("click", this.keyChangeHandler);
      }
    });
    this.container.querySelectorAll("*[id*=clefList] > *").forEach(k => {
      if (k.tagName === "A") {
        k.removeEventListener("click", this.clefChangeHandler);
      }
    });
    document.removeEventListener("dragover", e => {
      e.preventDefault();
    });
    this.container.querySelectorAll("#sidebarList a, #timeDiv").forEach(sa => {
      sa.removeEventListener("drag", this.findDropTargetFunction);
      sa.removeEventListener("dragend", this.dropOnTargetFunction);
    });
    this.container.querySelectorAll("#timeUnit, #timeCount").forEach(t => {
      t.removeEventListener("change", this.changeTimeHandler);
    });
    return this;
  }
  resetListeners() {
    this.removeListeners();
    this.setListeners();
  }
  setSelectListeners() {
    this.container.querySelectorAll("*[id*=keyList] > *").forEach(k => {
      if (k.tagName === "A") {
        k.addEventListener("dblclick", this.keySigSelectHandler);
        k.addEventListener("click", this.keyChangeHandler);
      }
    });
    this.container.querySelectorAll("*[id*=clefList] > *").forEach(k => {
      if (k.tagName === "A") {
        k.addEventListener("click", this.clefChangeHandler);
      }
    });
    this.container.querySelectorAll("#sidebarList a, #timeDiv, #tempoDiv").forEach(sa => {
      sa.addEventListener("drag", this.findDropTargetFunction);
      sa.addEventListener("dragend", this.dropOnTargetFunction);
    });
    this.container.querySelectorAll("#timeUnit, #timeCount").forEach(t => {
      t.addEventListener("change", this.changeTimeHandler);
    });
    return this;
  }
  /**
   * Make Score Elements Clickable (and mark them), which are important for functions in the sidebar
   * Has to be called externally, when new Score is Loaded
   * @returns this
   */
  makeScoreElementsClickable() {
    var that = this;
    // Clefs are clickable and will be filled red (see css)
    cq.getInteractOverlay(this.containerId).querySelectorAll(".clef, .keySig, .meterSig").forEach(c => {
      //this.interactionOverlay.querySelectorAll(".clef, .keySig, .meterSig").forEach(c => {
      //this.interactionOverlay.querySelectorAll("*").forEach(c => {
      c.addEventListener("click", function (e) {
        var _a, _b;
        if (c.classList.contains("marked")) {
          c.classList.remove("marked");
          (_a = that.getElementInSVG(c.getAttribute("refId"))) === null || _a === void 0 ? void 0 : _a.classList.remove("marked");
        } else {
          c.classList.add("marked");
          (_b = that.getElementInSVG(c.getAttribute("refId"))) === null || _b === void 0 ? void 0 : _b.classList.add("marked");
          that.changeSelectedElementInSidebar(c);
        }
      });
    });
    return this;
  }
  /**
   * Change Values in Sidebar to match the selected element in the score.
   * Currently only for time
   * @param element
   */
  changeSelectedElementInSidebar(element) {
    if (!element.classList.contains("meterSig")) return;
    var baseEl = this.rootSVG.querySelector("#" + element.getAttribute("refId"));
    var tempY;
    var count = "";
    var unit = "";
    baseEl.querySelectorAll("use").forEach(u => {
      var num = mappings_1.unicodeToTimesig.get(u.getAttribute("href").slice(1, 5));
      if (count === "") {
        count = num;
      } else if (u.getAttribute("y") === tempY && count !== "") {
        count += num;
      } else if (u.getAttribute("y") === tempY && unit !== "") {
        unit += num;
      } else {
        unit = num;
      }
      tempY = u.getAttribute("y");
    });
    this.container.querySelector("#timeCount").value = count;
    this.container.querySelector("#timeUnit").value = unit;
  }
  setTimeForSelectedElements(e) {
    var target = e.target;
    var changeCount = false;
    var changeUnit = false;
    if (target.id.includes("Count")) {
      changeCount = true;
    }
    if (target.id.includes("Unit")) {
      changeUnit = true;
    }
    var count = this.container.querySelector("#timeCount").value;
    var unit = this.container.querySelector("#timeUnit").value;
    var markedTimes = Array.from(this.rootSVG.querySelectorAll(".meterSig.marked"));
    var reload = false;
    markedTimes.forEach(mt => {
      var _a;
      var meiMt = this.currentMEI.getElementById(mt.id);
      var isInStaffDef = this.currentMEI.querySelector("#" + mt.id) === null;
      if (isInStaffDef) {
        //var myRownum = parseInt(mt.closest(".staff").getAttribute("n")) - 1
        //var rowNums = new Array()
        this.currentMEI.querySelector("measure").querySelectorAll("staff").forEach(s => {
          var rowNum = parseInt(s.getAttribute("n")) - 1;
          var targetMeterSigDef = this.currentMEI.querySelectorAll("staffDef")[rowNum];
          if (targetMeterSigDef.getAttribute("meter.count") !== count && changeCount) {
            targetMeterSigDef.setAttribute("meter.count", count);
            reload = true;
          }
          if (targetMeterSigDef.getAttribute("meter.unit") !== unit && changeUnit) {
            targetMeterSigDef.setAttribute("meter.unit", unit);
            reload = true;
          }
        });
      } else {
        this.currentMEI.querySelector("#" + mt.id).setAttribute("count", count);
        this.currentMEI.querySelector("#" + mt.id).setAttribute("unit", unit);
        var siblingLayers = (_a = meiMt.closest("measure")) === null || _a === void 0 ? void 0 : _a.querySelectorAll("layer");
        var myLayer = meiMt.closest("layer");
        siblingLayers.forEach(sl => {
          if (sl.id !== myLayer.id) {
            var ms = sl.querySelector("meterSig");
            if (ms === null) {
              ms = new mei_template_1.default().createMeterSig(count, unit);
              sl.firstElementChild.prepend(ms);
            } else {
              ms.setAttribute("count", count);
              ms.setAttribute("unit", unit);
            }
          }
        });
        reload = true;
      }
    });
    if (reload) {
      meiOperation.cleanUp(this.currentMEI);
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
    }
  }
  // changeParameters by interacting with sidebar
  setKeyGlobal(e) {
    var target = e.target;
    this.currentMEI.querySelectorAll("staffDef > keySig").forEach(s => {
      s.setAttribute("sig", mappings_1.keyIdToSig.get(target.id));
    });
    var mei = meiOperation.adjustAccids(this.currentMEI);
    meiOperation.cleanUp(mei);
    mei = meiConverter.restoreXmlIdTags(mei);
    this.loadDataCallback("", mei, false);
    return this;
  }
  setKeyLocal(e) {
    var target = e.target;
    var markedClefs = Array.from(this.rootSVG.querySelectorAll(".keySig.marked"));
    var reload = false;
    markedClefs.forEach(mc => {
      var isInStaffDef = this.currentMEI.querySelector("#" + mc.id) === null;
      if (isInStaffDef) {
        var rowNum = parseInt(mc.closest(".staff").getAttribute("n")) - 1;
        var targetKeySigDef = this.currentMEI.querySelectorAll("staffDef > keySig")[rowNum];
        if (targetKeySigDef.getAttribute("sig") !== mappings_1.keyIdToSig.get(target.id)) {
          targetKeySigDef.setAttribute("sig", mappings_1.keyIdToSig.get(target.id));
          reload = true;
        }
      } else {
        this.currentMEI.querySelector("#" + mc.id).setAttribute("sig", mappings_1.keyIdToSig.get(target.id));
        reload = true;
      }
    });
    if (reload) {
      meiOperation.cleanUp(this.currentMEI);
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
    }
  }
  /**
   * If Meter is already present in MEI, load it in input for time signature
   * @returns
   */
  loadMeter() {
    var staffDef = this.currentMEI.querySelector("staffDef");
    if (staffDef !== null) {
      var hasMeter = staffDef.getAttribute("meter.count") !== null && staffDef.getAttribute("meter.unit") !== null;
      if (hasMeter) {
        this.container.querySelector("#timeCount").setAttribute("value", staffDef.getAttribute("meter.count"));
        this.container.querySelector("#timeUnit").setAttribute("value", staffDef.getAttribute("meter.unit"));
      }
    }
    return this;
  }
  /**
   * Listen on Change when input is changed for Time Signatures
   */
  setChangeMeterListeners() {
    this.container.querySelector("#timeCount").addEventListener("change", this.changeMeterHandler);
    this.container.querySelector("#timeUnit").addEventListener("change", this.changeMeterHandler);
  }
  /**
   * Set Clefshape for all marked clefelements
   * @param e MouseEvent
   */
  setClef(e) {
    var target = e.target;
    var markedClefs = Array.from(this.rootSVG.querySelectorAll(".clef.marked"));
    var reload = false;
    markedClefs.forEach(mc => {
      var isInStaffDef = this.currentMEI.querySelector("#" + mc.id) === null;
      if (isInStaffDef) {
        var rowNum = parseInt(mc.closest(".staff").getAttribute("n")) - 1;
        var targetClefDef = this.currentMEI.querySelectorAll("staffDef > clef")[rowNum];
        if (targetClefDef.getAttribute("shape") !== target.id.charAt(0)) {
          targetClefDef.setAttribute("shape", target.id.charAt(0));
          targetClefDef.setAttribute("line", mappings_1.clefToLine.get(target.id.charAt(0)));
          reload = true;
        }
      } else {
        this.currentMEI.querySelector("#" + mc.id).setAttribute("shape", target.id.charAt(0));
        this.currentMEI.querySelector("#" + mc.id).setAttribute("line", mappings_1.clefToLine.get(target.id.charAt(0)));
        reload = true;
      }
    });
    if (reload) {
      meiOperation.cleanUp(this.currentMEI);
      this.loadDataCallback("", meiConverter.restoreXmlIdTags(this.currentMEI), false);
    }
  }
  resizeSidebar(e) {
    var that = this;
    var target = e.target;
    target.style.transition = "0s";
    target.style.width = e.clientX.toString() + "px";
    target.parentElement.querySelectorAll(":scope > div:not(#sidebarContainer)").forEach(d => {
      var ds = d;
      ds.style.transition = "0s";
      ds.style.marginLeft = target.getBoundingClientRect().right.toString() + "px";
      ds.style.width = (that.container.getBoundingClientRect().right - target.getBoundingClientRect().right).toString() + "px";
    });
  }
  findDropTarget(e) {
    /** TODO: dropflags müssen auch in scoreRects eigegeben werden */
    e.preventDefault();
    var pt = coordinates.transformToDOMMatrixCoordinates(e.clientX, e.clientY, this.interactionOverlay);
    var posx = pt.x;
    var posy = pt.y;
    var eventTarget = e.target;
    var eventTargetParent = eventTarget.parentElement;
    var eventTargetIsClef = eventTargetParent.id.toLowerCase().includes("clef");
    var eventTargetIsKey = eventTargetParent.id.toLowerCase().includes("key");
    var eventTargetIsTime = eventTarget.id.toLocaleLowerCase().includes("time");
    var eventTargetIsTempo = eventTarget.id.toLocaleLowerCase().includes("tempo");
    var dropTargets; //NodeListOf<Element>
    var dropFlag;
    if (eventTargetIsClef) {
      dropTargets = Array.from(this.rootSVG.querySelectorAll(".clef, .barLine > path"));
      dropFlag = "dropClef";
    } else if (eventTargetIsKey) {
      dropTargets = Array.from(this.rootSVG.querySelectorAll(".keySig, .barLine > path, .clef"));
      dropFlag = "dropKey";
    } else if (eventTargetIsTime) {
      dropTargets = Array.from(this.rootSVG.querySelectorAll(".meterSig, .barLine > path, .clef"));
      dropFlag = "dropTime";
    } else if (eventTargetIsTempo) {
      dropTargets = Array.from(this.rootSVG.querySelectorAll(".note, .chord, .rest, .mRest"));
      dropFlag = "dropTempo";
    } else {
      return;
    }
    dropTargets.push(this.container.querySelector("#sidebarContainer"));
    dropTargets.push(this.container.querySelector("#btnToolbar"));
    dropTargets.push(this.container.querySelector("#customToolbar"));
    var tempDist = Math.pow(10, 10);
    dropTargets.forEach(dt => {
      var _a;
      var interacationElement = this.interactionOverlay.querySelector("[refId=" + dt.id + "]") || this.container.querySelector("#" + dt.id);
      var blbbox = interacationElement.getBoundingClientRect();
      var ptdt = coordinates.getDOMMatrixCoordinates(blbbox, this.interactionOverlay);
      var bbx = ptdt.left;
      var bby = ptdt.top;
      var dist = Math.sqrt(Math.abs(bbx - posx) ** 2 + Math.abs(bby - posy) ** 2);
      if (dist < tempDist) {
        dropTargets.forEach(_dt => {
          var _a;
          _dt.classList.remove(dropFlag);
          (_a = this.getElementInInteractOverlay(_dt.id)) === null || _a === void 0 ? void 0 : _a.classList.remove(dropFlag);
        });
        tempDist = dist;
        dt.classList.add(dropFlag);
        (_a = this.getElementInInteractOverlay(dt.id)) === null || _a === void 0 ? void 0 : _a.classList.add(dropFlag);
      }
    });
  }
  /**
   * Determine action on drop elemnt from sidebar on score
   * @param e
   */
  dropOnTarget(e) {
    var _a;
    e.preventDefault();
    var selectedElement = this.getElementInSVG((_a = this.interactionOverlay.querySelector(".dropClef, .dropKey, .dropTime, .dropTempo")) === null || _a === void 0 ? void 0 : _a.getAttribute("refId"));
    var t = e.target;
    var mei;
    var isFirstClef = Array.from(this.rootSVG.querySelectorAll(".measure[n=\"1\"] .clef")).some(mc => (mc === null || mc === void 0 ? void 0 : mc.id) === (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id));
    var isFirstKey = Array.from(this.rootSVG.querySelectorAll(".measure[n=\"1\"] .keySig")).some(mc => (mc === null || mc === void 0 ? void 0 : mc.id) === (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id));
    var isFirstMeter = Array.from(this.rootSVG.querySelectorAll(".measure[n=\"1\"] .meterSig")).some(mc => (mc === null || mc === void 0 ? void 0 : mc.id) === (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id));
    if (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.classList.contains("dropClef")) {
      if (isFirstClef) {
        mei = meiOperation.replaceClefinScoreDef(selectedElement, t.id, this.currentMEI);
      } else {
        mei = meiOperation.insertClef(selectedElement, t.id, this.currentMEI);
      }
    } else if (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.classList.contains("dropKey")) {
      if (isFirstKey || isFirstClef) {
        mei = meiOperation.replaceKeyInScoreDef(selectedElement, t.id, this.currentMEI);
      } else {
        mei = meiOperation.insertKey(selectedElement, t.id, this.currentMEI);
      }
    } else if (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.classList.contains("dropTime")) {
      if (isFirstMeter || isFirstClef) {
        mei = meiOperation.replaceMeterInScoreDef(selectedElement, this.currentMEI);
      } else {
        mei = meiOperation.insertMeter(selectedElement, this.currentMEI);
      }
    } else if (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.classList.contains("dropTempo")) {
      mei = meiOperation.insertTempo(selectedElement, this.currentMEI);
    } else {
      return;
    }
    this.loadDataCallback("", mei, false);
  }
  getElementInSVG(id) {
    if (id === "") return;
    return this.rootSVG.querySelector("#" + id);
  }
  getElementInInteractOverlay(id) {
    if (id === "") return;
    return this.interactionOverlay.querySelector("*[refId=\"" + id + "\"]");
  }
  //////// GETTER / SETTER /////////////
  setCurrentMei(mei) {
    this.currentMEI = mei;
    return this;
  }
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.rootSVG = cq.getRootSVG(containerId);
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.container = document.getElementById(containerId);
    this.sidebarContainer = this.container.querySelector("#sidebarContainer");
    return this;
  }
}
exports["default"] = SidebarHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/TooltipHandler.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/TooltipHandler.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const core_1 = __webpack_require__(/*! @popperjs/core */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/node_modules/@popperjs/core/lib/index.js");
class TooltipHandler {
  constructor() {
    this.ttQuerySelector = "#btnToolbar button, #customToolbar button, #sidebarContainer a, #manipulatorCanvas svg";
    /**
     * Create a list of opened timeouts
     */
    this.enterHoverListener = function enterHoverListener(e) {
      this.createTooltip(e.target);
      setTimeout(() => {
        var _a;
        var t = e.target;
        var tt = (_a = this.container) === null || _a === void 0 ? void 0 : _a.querySelector("#" + t.getAttribute("aria-describedby"));
        tt === null || tt === void 0 ? void 0 : tt.classList.remove("hide");
        tt === null || tt === void 0 ? void 0 : tt.classList.add("show");
      }, 1000);
    }.bind(this);
    /**
     * Destroy tooltip on leaving element.
     */
    this.leaveHoverListener = function leaveHoverListener(e) {
      var _a;
      var t = e.target;
      var tt = (_a = this.container) === null || _a === void 0 ? void 0 : _a.querySelector("#" + t.getAttribute("aria-describedby"));
      tt === null || tt === void 0 ? void 0 : tt.remove();
    }.bind(this);
    this.timeOuts = new Array();
    this.removeListeners();
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.interactionOverlay = cq.getInteractOverlay(containerId);
    this.rootSVG = cq.getRootSVG(containerId);
    this.container = document.getElementById(containerId);
    return this;
  }
  setListeners() {
    this.setTTListeners();
    this.resetTTListeners();
    return this;
  }
  /**
   * Create a tooltip for every button in queryselectot.
   * Set Listeners to display TT for every element
   */
  setTTListeners() {
    var _a;
    var that = this;
    (_a = this.container) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.ttQuerySelector).forEach(btn => {
      btn.addEventListener("mouseenter", that.enterHoverListener);
      btn.addEventListener("mouseleave", that.leaveHoverListener);
    });
  }
  /**
   * Resetting TT listeners might be wanted when Elements are collapsable since position of the elements will change
   */
  resetTTListeners() {
    var _a, _b;
    var that = this;
    (_a = this.container) === null || _a === void 0 ? void 0 : _a.querySelectorAll(".accordion-collapse").forEach(ac => {
      ac.addEventListener("hidden.bs.collapse", function (e) {
        that.removeListeners();
        that.setTTListeners();
      });
      ac.addEventListener("shown.bs.collapse", function (e) {
        that.removeListeners();
        that.setTTListeners();
      });
    });
    (_b = this.container) === null || _b === void 0 ? void 0 : _b.querySelectorAll(".manipulator").forEach(m => {
      m.addEventListener("click", function (e) {
        that.removeListeners();
        that.setTTListeners();
      });
    });
  }
  /**
   * create actual tooltip as element
   */
  createTooltip(el) {
    var ttid = "tt-" + el.id + "-" + this.containerId;
    el.setAttribute("aria-describedby", ttid);
    var tt = document.createElement("div");
    tt.setAttribute("role", "tooltip");
    tt.setAttribute("id", ttid);
    tt.textContent = el.id;
    tt.classList.add("tooltip");
    tt.classList.add("hide");
    var arrow = document.createElement("div");
    arrow.setAttribute("data-popper-arrow", "");
    tt.append(arrow);
    this.container.prepend(tt);
    core_1.createPopper(el, tt, {
      placement: 'bottom-start',
      modifiers: [{
        name: 'offset',
        options: {
          offset: [0, 8]
        }
      }
      // {
      //     name: 'arrow',
      //     options: {
      //         element: arrow,
      //         padding: 2,
      //     },
      // },
      ]
    });
  }

  removeListeners() {
    var _a, _b, _c;
    var that = this;
    (_a = this.container) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.ttQuerySelector).forEach(btn => {
      btn.removeEventListener("mouseenter", that.enterHoverListener);
      btn.removeEventListener("mouseleave", that.leaveHoverListener);
    });
    (_b = this.timeOuts) === null || _b === void 0 ? void 0 : _b.forEach(to => {
      clearTimeout(to);
      that.timeOuts.pop();
    });
    (_c = this.container) === null || _c === void 0 ? void 0 : _c.querySelectorAll(".tooltip").forEach(tt => {
      tt.remove();
    });
    return this;
  }
}
exports["default"] = TooltipHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/WindowHandler.js":
/*!********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/handlers/WindowHandler.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const cq = __webpack_require__(/*! ../utils/convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
const meiConverter = __webpack_require__(/*! ../utils/MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
class WindowHandler {
  constructor() {
    /**
     * Update all elements that are affected by a window size change
     */
    this.scrollingTimer = new Array();
    this.updateFunction = this.update.bind(this);
    /**
     * Reload svg when registered events ended
     */
    this.reloadTimer = new Array();
    this.reloadSVGFunction = this.reloadSVG.bind(this);
    this.toggleCTRLFunction = this.toggleCTRL.bind(this);
    this.deltaTemp = 1;
    this.zoomTimer = new Array();
    this.wheelZoomFunction = this.wheelZoom.bind(this);
    this.clickZoomFunction = this.clickZoom.bind(this);
    this.cacheContainerAttrFunction = this.cacheContainerAttr.bind(this);
    this.loadContainerAttrFunction = this.loadContainerAttr.bind(this);
    this.ctrlPressed = false;
    this.w = window;
    while (this.w !== this.w.parent) {
      this.w = this.w.parent;
    }
  }
  setListeners() {
    this.eventContainer = this.container;
    window.addEventListener("scroll", this.updateFunction);
    //window.addEventListener("resize", this.update)
    this.w.addEventListener("resize", this.reloadSVGFunction);
    this.w.addEventListener("deviceorientation", this.updateFunction);
    this.eventContainer.querySelector("#sidebarContainer").addEventListener("transitionend", this.updateFunction);
    this.eventContainer.querySelector("#sidebarContainer").addEventListener("transitionend", this.reloadSVGFunction);
    this.eventContainer.querySelector("#sidebarContainer").addEventListener("resizemove", this.updateFunction);
    this.eventContainer.querySelector("#sidebarContainer").addEventListener("resizemove", this.reloadSVGFunction);
    this.rootSVG.addEventListener("scroll", this.updateFunction);
    //this.rootSVG.addEventListener("resize", this.update)
    this.rootSVG.addEventListener("deviceorientation", this.updateFunction);
    document.addEventListener("fullscreenchange", this.updateFunction);
    this.eventContainer.addEventListener("wheel", this.wheelZoomFunction);
    this.eventContainer.querySelectorAll("#zoomGroup > button").forEach(b => b.addEventListener("click", this.clickZoomFunction));
    document.addEventListener("keydown", this.toggleCTRLFunction);
    document.addEventListener("keyup", this.toggleCTRLFunction);
    this.eventContainer.addEventListener("loadingStart", this.cacheContainerAttrFunction);
    this.eventContainer.addEventListener("loadingEnd", this.loadContainerAttrFunction);
    return this;
  }
  removeListeners() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    window.removeEventListener("scroll", this.updateFunction);
    this.w.removeEventListener("resize", this.updateFunction);
    this.w.removeEventListener("resize", this.reloadSVGFunction);
    this.w.removeEventListener("deviceorientation", this.updateFunction);
    (_a = this.eventContainer) === null || _a === void 0 ? void 0 : _a.querySelector("#sidebarContainer").removeEventListener("transitionend", this.updateFunction);
    (_b = this.eventContainer) === null || _b === void 0 ? void 0 : _b.querySelector("#sidebarContainer").removeEventListener("transitionend", this.reloadSVGFunction);
    (_c = this.eventContainer) === null || _c === void 0 ? void 0 : _c.querySelector("#sidebarContainer").removeEventListener("resizemove", this.updateFunction);
    (_d = this.eventContainer) === null || _d === void 0 ? void 0 : _d.querySelector("#sidebarContainer").removeEventListener("resizemove", this.reloadSVGFunction);
    this.rootSVG.removeEventListener("scroll", this.updateFunction);
    //this.rootSVG.removeEventListener("resize", this.update)
    this.rootSVG.removeEventListener("deviceorientation", this.updateFunction);
    document.removeEventListener("fullscreenchange", this.updateFunction);
    (_e = this.eventContainer) === null || _e === void 0 ? void 0 : _e.removeEventListener("wheel", this.wheelZoomFunction);
    (_f = this.eventContainer) === null || _f === void 0 ? void 0 : _f.querySelectorAll("#zoomGroup > button").forEach(b => b.removeEventListener("click", this.clickZoomFunction));
    document.removeEventListener("keydown", this.toggleCTRLFunction);
    document.removeEventListener("keyup", this.toggleCTRLFunction);
    (_g = this.eventContainer) === null || _g === void 0 ? void 0 : _g.removeEventListener("loadingStart", this.cacheContainerAttrFunction);
    (_h = this.eventContainer) === null || _h === void 0 ? void 0 : _h.removeEventListener("loadingEnd", this.loadContainerAttrFunction);
    return this;
  }
  update(e) {
    var _a;
    // special rule for transition events since so much with different propertynames are fired
    if (e instanceof TransitionEvent) {
      if (!e.propertyName.includes("width")) return;
    }
    var that = this;
    (_a = this.scrollingTimer) === null || _a === void 0 ? void 0 : _a.forEach(s => clearTimeout(s));
    this.scrollingTimer.push(setTimeout(function () {
      var _a, _b, _c, _d;
      that.updateXY();
      (_a = that.m2m) === null || _a === void 0 ? void 0 : _a.update();
      (_b = that.annotations) === null || _b === void 0 ? void 0 : _b.updateCanvas();
      (_d = (_c = that.insertModeHandler) === null || _c === void 0 ? void 0 : _c.getPhantomNoteHandler()) === null || _d === void 0 ? void 0 : _d.resetCanvas();
      that.scrollingTimer = new Array();
    }, 500));
  }
  reloadSVG(e) {
    var _a;
    var t = e.target;
    var that = this;
    (_a = this.reloadTimer) === null || _a === void 0 ? void 0 : _a.forEach(r => clearTimeout(r));
    if (t.id === "sidebarContainer" && !e.propertyName.includes("width")) {
      // Timeout is needed to ensure, that transition has been completed and in eventphase 0
      // Must be a slighty longer than transitiontime
      this.reloadTimer.push(setTimeout(function () {
        that.updateXY();
        var mei = meiConverter.restoreXmlIdTags(that.currentMEI);
        that.loadDataCallback("", mei, false);
        that.reloadTimer = new Array();
      }, e.elapsedTime * 1000 + 10));
    } else if (e.type === "resize" || e.type === "resizemove") {
      this.reloadTimer.push(setTimeout(function () {
        that.updateXY();
        var mei = meiConverter.restoreXmlIdTags(that.currentMEI);
        that.loadDataCallback("", mei, false);
        that.reloadTimer = new Array();
      }, 500));
    }
  }
  /**
   * Toggle ctrl or meta button. Is used to activte zoom function
   * @param e
   */
  toggleCTRL(e) {
    if (e.key === "Meta" || e.key === "Control") {
      if (e.type === "keydown") {
        this.ctrlPressed = true;
      } else {
        this.ctrlPressed = false;
      }
    }
  }
  /**
   * Zoom according to movement of mouse wheel (also applies to two finger scroll gesture on trackpad).
   * Can only be executed when container is active Element and when ctrl/meta is pressed.
   * The scale is accumulated with every call of this method.
   * @param e
   * @returns
   */
  wheelZoom(e) {
    this.updateXY();
    if (!cq.hasActiveElement(this.containerId)) return;
    if (!this.ctrlPressed) return;
    e.preventDefault();
    this.deltaTemp = this.deltaTemp + e.deltaY / 1000;
    this.zoomSVG(this.deltaTemp);
  }
  /**
   * Zoom when Zoombuttons are clicked (In div #zoomGroup).
   *
   * @param e
   */
  clickZoom(e) {
    var t = e.target;
    if (t.id === "zoomInBtn") {
      this.deltaTemp = this.deltaTemp + 200 / 1000;
    } else if (t.id === "zoomOutBtn") {
      this.deltaTemp = this.deltaTemp - 200 / 1000;
    }
    this.zoomSVG(this.deltaTemp);
  }
  /**
   * General zoom logic for all top level svgs (interactionOverlay + rootSVG (= rendered score by verovio))
   * @param delta
   */
  zoomSVG(delta) {
    var _a;
    var that = this;
    var container = document.getElementById(this.containerId);
    container.querySelectorAll("#svg_output [preserveAspectRatio]").forEach(vb => vb.removeAttribute("preserveAspectRatio"));
    // ensure that with every call of all obsolete timeouts are deleted so that only one is left to be executed
    (_a = this.zoomTimer) === null || _a === void 0 ? void 0 : _a.forEach(zt => clearTimeout(zt));
    container.querySelectorAll("#svg_output > [viewBox]").forEach(vb => {
      vb.setAttribute("transform", "scale(" + delta.toString() + ")");
    });
    this.zoomTimer.push(setTimeout(function () {
      // that.deltaTemp = 1
      var mei = meiConverter.restoreXmlIdTags(that.currentMEI);
      that.loadDataCallback("", mei, false);
      that.zoomTimer = new Array();
    }, 300));
  }
  /**
   * Cache container attributes that need to be loaded after the score is loaded.
   * - Scorllpositions of the containers
   *
   * Listens to "loadStart" Event in Core class
   * @param e Event
   */
  cacheContainerAttr(e) {
    this.divScrolls = new Map();
    var container = document.getElementById(this.containerId);
    container.querySelectorAll(":scope div").forEach(d => {
      this.divScrolls.set(d.id, {
        sl: d.scrollLeft,
        st: d.scrollTop
      });
    });
  }
  /**
   * Load all container attributes saved in @function cacheContainerAttr after score is loaded.
   * Listens to "loadEnd" Event in Core class
   * @param e Event
   * @returns
   */
  loadContainerAttr(e) {
    var _a;
    if (this.divScrolls == undefined) return;
    for (const [key, value] of this.divScrolls.entries()) {
      (_a = document.getElementById(key)) === null || _a === void 0 ? void 0 : _a.scrollTo(value.sl, value.st);
    }
  }
  /**
   * Set X and Y coordinates of the current boundingbox of the of the VerovioScore (#rootSVG)
   */
  updateXY() {
    var _a;
    var bb = (_a = document.getElementById(this.containerId)) === null || _a === void 0 ? void 0 : _a.querySelector("#rootSVG").getBoundingClientRect();
    this.x = bb.x;
    this.y = bb.y;
  }
  resetListeners() {
    this.removeListeners().setListeners();
    return this;
  }
  setM2M(m2m) {
    this.m2m = m2m;
    return this;
  }
  setAnnotations(annotations) {
    this.annotations = annotations;
    return this;
  }
  setCurrentMEI(mei) {
    this.currentMEI = mei;
    return this;
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.container = document.getElementById(this.containerId);
    this.interactionOverlay = cq.getInteractOverlay(this.containerId);
    this.rootSVG = cq.getRootSVG(this.containerId);
    return this;
  }
  setInsertModeHandler(imh) {
    this.insertModeHandler = imh;
    return this;
  }
  setLoadDataCallback(loadDataCallback) {
    this.loadDataCallback = loadDataCallback;
    return this;
  }
  setSVGReloadCallback(svgReloadCallback) {
    this.svgReloadCallback = svgReloadCallback;
    return this;
  }
  getX() {
    return this.x;
  }
  getY() {
    return this.y;
  }
}
exports["default"] = WindowHandler;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/DOMCreator.js":
/*!**************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/DOMCreator.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.makeNewToggle = exports.makeNewSelect = exports.makeNewDatalist = exports.makeNewInput = exports.makeNewAccordionItem = exports.makeNewDiv = exports.makeNewDivH5P = exports.makeNewAElement = exports.makeNewButton = exports.makeNewButtonH5P = void 0;
class Toolbar {}
function makeNewButtonH5P(text, id, className) {
  return "<button type=\"button\" id=\"" + id + "\" class=\"" + className + "\">" + text + "</button>";
}
exports.makeNewButtonH5P = makeNewButtonH5P;
function makeNewButton(text, id, className, toggle = "", textInnerHTML = false) {
  var b = document.createElement("button");
  b.setAttribute("id", id);
  //b.setAttribute("type", "button")
  var classList = className.split(" ");
  classList.forEach(c => b.classList.add(c));
  if (toggle === "dropdown") {
    b.setAttribute("data-bs-toggle", toggle);
    b.classList.add("dropdown-toggle");
    //b.classList.add("dd")
    //b.setAttribute("aria-haspopup", "true")
    //b.setAttribute("aria-expanded", "false")
  }

  if (toggle === "button") {
    b.setAttribute("data-toggle", toggle);
    b.setAttribute("autocomplete", "off");
  }
  if (text.indexOf("&nbsp;") > -1 || textInnerHTML === true) {
    b.innerHTML = text;
  } else {
    b.textContent = text;
  }
  return b;
}
exports.makeNewButton = makeNewButton;
function makeNewAElement(text, id, className, href, textInnerHTML = false) {
  var a = document.createElement("a");
  var classList = className.split(" ");
  classList.forEach(c => a.classList.add(c));
  a.setAttribute("href", href);
  if (id.length > 0) a.setAttribute("id", id);
  if (textInnerHTML === true) {
    a.innerHTML = text;
  } else {
    a.textContent = text;
  }
  return a;
}
exports.makeNewAElement = makeNewAElement;
function makeNewDivH5P(id, className, role = "") {
  if (role !== "") {
    role = "role=\"" + role + "\"";
  }
  return "<div id=\"" + id + "\" class=\"" + className + "\"" + role + "></div>";
}
exports.makeNewDivH5P = makeNewDivH5P;
function makeNewDiv(id, className, attributes = null) {
  var div = document.createElement("div");
  div.setAttribute("id", id);
  if (["", " "].indexOf(className) === -1) {
    var classList = className.split(" ");
    classList.forEach(c => div.classList.add(c));
  }
  if (div.classList.contains("dropdown-menu")) {
    div.setAttribute("aria-labelledby", "insertMode");
  }
  if (attributes !== null) {
    for (const [key, value] of Object.entries(attributes)) {
      div.setAttribute(key, value);
    }
  }
  return div;
}
exports.makeNewDiv = makeNewDiv;
function makeNewAccordionItem(parentId, itemId, headerId, btnId, btnText, btnStyle = null, targetDivId) {
  var item = makeNewDiv(itemId, "accordion-item");
  var header = document.createElement("div");
  header.classList.add("accordion-header");
  header.setAttribute("id", headerId);
  var btn = makeNewButton(btnText, btnId, "container-fluid accordion-button collapsed " + btnStyle);
  btn.setAttribute("data-bs-toggle", "collapse");
  btn.setAttribute("data-bs-target", "#" + targetDivId);
  btn.setAttribute("aria-expanded", "false");
  btn.setAttribute("aria-controls", targetDivId);
  header.appendChild(btn);
  var div = makeNewDiv(targetDivId, "accordion-collapse collapse");
  div.setAttribute("aria-labelledby", headerId);
  div.setAttribute("data-bs-parent", "#" + parentId);
  item.appendChild(header);
  item.appendChild(div);
  return item;
}
exports.makeNewAccordionItem = makeNewAccordionItem;
function makeNewInput(id, type, className, value = null, listname = null, readonly = false) {
  var input = document.createElement("input");
  input.setAttribute("id", id);
  input.setAttribute("type", type);
  if (value !== null) {
    input.setAttribute("value", value);
  }
  if (className.length > 0) {
    var classList = className.split(" ");
    classList.forEach(c => input.classList.add(c));
  }
  if (listname !== null) {
    input.setAttribute("list", listname);
  }
  input.readOnly = readonly;
  return input;
}
exports.makeNewInput = makeNewInput;
function makeNewDatalist(id, optionValues) {
  var dataList = document.createElement("datalist");
  dataList.setAttribute("id", id);
  optionValues.forEach(value => {
    var option = document.createElement("option");
    option.setAttribute("value", value);
    dataList.append(option);
  });
  return dataList;
}
exports.makeNewDatalist = makeNewDatalist;
function makeNewSelect(id, optionValues) {
  var dataList = document.createElement("select");
  dataList.setAttribute("id", id);
  optionValues.forEach(value => {
    var option = document.createElement("option");
    option.setAttribute("value", value);
    option.textContent = value;
    dataList.append(option);
  });
  return dataList;
}
exports.makeNewSelect = makeNewSelect;
function makeNewToggle(id, classNames, labelText, divId) {
  var input = makeNewInput(id, "checkBox", "btn-check");
  input.checked = true;
  var label = document.createElement("label");
  if ((classNames === null || classNames === void 0 ? void 0 : classNames.length) > 0) {
    var classList = classNames.split(" ");
    classList.forEach(c => label.classList.add(c));
  }
  label.setAttribute("for", id);
  label.textContent = labelText;
  var div = makeNewDiv(divId, "toggleDiv");
  div.append(input);
  div.append(label);
  return div;
}
exports.makeNewToggle = makeNewToggle;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js":
/*!****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



//@ts-ignore
//const $ = H5P.jQuery
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.restoreXmlIdTags = exports.standardizeAccid = exports.meiToDoc = exports.reformatMEI = void 0;
/**
* clean mei to make it parsable as document
* @param mei the mei to be cleaned
* @returns cleaned mei
*/
function cleanMEI(mei) {
  mei = mei.replace(/\xml:id/gi, "id");
  mei = mei.replace(/\n/g, ""); // delete all unnecessary newline
  mei = mei.replace(/\s{2,}/g, ""); // delete all unnecessary whitespaces
  return mei;
}
function reformatMEI(mei) {
  mei = mei.replace(/\n/g, ""); // delete all unnecessary newline
  mei = mei.replace(/\s{2,}/g, ""); // delete all unnecessary whitespaces
  mei = mei.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, "\"");
  return mei;
}
exports.reformatMEI = reformatMEI;
/**
 * Converts MEI-String to DOM-conform objec
 * @param mei
 * @returns MEI as Document
 */
function meiToDoc(mei) {
  var meiCopy = (" " + mei).slice(1); //deep copy
  meiCopy = cleanMEI(meiCopy);
  var parser = new DOMParser();
  return parser.parseFromString(meiCopy, "text/xml");
}
exports.meiToDoc = meiToDoc;
/**
 * Copys all accid attributes into the note Element, if it has accid Element
 * @param xmlDoc
 * @returns xmlDoc
 */
function standardizeAccid(xmlDoc) {
  xmlDoc.querySelectorAll("accid").forEach(a => {
    var note = a.closest("note");
    var aAccid = a.getAttribute("accid");
    if (aAccid !== null) note.setAttribute("accid", aAccid);
    var aAccidGes = a.getAttribute("accid.ges");
    if (aAccidGes !== null) note.setAttribute("accid.ges", aAccidGes);
    a.remove();
  });
  return xmlDoc;
}
exports.standardizeAccid = standardizeAccid;
function restoreXmlIdTags(xmlDoc) {
  var parser = new DOMParser();
  var mei = new XMLSerializer().serializeToString(xmlDoc).replace(/\ id/gi, " xml:id");
  return parser.parseFromString(mei, "text/xml");
}
exports.restoreXmlIdTags = restoreXmlIdTags;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getTimestamp = exports.getElementTimestampById = exports.insertTempo = exports.insertMeter = exports.replaceMeterInScoreDef = exports.insertKey = exports.replaceKeyInScoreDef = exports.insertClef = exports.replaceClefinScoreDef = exports.paste = exports.removeStaff = exports.addStaff = exports.removeMeasure = exports.addMeasure = exports.cleanUp = exports.elementIsOverfilling = exports.changeDuration = exports.fillLayerWithRests = exports.fillWithRests = exports.disableFeatures = exports.changeMeter = exports.transposeByStep = exports.adjustAccids = exports.extrapolateMeter = exports.getAbsoluteRatio = exports.addToMEI = exports.removeFromMEI = void 0;
const meiConverter = __webpack_require__(/*! ./MEIConverter */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIConverter.js");
const random_1 = __webpack_require__(/*! ./random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const mappings_1 = __webpack_require__(/*! ./mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const mei_template_1 = __webpack_require__(/*! ../assets/mei_template */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/assets/mei_template.js");
const MeasureMatrix_1 = __webpack_require__(/*! ../datastructures/MeasureMatrix */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/MeasureMatrix.js");
const countableNoteUnitSelector = ":scope *[dur]:not([grace])";
const overfillMeasure = false;
const siblingNames = ["note", "chord", "clef", "beam"];
// ":scope > note:not([grace])," +
// ":scope > chord," +
// ":scope > beam > chord," +
// ":scope > beam > note:not([grace])," +
// ":scope > rest"
////// DELETE //////
/**
 * Remove Elements from MEI.
 * Some Elements (such as accid...) could are not represeented as elements in the current MEI.
 * These have to be found in the parent element which have these as an attribute.
 * @param scoreElements Array of Elements which are marked in the SVG Representation (notes, chords, slur, tie, accid etc..)
 * @param currentMEI
 * @returns
 */
function removeFromMEI(scoreElements, currentMEI) {
  return new Promise(resolve => {
    scoreElements.forEach(se => {
      var _a;
      if (currentMEI.getElementById(se === null || se === void 0 ? void 0 : se.id) !== null) {
        // this only applies for <note> and <rest>
        //do not remove completely, replace with rest
        //currentMEI.getElementById(note.id).remove()
        if (["note", "chord"].some(s => se.classList.contains(s))) {
          replaceWithRest(se, currentMEI);
        } else {
          currentMEI.getElementById(se.id).remove(); // possibility to remove rests entirely
        }
      } else {
        //may be some of the following: accid
        var closestNote = currentMEI.getElementById((_a = se === null || se === void 0 ? void 0 : se.closest(".note")) === null || _a === void 0 ? void 0 : _a.id);
        if (closestNote !== null) {
          //console.log("removing ", se)
          var attrName = se.classList.item(0).toLowerCase();
          closestNote.removeAttribute(attrName);
          if (attrName === "accid") {
            closestNote.removeAttribute("accid.ges");
          }
        }
      }
    });
    //removeEmptyElements(currentMEI)
    // For now: No Shifts (22.07.2021)
    // if($(".measure").length > 1){
    //   checkDeleteShifts(currentMEI);
    // }
    cleanUp(currentMEI);
    //fillWithRests(currentMEI)
    // Warum ist das ein Problem?
    currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
    resolve(currentMEI);
  });
}
exports.removeFromMEI = removeFromMEI;
function checkDeleteShifts(currentMEI) {
  var meterRatio = getMeterRatioGlobal(currentMEI);
  var shifters = new Array();
  var elements = currentMEI.getElementsByTagName("layer");
  Array.from(elements).forEach(layer => {
    var actualMeterFill = getAbsoluteRatio(layer);
    var layerLevel = layer.getAttribute("n");
    var staffLevel = layer.closest("staff").getAttribute("n");
    var nextSibling = layer.closest("measure").nextElementSibling;
    if (actualMeterFill < meterRatio && nextSibling !== null) {
      let hasStaff = nextSibling.querySelector("staff[n$='" + staffLevel + "'") !== null ? true : false;
      let hasLayer = nextSibling.querySelector("layer[n$='" + layerLevel + "'") !== null ? true : false;
      if (hasStaff && hasLayer) {
        nextSibling = nextSibling.querySelector("staff[n$='" + staffLevel + "'").querySelector("layer[n$='" + layerLevel + "'");
        Array.from(nextSibling.querySelectorAll(countableNoteUnitSelector)).forEach(node => {
          if (actualMeterFill < meterRatio) {
            shifters.push(node);
          }
          actualMeterFill += 1 / parseInt(node.getAttribute("dur"));
        });
      }
    }
    if (shifters.length > 0) {
      doShiftLeft(shifters, meterRatio);
      shifters.length = 0;
      checkDeleteShifts(currentMEI);
    }
  });
}
function getMeterRatioGlobal(currentMEI) {
  var staffDef = currentMEI.getElementsByTagName("staffDef").item(0);
  var meterRatio = null;
  //Do I know the meter?
  if (staffDef.getAttribute(constants_1.constants._METERCOUNT_) !== null && staffDef.getAttribute(constants_1.constants._METERUNIT_) !== null) {
    meterRatio = parseInt(staffDef.getAttribute(constants_1.constants._METERCOUNT_)) / parseInt(staffDef.getAttribute(constants_1.constants._METERUNIT_));
  } else {
    meterRatio = extrapolateMeter(currentMEI);
  }
  return meterRatio;
}
/**
 *
 * @param currentMEI
 * @param refElement Must be a staff-Element at most
 */
function getMeterRatioLocal(currentMEI, refElement) {
  var _a;
  var staffElement;
  if (refElement.tagName !== "staff") {
    if (refElement.closest("staff") === null) {
      staffElement = (_a = currentMEI.getElementById(refElement.id)) === null || _a === void 0 ? void 0 : _a.closest("staff");
    } else {
      staffElement = refElement.closest("staff");
    }
  } else {
    staffElement = refElement;
  }
  if (staffElement === null || staffElement == undefined) {
    throw new Error("RefElement must be a staff-Element at most");
  }
  var mm = new MeasureMatrix_1.default();
  mm.populateFromMEI(currentMEI);
  var measureIdx = staffElement.closest("measure").getAttribute("n");
  var staffIdx = staffElement.getAttribute("n");
  var mmStaff = mm.get(measureIdx, staffIdx);
  return parseInt(mmStaff.meterSig.count) / parseInt(mmStaff.meterSig.unit);
}
//////// INSERT ////////// 
/**
 * Insert given sound event into MEI
 * @param newSound NewNote or NewChord to be inserted
 * @param currentMEI MEI as Document
 * @param replace Switching to replaceMode (default: False)
 * @param scoreGraph
 * @returns mei
 */
function addToMEI(newSound, currentMEI, replace = false, scoreGraph = null) {
  var _a;
  //return new Promise<Document>((resolve): void => {
  var currMeiClone = currentMEI.cloneNode(true);
  var newElem;
  var nearestNoteIsSameDurRest = false;
  if (newSound.hasOwnProperty("pname")) {
    var newNote = newSound;
    if (newNote.rest) {
      newElem = currentMEI.createElement("rest");
    } else {
      newElem = currentMEI.createElement("note");
      newElem.setAttribute("pname", newNote.pname);
      newElem.setAttribute("oct", newNote.oct);
      if (newNote.accid != undefined) {
        newElem.setAttribute("accid.ges", newNote.accid);
      }
    }
    newElem.setAttribute("dur", newNote.dur);
    if (newNote.dots != undefined) {
      newElem.setAttribute("dots", newNote.dots);
    }
    if (newNote.id != undefined && newNote.id !== null) {
      newElem.setAttribute("id", newNote.id);
    }
    //Do sthm with chords
    if (newNote.chordElement != undefined && !newNote.rest) {
      var chord;
      var meiChordEl = currentMEI.getElementById(newNote.chordElement.id);
      if (newNote.chordElement.classList.contains("chord")) {
        chord = meiChordEl;
        chord.appendChild(newElem);
      } else {
        chord = document.createElement("chord");
        chord.setAttribute("id", random_1.uuidv4());
        chord.setAttribute("dur", meiChordEl.getAttribute("dur"));
        if (meiChordEl.getAttribute("dots") !== null) {
          chord.setAttribute("dots", meiChordEl.getAttribute("dots"));
        }
        chord.appendChild(newElem);
        meiChordEl.parentElement.insertBefore(chord, meiChordEl);
        chord.appendChild(meiChordEl);
      }
      chord.childNodes.forEach(n => {
        n.removeAttribute("dur");
        n.removeAttribute("dots");
      });
    } else if (newNote.nearestNoteId !== null) {
      var sibling = currentMEI.getElementById(newNote.nearestNoteId);
      nearestNoteIsSameDurRest = sibling.tagName === "rest" && sibling.getAttribute("dur") === newElem.getAttribute("dur") && sibling.getAttribute("dots") === newElem.getAttribute("dots");
      //special rule for first element in layer
      if (sibling.tagName === "layer") {
        if (scoreGraph !== null) {
          sibling = (_a = currentMEI.getElementById(scoreGraph.getCurrentNode().getRight().getId())) === null || _a === void 0 ? void 0 : _a.parentElement;
        }
        var firstChild = sibling.firstChild;
        sibling.insertBefore(newElem, firstChild);
        if (replace) {
          changeDuration(currentMEI, [firstChild], newElem);
        }
      } else {
        var parentLayer = sibling.closest("layer");
        var trueParent = sibling.parentElement;
        var isTrueSibling = parentLayer == trueParent;
        var trueSibling = sibling;
        if (!isTrueSibling) {
          var currParent = trueParent;
          while (!isTrueSibling) {
            //isTrueSibling = (trueSibling.tagName === "note" && trueSibling.closest("chord") === null) || trueSibling.closest("chord") === trueSibling //parentLayer == currParent.parentElement 
            isTrueSibling = siblingNames.includes(trueSibling.tagName) && trueSibling.closest("chord") === null || trueSibling.closest("chord") === trueSibling;
            if (!isTrueSibling) {
              trueSibling = currParent;
              currParent = currParent === null || currParent === void 0 ? void 0 : currParent.parentElement;
            }
          }
        }
        //newElem.classList.add("marked")
        //if(replace && trueSibling.nextSibling !== null){
        if (replace) {
          if (newNote.relPosX === "left") {
            let ms = Array.from(trueSibling.parentElement.querySelectorAll("note:not(chord note), chord, rest, mRest"));
            var measureSiblings = ms.filter((v, i) => i >= ms.indexOf(trueSibling));
            trueSibling.parentElement.insertBefore(newElem, trueSibling);
            changeDuration(currentMEI, measureSiblings, newElem);
            //changeDuration(currentMEI, "reduce", measureSiblings, newElem)
            //changeDuration(currentMEI, "reduce", [(trueSibling as Element)], newElem)
          } else {
            if (["clef"].every(el => {
              var _a;
              return ((_a = trueSibling.nextElementSibling) === null || _a === void 0 ? void 0 : _a.tagName) !== el;
            }) && trueSibling.nextElementSibling !== null) {
              let ms = Array.from(trueSibling.parentElement.querySelectorAll("note:not(chord note), chord, rest, mRest"));
              var measureSiblings = ms.filter((v, i) => i >= ms.indexOf(trueSibling.nextSibling));
              trueSibling.parentElement.insertBefore(newElem, trueSibling.nextSibling);
              changeDuration(currentMEI, measureSiblings, newElem);
              //changeDuration(currentMEI, "reduce", measureSiblings, newElem)
              //changeDuration(currentMEI, "reduce", [(trueSibling.nextSibling as Element)], newElem)
            } else {
              //trueSibling.parentElement.append(newElem)
              trueSibling.parentElement.insertBefore(newElem, trueSibling.nextElementSibling);
            }
          }
        } else {
          if (newNote.relPosX === "left") {
            trueSibling.parentElement.insertBefore(newElem, trueSibling);
          } else {
            trueSibling.parentElement.insertBefore(newElem, trueSibling.nextElementSibling);
          }
        }
      }
      // For now: No Shifts (22.07.2021)
      // if($(".measure").length > 1){
      //   checkInsertShifts(currentMEI);
      // }
    } else {
      currentMEI.getElementById(newNote.staffId).querySelector("layer").appendChild(newElem);
    }
  } else {
    // is newChord
    //TODO
    var newChord = newSound;
    newElem = convertToElement(newChord, currentMEI);
    var nearestElem = currentMEI.getElementById(newChord.nearestNoteId);
    if ((nearestElem === null || nearestElem === void 0 ? void 0 : nearestElem.tagName.toUpperCase()) === "LAYER") {
      nearestElem.insertBefore(newElem, nearestElem.firstChild);
    } else if (newChord.relPosX === "left") {
      nearestElem.parentElement.insertBefore(newElem, currentMEI.getElementById(newChord.nearestNoteId));
    } else {
      nearestElem.parentElement.insertBefore(newElem, currentMEI.getElementById(newChord.nearestNoteId).nextSibling);
    }
  }
  //return if measure is too long
  if (!overfillMeasure) {
    var newMeasureRatio = getAbsoluteRatio(newElem.closest("layer"));
    var measureRatio = getMeterRatioLocal(currMeiClone, newElem);
    if (newMeasureRatio > measureRatio) {
      currentMEI = currMeiClone;
    }
  }
  fillLayerWithRests(newElem.closest("layer"), currentMEI);
  cleanUp(currentMEI);
  // Warum ist das ein Problem?
  adjustAccids(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
  //resolve(currentMEI)
  //})
}

exports.addToMEI = addToMEI;
/**
 * Check if notes have to be shifted after insertion
 * @param currentMEI
 */
function checkInsertShifts(currentMEI) {
  var staffDef = currentMEI.getElementsByTagName("staffDef").item(0);
  var meterRatio = parseInt(staffDef.getAttribute(constants_1.constants._METERCOUNT_)) / parseInt(staffDef.getAttribute(constants_1.constants._METERUNIT_));
  if (staffDef.getAttribute(constants_1.constants._METERCOUNT_) !== null && staffDef.getAttribute(constants_1.constants._METERUNIT_) !== null) {
    meterRatio = parseInt(staffDef.getAttribute(constants_1.constants._METERCOUNT_)) / parseInt(staffDef.getAttribute(constants_1.constants._METERUNIT_));
  } else {
    meterRatio = extrapolateMeter(currentMEI);
  }
  var shifters = new Array();
  var elements = currentMEI.getElementsByTagName("layer");
  Array.from(elements).forEach(layer => {
    var i = 0;
    var layerChildern = layer.querySelectorAll(countableNoteUnitSelector);
    Array.from(layerChildern).forEach(node => {
      i += getAbsoluteRatio(node); //1/parseInt(node.getAttribute("dur"))
      if (i > meterRatio) {
        shifters.push(node);
      }
    });
    if (shifters.length > 0) {
      doShiftRight(shifters, meterRatio, layer);
      shifters.length = 0;
      checkInsertShifts(currentMEI);
    }
  });
}
/**
 * Shift all Elements to the right (according to measure borders)
 * @param arr Array of Elements to be shifted
 * @param meterRatio
 * @param currentLayer
 */
function doShiftRight(arr, meterRatio, currentLayer) {
  arr.forEach((element, elementIdx) => {
    var parentMeasure = element.closest("measure");
    var parentMeasureSibling = null;
    parentMeasureSibling = parentMeasure.nextElementSibling;
    if (parentMeasureSibling === null) {
      parentMeasureSibling = parentMeasure.parentElement.appendChild(createEmptyCopy(parentMeasure));
    }
    var layerLevel = element.closest("layer").getAttribute("n");
    var staffLevel = element.closest("staff").getAttribute("n");
    var targetStaff = parentMeasureSibling.querySelector("staff[n$='" + staffLevel + "'");
    var targetLayer;
    if (targetStaff.querySelector("layer[n$='" + layerLevel + "'") !== null) {
      targetLayer = targetStaff.querySelector("layer[n$='" + layerLevel + "'");
    } else {
      targetLayer = document.createElement("layer");
      targetLayer.setAttribute("id", "layer-" + random_1.uuidv4());
      targetLayer.setAttribute("n", layerLevel);
      targetStaff.appendChild(targetLayer);
    }
    var absLayerRatio = getAbsoluteRatio(currentLayer);
    var elementRatio = getAbsoluteRatio(element);
    var chunkDurRight = absLayerRatio - meterRatio;
    var chunkDurLeft = elementRatio - chunkDurRight;
    if (chunkDurRight > elementRatio) {
      chunkDurRight = elementRatio;
      chunkDurLeft = 0;
    }
    //check if note must be split
    if (absLayerRatio + elementRatio > meterRatio && chunkDurRight * chunkDurLeft !== 0) {
      //check for dots
      if (Number.isInteger(1 / chunkDurLeft) && Number.isInteger(1 / chunkDurRight)) {
        element.removeAttribute("dots");
        var splitRightElement = element.cloneNode(true);
        splitRightElement.setAttribute("id", random_1.uuidv4());
        splitRightElement.setAttribute("dur", Math.abs(1 / chunkDurRight).toString());
        var beforeElement = elementIdx === 0 ? targetLayer.firstChild : targetLayer.children.item(elementIdx);
        targetLayer.insertBefore(splitRightElement, beforeElement);
        //change already existing element
        element.setAttribute("dur", Math.abs(1 / chunkDurLeft).toString());
      } else {
        var dottedElements = splitDottedNote(element, chunkDurLeft, chunkDurRight);
        dottedElements.left.forEach(lel => currentLayer.appendChild(lel));
        var beforeElement = elementIdx === 0 ? targetLayer.firstChild : targetLayer.children.item(elementIdx);
        dottedElements.right.forEach(rel => {
          rel.setAttribute("id", random_1.uuidv4());
          if (rel.tagName === "chord") {
            rel.querySelectorAll("note").forEach(rl => {
              rl.setAttribute("id", random_1.uuidv4());
            });
          }
          targetLayer.insertBefore(rel, beforeElement);
        });
        element.remove();
      }
    } else {
      var beforeElement = elementIdx === 0 ? targetLayer.firstChild : targetLayer.children.item(elementIdx);
      targetLayer.insertBefore(element, beforeElement);
    }
  });
}
function createEmptyCopy(element) {
  let copy = element.cloneNode(true);
  let childrenToDelete = Array.from(copy.querySelectorAll("layer > *, measure > slur"));
  childrenToDelete.forEach(child => {
    child.parentNode.removeChild(child);
  });
  //set new ids for everything
  copy.setAttribute("id", random_1.uuidv4());
  copy.setAttribute("n", (parseInt(element.getAttribute("n")) + 1).toString());
  let allElements = copy.querySelectorAll("*");
  allElements.forEach(e => e.setAttribute("id", random_1.uuidv4()));
  return copy;
}
///// GENERAL OPERATIONS /////
function getAbsoluteRatio(el) {
  var i = 0;
  var arr;
  if (el === null) {
    return 0;
  }
  if (el.tagName !== "layer") {
    //if single Element is given, eg. chord, note
    arr = [el];
    //if element is tied to another
    // el.closest("measure")?.querySelectorAll("tie").forEach(t => {
    //   if(t.getAttribute("startid").includes(el.id)){
    //     if(el.closest("layer").querySelector(t.getAttribute("endid")) !== null){
    //       arr.push(el.closest("mei").querySelector(t.getAttribute("endid")))
    //     }
    //   }
    // })
  } else {
    arr = Array.from(el.querySelectorAll(countableNoteUnitSelector));
  }
  arr.forEach(node => {
    i += 1 / parseInt(node.getAttribute("dur"));
    let baseDur = parseInt(node.getAttribute("dur"));
    if (node.getAttribute("dots") !== null) {
      let dots = parseInt(node.getAttribute("dots"));
      i += dots == 0 ? 0 : (dots * 2 - 1) / (baseDur * 2 * dots);
    }
  });
  return i;
}
exports.getAbsoluteRatio = getAbsoluteRatio;
function ratioToDur(ratio) {
  var dur;
  var dots = 0;
  //1. next smallest ratio of basedur
  var basedur = 1;
  while (basedur > ratio) {
    basedur = basedur / 2;
  }
  dur = 1 / basedur;
  ratio -= basedur;
  if (ratio > 0) {
    if (ratio > dur / 2) {
      dots = 2;
    } else {
      dots = 1;
    }
  }
  return [dur, dots];
}
/**
 * Shift Elements to left (according to measure borders)
 * @param arr Array of Elements to shift
 * @param meterRatio meterRatio of the piece
 */
function doShiftLeft(arr, meterRatio) {
  arr.forEach(element => {
    var parentMeasure = element.closest("measure");
    var parentMeasureSibling = parentMeasure.previousElementSibling;
    var layerLevel = element.closest("layer").getAttribute("n");
    var targetLayer = parentMeasureSibling.querySelector("layer[n$='" + layerLevel + "'"); // should be <layer>
    var absLayerRatio = getAbsoluteRatio(targetLayer);
    var elementRatio = getAbsoluteRatio(element);
    //check if note must be split
    if (absLayerRatio + elementRatio > meterRatio) {
      var chunkDurLeft = meterRatio - absLayerRatio;
      var chunkDurRight = elementRatio - chunkDurLeft;
      //check for dots
      if (Number.isInteger(1 / chunkDurLeft) && Number.isInteger(1 / chunkDurRight)) {
        element.removeAttribute("dots");
        var splitLeftElement = element.cloneNode(true);
        splitLeftElement.setAttribute("id", random_1.uuidv4());
        splitLeftElement.setAttribute("dur", Math.abs(1 / chunkDurLeft).toString());
        targetLayer.appendChild(splitLeftElement);
        //change already existing element
        element.setAttribute("dur", Math.abs(1 / chunkDurRight).toString());
      } else {
        var elements = splitDottedNote(element, chunkDurLeft, chunkDurRight);
        elements.left.forEach(lel => {
          lel.setAttribute("id", random_1.uuidv4());
          if (lel.tagName === "chord") {
            lel.querySelectorAll("note").forEach(ll => {
              ll.setAttribute("id", random_1.uuidv4());
            });
          }
          targetLayer.appendChild(lel);
        });
        elements.right.forEach(rel => element.parentElement.insertBefore(rel, element));
        element.remove();
      }
    } else {
      targetLayer.appendChild(element);
      //is current Layer empty and should be deleted? if split occured this should not be the case
      var parentLayer = parentMeasure.querySelector("layer[n$='" + layerLevel + "'"); // should always be <layer>
      // if(parentLayer.childNodes.length === 0){
      //    parentMeasure.remove();
      // }
    }
  });
}
/**
 * Operations to split dotted notes
 * @param note reference note elements
 * @param chunkLeftDur calculated ratio left
 * @param chunkRightDur calculated ratio right
 * @returns collection of right ans left elements
 */
function splitDottedNote(note, chunkLeftDur, chunkRightDur) {
  let gcdLeft = gcd(chunkLeftDur);
  let gcdRight = gcd(chunkRightDur);
  let countLeftSubNotes = findDotsRecursive(chunkLeftDur, gcdLeft); //return z.B.: [8, 16]
  let countRightSubNotes = findDotsRecursive(chunkRightDur, gcdRight); //return z.B. [2, 8, 16]
  let newLeftElement = createElementsFromSubNotes(note, countLeftSubNotes);
  let newRightElement = createElementsFromSubNotes(note, countRightSubNotes);
  return {
    left: newLeftElement,
    right: newRightElement
  };
}
/**
 * Create actual XML Elements from sequence of dotted notes
 * @param note
 * @param subNoteDurs
 * @returns
 */
function createElementsFromSubNotes(note, subNoteDurs) {
  let newElements = new Array();
  //find sliceBoundaries in array
  let arraySliceIdx = new Array();
  for (var i = 0; i < subNoteDurs.length; i++) {
    if (i > 0) {
      if (subNoteDurs[i] !== subNoteDurs[i - 1] * 2) {
        arraySliceIdx.push(i);
      }
    }
  }
  //find actual slices 
  let durSlices = new Array();
  for (var i = 0; i < arraySliceIdx.length + 1; i++) {
    if (i === 0) {
      durSlices.push(subNoteDurs.slice(0, arraySliceIdx[i]));
    } else if (i === arraySliceIdx.length) {
      durSlices.push(subNoteDurs.slice(arraySliceIdx[i - 1]));
    } else {
      durSlices.push(subNoteDurs.slice(arraySliceIdx[i - 1], arraySliceIdx[i]));
    }
  }
  //create notes
  let createArr = durSlices.length > 0 ? durSlices : [subNoteDurs];
  createArr.forEach(durs => {
    let newElement = note.cloneNode(true);
    newElement.removeAttribute("dots"); //eventual dots could be in original note value
    newElement.setAttribute("dur", Math.abs(durs[0]).toString());
    let dots = 0;
    durs.forEach((dur, i) => {
      if (i > 0) {
        dots += 1;
      }
    });
    if (dots > 0) {
      newElement.setAttribute("dots", dots.toString());
    }
    newElements.push(newElement);
  });
  return newElements;
}
/**
 * Compute greatest integer divisor
 * @param chunkDur Duration of given Chunk
 * @returns
 */
function gcd(chunkDur) {
  var largestModulo = null;
  var baseValue = 1;
  var mod = 0;
  while (largestModulo === null) {
    mod = chunkDur % baseValue;
    if (mod === 0) {
      largestModulo = baseValue;
    }
    baseValue = baseValue / 2;
  }
  return largestModulo;
}
/**
 * Splits duration of given chunk into possible dotted sequences
 * @param chunk
 * @param smallestUnit = greatest integer divisor
 * @returns
 */
function findDotsRecursive(chunk, smallestUnit) {
  var arr = new Array();
  var sliceChunk = chunk / smallestUnit;
  if (Math.floor(sliceChunk) > 1) {
    arr = arr.concat(findDotsRecursive(chunk, smallestUnit * 2));
  } else if (Math.floor(sliceChunk) < 1) {
    arr = arr.concat(findDotsRecursive(chunk, smallestUnit / 2));
  } else if (!Number.isInteger(sliceChunk)) {
    arr.push(1 / 1 / smallestUnit);
    arr = arr.concat(findDotsRecursive(chunk - smallestUnit, smallestUnit));
  } else {
    arr.push(1 / 1 / smallestUnit);
  }
  return arr; //.sort((a,b) => a-b)
}
/**
 * Extrapolates meter, if is not given in scoreDef. Iterates through each staff to get the mostly found ratio
 * @param currentMEI
 * @returns meter ratio
 */
function extrapolateMeter(currentMEI) {
  var ratioMap = new Map();
  var xmlCopy = currentMEI.cloneNode(true);
  var layers = Array.from(xmlCopy.querySelectorAll("layer"));
  var mostlyUsedRatio = 0;
  layers.forEach(layer => {
    if (layer.childElementCount === 0) {
      return;
    }
    //strip all unnecessary elements: garce notes, beams 
    //which do not contribute to count of measure duration
    var beams = Array.from(layer.querySelectorAll("beam"));
    beams.forEach(beam => {
      Array.from(beam.children).forEach(c => {
        beam.parentElement.append(c);
      });
      xmlCopy.getElementById(beam.id).remove();
    });
    var graceNotes = Array.from(layer.querySelectorAll("[grace]"));
    graceNotes.forEach(g => {
      xmlCopy.getElementById(g.id).remove();
    });
    var childElements = Array.from(layer.children);
    var ratio = 0;
    childElements.forEach(element => {
      ratio += getAbsoluteRatio(element);
    });
    if (!ratioMap.has(ratio)) {
      ratioMap.set(ratio, 1);
    } else {
      ratioMap.set(ratio, ratioMap.get(ratio) + 1);
    }
    var prevItCount = 0;
    for (const [key, value] of ratioMap.entries()) {
      if (value > prevItCount) {
        prevItCount = value;
        mostlyUsedRatio = key;
      }
    }
  });
  return mostlyUsedRatio;
}
exports.extrapolateMeter = extrapolateMeter;
/**
 * Adjust all accids according to key signature
 * e.g. after changing global Key
 * @param currentMEI
 * @returns
 */
function adjustAccids(currentMEI) {
  var measureMatrix = new MeasureMatrix_1.default();
  measureMatrix.populateFromMEI(currentMEI);
  var prevAccidMap = new Map(); // key: pname+oct
  var currentLayer = "1";
  var currentStaff = "1";
  var currentMeasure = "1";
  currentMEI.querySelectorAll("note").forEach(note => {
    var layerN = note.closest("layer").getAttribute("n");
    var staffN = note.closest("staff").getAttribute("n");
    var measureN = note.closest("measure").getAttribute("n");
    if (layerN !== currentLayer || staffN !== currentStaff || measureN !== currentMeasure) {
      prevAccidMap = new Map(); // key: pname+oct
      currentLayer = layerN;
      currentStaff = staffN;
      currentMeasure = measureN;
    }
    var sig = measureMatrix.get(measureN, staffN).keysig;
    var sigSymbol = sig.charAt(1);
    var signedNotes = mappings_1.keysigToNotes.get(sig);
    var accid = note.getAttribute("accid") || note.getAttribute("accid.ges");
    accid = accid === "n" || accid === "" ? null : accid;
    // remove all accids so I don't have to look it up several times
    note.removeAttribute("accid");
    note.removeAttribute("accid.ges");
    var pname = note.getAttribute("pname");
    var oct = note.getAttribute("oct");
    var mapKey = pname + oct;
    var noteInKey = signedNotes.some(sn => sn === pname);
    if (accid === null) {
      // "I have no accid"
      accid = "n";
      if (prevAccidMap.has(mapKey)) {
        // "does someone before me has any accid?"
        if (prevAccidMap.get(mapKey) === "n") {
          prevAccidMap.delete(mapKey);
        } else {
          note.setAttribute("accid", accid);
          prevAccidMap.set(mapKey, accid);
        }
      } else if (noteInKey) {
        note.setAttribute("accid", accid);
        prevAccidMap.set(mapKey, accid);
      }
    } else {
      // "I have accid" 
      if (prevAccidMap.has(mapKey)) {
        if (prevAccidMap.get(mapKey) === accid) {
          note.setAttribute("accid.ges", accid);
          prevAccidMap.set(mapKey, accid);
        } else {
          note.setAttribute("accid", accid);
          prevAccidMap.set(mapKey, accid);
        }
      } else {
        if (noteInKey) {
          if (sigSymbol === accid) {
            if (prevAccidMap.has(mapKey)) {
              if (prevAccidMap.get(mapKey) === accid) {
                note.setAttribute("accid.ges", accid);
                prevAccidMap.set(mapKey, accid);
              } else {
                note.setAttribute("accid", accid);
                prevAccidMap.set(mapKey, accid);
              }
            } else {
              if (sigSymbol === accid) {
                note.setAttribute("accid.ges", accid);
                prevAccidMap.set(mapKey, accid);
              } else {
                note.setAttribute("accid", accid);
                prevAccidMap.set(mapKey, accid);
              }
            }
          } else {
            note.setAttribute("accid", accid);
            prevAccidMap.set(mapKey, accid);
          }
        } else {
          note.setAttribute("accid", accid);
          prevAccidMap.set(mapKey, accid);
        }
      }
    }
  });
  return currentMEI;
}
exports.adjustAccids = adjustAccids;
/**
 * Transpose marked notes according to direcion (up or down)
 * @param currentMEI
 * @param direction
 * @returns
 */
function transposeByStep(currentMEI, direction) {
  //document.querySelectorAll(".activeContainer #rootSVG :is(.note.marked, .note.lastAdded)").forEach(nm => {
  document.querySelectorAll(".activeContainer :is(.note.marked, .note.lastAdded)").forEach(nm => {
    if (nm.id === null || nm.id == undefined || nm.id === "") return; // make shure that only the id is taken from the verovio svg so that the element will only be effected once
    var id = nm.id;
    var noteMEI = currentMEI.getElementById(id);
    var pname = noteMEI.getAttribute("pname");
    var oct = parseInt(noteMEI.getAttribute("oct"));
    var accid = noteMEI.getAttribute("accid") || noteMEI.getAttribute("accid.ges");
    if (accid === null || typeof accid == "undefined" || accid === "n") {
      accid = "";
    }
    var nextNote;
    if (direction === "up") {
      nextNote = mappings_1.nextStepUp.get(pname + accid);
    } else if (direction === "down") {
      nextNote = mappings_1.nextStepDown.get(pname + accid);
    }
    noteMEI.setAttribute("pname", nextNote.charAt(0));
    if (nextNote.charAt(1) !== "") {
      noteMEI.setAttribute("accid", nextNote.charAt(1));
    } else {
      noteMEI.removeAttribute("accid");
      noteMEI.removeAttribute("accid.ges");
    }
    //Change Octave
    if (["c", "cf"].includes(pname + accid) && direction === "down") {
      noteMEI.setAttribute("oct", (oct - 1).toString());
    }
    if (["b", "bs"].includes(pname + accid) && direction === "up") {
      noteMEI.setAttribute("oct", (oct + 1).toString());
    }
  });
  return adjustAccids(currentMEI);
}
exports.transposeByStep = transposeByStep;
/**
 * Change Meter according to #timeUnit and #timeCount in side bar option.
 * @param currentMEI
 * @returns changed mei; null, if input has no valid values
 */
function changeMeter(currentMEI) {
  var timeCount = document.querySelector(".activeElement #timeCount");
  var timeUnit = document.querySelector(".activeElement #timeUnit");
  //@ts-ignore
  var timeCountValue = timeCount.value; //getAttribute("value")
  //@ts-ignore
  var timeUnitValue = timeUnit.value; //getAttribute("value")
  if (timeCountValue !== null && timeUnitValue !== null) {
    timeCountValue = timeCountValue.trim();
    timeUnitValue = timeUnitValue.trim();
    if (!isNaN(parseInt(timeCountValue)) && !isNaN(parseInt(timeUnitValue))) {
      var oldMeterRatio = getMeterRatioGlobal(currentMEI);
      currentMEI.querySelectorAll("staffDef").forEach(sd => {
        sd.setAttribute("meter.count", timeCountValue);
        sd.setAttribute("meter.unit", timeUnitValue);
      });
      // adjust noteposition 
      var newMeterRatio = getMeterRatioGlobal(currentMEI);
      if (oldMeterRatio > newMeterRatio) {
        checkInsertShifts(currentMEI);
      } else if (oldMeterRatio < newMeterRatio) {
        checkDeleteShifts(currentMEI);
      }
      if (oldMeterRatio !== newMeterRatio) {
        return currentMEI;
      }
    }
  }
  return currentMEI; //null  
}

exports.changeMeter = changeMeter;
/**
 * disable features if necesseray (only supposed to be used for debugging)
 * @param features Array of TagNames and AttributeNames which have to be disabled (deleted)
 * @param currentMEI  mei
 * @returns
 */
function disableFeatures(features, currentMEI) {
  //console.log("Features disabled:", features)
  features.forEach(f => {
    var elements = Array.from(currentMEI.getElementsByTagName(f));
    elements.forEach(e => {
      let parent = e.parentElement;
      e.remove();
      if (parent.childElementCount === 0) {
        parent.remove();
      }
    });
    elements = Array.from(currentMEI.querySelectorAll("*[" + f + "]"));
    elements.forEach(e => {
      let parent = e.parentElement;
      e.remove();
      if (parent.childElementCount === 0) {
        parent.remove();
      }
    });
  });
  return currentMEI;
}
exports.disableFeatures = disableFeatures;
/**
 * When a note is shortened, fill old remaining duration with rests
 * @param newElement
 * @param oldElement
 * @param currentMEI
 */
function fillWithRests(newElement, oldElement, currentMEI) {
  var newRatio = getAbsoluteRatio(newElement);
  var oldRatio = getAbsoluteRatio(oldElement);
  if (newRatio < oldRatio) {
    var remainRatio = oldRatio - newRatio;
    var smallestUnit = gcd(remainRatio);
    var restDur = ratioToDur(smallestUnit)[0];
    var restCount = remainRatio / smallestUnit;
    newElement.classList.add("changed");
    for (var i = 0; i < restCount; i++) {
      var rest = createNewRestElement(restDur);
      currentMEI.getElementById(newElement.id).parentElement.insertBefore(rest, newElement.nextElementSibling);
    }
  }
  return currentMEI;
}
exports.fillWithRests = fillWithRests;
function fillLayerWithRests(layer, currentMEI) {
  var targetDur = getMeterRatioLocal(currentMEI, layer);
  var currentDur = getAbsoluteRatio(layer);
  if (currentDur < targetDur) {
    var remainRatio = targetDur - currentDur;
    var smallestUnit = gcd(remainRatio);
    var restDur = ratioToDur(smallestUnit)[0];
    var restCount = remainRatio / smallestUnit;
    for (var i = 0; i < restCount; i++) {
      var rest = createNewRestElement(restDur);
      Array.from(layer.querySelectorAll("note, chord, rest")).reverse()[0].insertAdjacentElement("afterend", rest);
    }
  }
}
exports.fillLayerWithRests = fillLayerWithRests;
/**
 * Fill Empty Space with rest
 * @deprecated
 * @param currentMEI
 */
function _fillWithRests(currentMEI) {
  var staffDef = currentMEI.getElementsByTagName("staffDef").item(0);
  var meterCount;
  var meterUnit;
  var meterRatio;
  if (staffDef.getAttribute(constants_1.constants._METERCOUNT_) !== null && staffDef.getAttribute(constants_1.constants._METERUNIT_) !== null) {
    meterCount = staffDef.getAttribute(constants_1.constants._METERCOUNT_);
    meterUnit = staffDef.getAttribute(constants_1.constants._METERUNIT_);
    meterRatio = parseInt(meterCount) / parseInt(meterUnit);
  } else {
    var meterRatio = getMeterRatioGlobal(currentMEI);
    meterCount = (meterRatio * 4).toString();
    meterUnit = "4";
  }
  currentMEI.querySelectorAll("measure").forEach(m => {
    m.querySelectorAll("staff").forEach(s => {
      s.querySelectorAll("layer").forEach((l, idx) => {
        //mRest for empty Layer
        if (l.childElementCount === 0) {
          if (idx === 0) {
            var restEl = document.createElementNS(constants_1.constants._MEINS_, "mRest");
            l.appendChild(restEl);
          } else {
            // remove 1+ empty layer
            l.remove();
          }
        } else {
          var actualMeterFill = getAbsoluteRatio(l);
          var ratioDiff = Math.abs(actualMeterFill - meterRatio);
          var smallestValue = gcd(ratioDiff);
          //var restDurs = findDotsRecursive(ratioDiff, gcd(ratioDiff))
          if (Number.isInteger(ratioDiff / smallestValue) && ratioDiff > 0) {
            var leftRatio = ratioDiff;
            var durArr = new Array();
            while (!Number.isInteger(1 / leftRatio)) {
              var leftRatio = ratioDiff - smallestValue;
              durArr.push(1 / smallestValue);
            }
            durArr.push(1 / leftRatio);
            durArr = durArr.reverse();
            durArr.forEach(dur => {
              var newRest = currentMEI.createElementNS(constants_1.constants._MEINS_, "rest");
              newRest.setAttribute("dur", dur.toString());
              l.appendChild(newRest);
            });
          }
          //console.log(document.getElementById(l.id), ratioDiff, gcd(ratioDiff), durArr)
        }
      });
    });
  });
}
/**
 * Replace given id with rest
 * @param element element from svg
 * @param currentMEI
 */
function replaceWithRest(element, currentMEI) {
  var elmei = currentMEI.getElementById(element.id);
  //var closestChord: Element = currentMEI .getElementById(element.id).closest("chord")
  //if(closestChord !== null){elmei = closestChord}
  var dur = elmei.getAttribute("dur");
  var dots = elmei.getAttribute("dots");
  var newRest = currentMEI.createElementNS(constants_1.constants._MEINS_, "rest");
  newRest.setAttribute("dur", dur);
  if (dots !== null) {
    newRest.setAttribute("dots", dots);
  }
  elmei.parentElement.insertBefore(newRest, elmei);
  elmei.remove();
}
/**
 * @deprecated
 * Change duration of the following sound events. Elements to change duration are determined by the class to be "marked".
 * @param currentMEI  Current MEI as Document
 * @param additionalElements Elements to be considered to be changed.
 * @param refElement Reference Element after which all determined elements (.marked and additionElements) will be changed (e.g. replacing duration during a note insert).
 * If no refElement is given, filter the additionalElements to exclude the refElement
 * @param marked Consider marked elements
 * @returns
 */
function _changeDuration(currentMEI, additionalElements = new Array(), refElement = null) {
  var currMeiClone = currentMEI.cloneNode(true);
  var changedFlag = "changed";
  var multiplier;
  var elmei;
  var i = refElement === null ? 1 : 0;
  for (i; i < additionalElements.length; i++) {
    elmei = currentMEI.getElementById(additionalElements[i].id);
    var elmeiRatio = getAbsoluteRatio(elmei);
    var chord = elmei.closest("chord");
    //Dur is attribute of chord and all notes will be changed accordingly
    if (chord !== null) {
      if (chord.classList.contains(changedFlag)) {
        return;
      } else {
        elmei = chord;
        elmei.classList.add(changedFlag);
      }
    }
    var dur = parseInt(elmei.getAttribute("dur"));
    var dots = parseInt(elmei.getAttribute("dots")); // is NaN if elmei has no dots
    if (dur > 0) {
      var layerRatio = getAbsoluteRatio(elmei.closest("layer")); // current ratio of layer with already inserted new sound event
      var localRatio = getMeterRatioLocal(currentMEI, elmei); //getMeterRatioGlobal(currentMEI )
      var danglingRatio = layerRatio - localRatio;
      if (danglingRatio > 0) {
        var nextElementRatio = getAbsoluteRatio(elmei);
        var neNewRatio = nextElementRatio - danglingRatio;
        if (neNewRatio > 0) {
          var durArr = ratioToDur(neNewRatio);
          elmei.setAttribute("dur", durArr[0].toString());
          if (durArr[1] > 0) {
            elmei.setAttribute("dots", durArr[1].toString());
          } else {
            elmei.removeAttribute("dots");
          }
        } else {
          elmei.remove();
        }
      }
      if (layerRatio <= localRatio && refElement === null || layerRatio < localRatio && refElement !== null) {
        var nextElementRatio = getAbsoluteRatio(elmei);
        var neNewRatio;
        if (refElement !== null) {
          neNewRatio = nextElementRatio - getAbsoluteRatio(refElement);
        } else {
          var addRatios = function (elements) {
            var r = 0;
            elements.forEach((v, i) => {
              if (i > 0) {
                r += getAbsoluteRatio(v);
              }
            });
            return r;
          };
          neNewRatio = nextElementRatio - (layerRatio - addRatios(additionalElements) - getAbsoluteRatio(additionalElements[0]));
        }
        if (neNewRatio > 0) {
          var durArr = ratioToDur(neNewRatio);
          elmei.setAttribute("dur", durArr[0].toString());
          if (durArr[1] > 0) {
            elmei.setAttribute("dots", durArr[1].toString());
          } else {
            elmei.removeAttribute("dots");
          }
        } else {
          elmei.remove();
        }
      }
    }
  }
  if (!overfillMeasure && elmei != undefined && (elmei === null || elmei === void 0 ? void 0 : elmei.closest("layer")) !== null) {
    var newMeasureRatio = getAbsoluteRatio(elmei.closest("layer"));
    var localRatio = getMeterRatioLocal(currentMEI, elmei);
    if (newMeasureRatio > localRatio) {
      //getMeterRatioGlobal(currentMEI )){
      currentMEI = currMeiClone;
    }
  }
  //clean up after changing durations
  currentMEI.querySelectorAll(".changed").forEach(c => c.classList.remove(changedFlag));
  cleanUp(currentMEI);
  return currentMEI;
}
function addRatios(elements) {
  var r = 0;
  elements.forEach((v, i) => {
    //if(i > 0){
    r += getAbsoluteRatio(v);
    //}
  });

  return r;
}
function changeDuration(currentMEI, additionalElements = new Array(), refElement = null, remainRatio = null, meiToReset = null) {
  var meiCopy = meiToReset || currentMEI.cloneNode(true);
  let ms = Array.from(refElement.parentElement.querySelectorAll("note:not(chord note), chord, rest"));
  var measureSiblings = ms.filter((v, i) => i <= ms.indexOf(refElement));
  var ratioUpTpRef = addRatios(measureSiblings);
  var refElementRatio = getAbsoluteRatio(refElement);
  var remainBarRatio = getMeterRatioLocal(currentMEI, refElement) - ratioUpTpRef;
  if (getAbsoluteRatio(refElement.parentElement) === getMeterRatioLocal(currentMEI, refElement)) {
    // bar has right size, 
    return currentMEI;
  }
  if (additionalElements.length > 0) {
    // var adEl = additionalElements.shift()
    // var adElRatio = getAbsoluteRatio(adEl)
    // var diffRatio = adElRatio - refElementRatio 
    // remainDur = Math.abs(diffRatio)
    //   //var isDotted = (Math.abs(diffRatio) < adElRatio && Math.abs(diffRatio) > 0)
    //   if(adElRatio === Math.abs(diffRatio) && refElementRatio <= adElRatio){
    //     currentMEI.getElementById(adEl.id).remove()
    //   //}else if(diffRatio > 0 || isDotted){
    //   }else if(remainDur > 0){
    //     //if(isDotted){
    //       diffRatio = Math.abs(diffRatio)
    //     //}
    //     var dur = ratioToDur(diffRatio)
    //     currentMEI.getElementById(adEl.id).setAttribute("dur", dur.shift().toString())
    //     if(dur.length > 0){
    //       currentMEI.getElementById(adEl.id).setAttribute("dots", dur.shift().toString())
    //     }
    //   }else if(diffRatio === 0){
    //     currentMEI.getElementById(adEl.id).remove()
    //   }else{
    //     currentMEI.getElementById(adEl.id).remove()
    //     changeDuration(currentMEI, additionalElements, refElement, remainDur, meiCopy)
    //   }
    // }else{
    //   if(remainBarRatio < 0){
    //     currentMEI = meiCopy || currentMEI
    //     //TODO: note in den nächsten Takt verlängern, das darüber erstmal löschen
    //   }
    var nextNote = additionalElements.shift();
    var nnRatio = getAbsoluteRatio(nextNote);
    remainRatio = remainRatio || refElementRatio;
    var currEl;
    var harm;
    if (remainRatio < nnRatio) {
      var diffRatio = nnRatio - remainRatio;
      var dur = ratioToDur(diffRatio);
      currentMEI.getElementById(nextNote.id).setAttribute("dur", dur.shift().toString());
      if (dur.length > 0) {
        currentMEI.getElementById(nextNote.id).setAttribute("dots", dur.shift().toString());
      }
      harm = currentMEI.querySelector('harm[startid="' + nextNote.id + '"]');
      if (harm !== null) {
        harm.setAttribute("startid", refElement.id);
      }
    } else if (remainRatio === nnRatio) {
      currEl = currentMEI.getElementById(nextNote.id);
      harm = currentMEI.querySelector('harm[startid="' + nextNote.id + '"]');
      //if(currEl.tagName === "rest" && harm !== null){
      if (harm !== null) {
        harm.setAttribute("startid", refElement.id);
      }
      currEl.remove();
    } else {
      currEl = currentMEI.getElementById(nextNote.id);
      harm = currentMEI.querySelector('harm[startid="' + nextNote.id + '"]');
      //if(currEl.tagName === "rest" && harm !== null){
      if (harm !== null) {
        harm.setAttribute("startid", refElement.id);
      }
      remainRatio = remainRatio - nnRatio;
      currEl.remove();
      changeDuration(currentMEI, additionalElements, refElement, remainRatio, meiCopy);
    }
  }
  cleanUp(currentMEI);
  return currentMEI;
}
exports.changeDuration = changeDuration;
/**
 * Check if elment is overfilling the current layer element. Must provide previous MEI for reference.
 * Violate rule: true; follow rules: false
 * @param element
 * @param currMeiClone
 * @returns
 */
function elementIsOverfilling(element, currMeiClone) {
  if (!overfillMeasure) {
    var newMeasureRatio = getAbsoluteRatio(element.closest("layer"));
    var localRatio = getMeterRatioLocal(currMeiClone, element);
    if (newMeasureRatio > localRatio) {
      //getMeterRatioGlobal(currMeiClone)){
      return true;
    }
  }
  return false;
}
exports.elementIsOverfilling = elementIsOverfilling;
/**
 * Clean up mei after changing values
 * @param currentMEI
 */
function cleanUp(currentMEI) {
  deleteDefSequences(currentMEI);
  //reorganizeBeams(currentMEI)
  removeEmptyElements(currentMEI);
  //fillWithRests(currentMEI)
  adjustRests(currentMEI);
  redistributeHarms(currentMEI);
}
exports.cleanUp = cleanUp;
/**
 * Delete all redundant definition sequences in staffDefs and layers
 * @param currentMEI
 */
function deleteDefSequences(currentMEI) {
  var staffCount = currentMEI.querySelectorAll("staffDef").length;
  for (var i = 0; i < staffCount; i++) {
    var n = (i + 1).toString();
    var prevElement = null;
    var prevShape = null;
    var prevLine = null;
    currentMEI.querySelectorAll("staffDef[n=\"" + n + "\"] clef, staff[n=\"" + n + "\"] clef").forEach(clefElement => {
      var shape = clefElement.getAttribute("shape");
      var line = clefElement.getAttribute("line");
      if (prevElement != null) {
        prevShape = prevElement.getAttribute("shape");
        prevLine = prevElement.getAttribute("line");
        if (prevShape === shape && prevLine === line) {
          clefElement.remove();
        } else {
          prevElement = clefElement;
        }
      } else {
        prevElement = clefElement;
      }
    });
    prevElement = null;
    var prevSig = null;
    currentMEI.querySelectorAll("staffDef[n=\"" + n + "\"] keySig, staff[n=\"" + n + "\"] keySig").forEach(sigElement => {
      var sig = sigElement.getAttribute("sig");
      if (prevElement != null) {
        prevSig = prevElement.getAttribute("sig");
        if (prevSig === sig) {
          sigElement.remove();
        } else {
          prevElement = sigElement;
        }
      } else {
        prevElement = sigElement;
      }
    });
    prevElement = null;
    currentMEI.querySelectorAll("staffDef[n=\"" + n + "\"] meterSig, staff[n=\"" + n + "\"] meterSig").forEach(meterElement => {
      var count = meterElement.getAttribute("count");
      var unit = meterElement.getAttribute("unit");
      if (prevElement != null) {
        var lastCount = prevElement.getAttribute("count");
        var lastUnit = prevElement.getAttribute("unit");
        if (lastCount === count && lastUnit === unit) {
          meterElement.remove();
        } else {
          prevElement = meterElement;
        }
      } else {
        prevElement = meterElement;
      }
    });
  }
}
function reorganizeBeams(currentMEI) {
  // if beams have elements, which shouldn be there
  currentMEI.querySelectorAll("beam").forEach(b => {
    var beamNotes = Array.from(b.children);
    if (!beamNotes.every(c => parseInt(c.getAttribute("dur")) >= 8) && beamNotes.length > 0) {
      beamNotes.forEach(n => {
        if (parseInt(n.getAttribute("dur")) >= 8) {
          if (n.previousElementSibling !== null) {
            if (n.previousElementSibling.tagName === "beam") {
              // check for previous beams to merge with
              n.previousElementSibling.appendChild(n);
            }
          } else {
            // else make new beam
            var newBeam = currentMEI.createElementNS(constants_1.constants._MEINS_, "beam");
            newBeam.setAttribute("id", random_1.uuidv4());
            n.parentElement.insertBefore(newBeam, n);
            newBeam.append(n);
          }
        }
      });
      //set all inner elements outseide of old beam
      b.outerHTML = b.innerHTML;
    }
  });
}
/**
 * After manipulating elements in the score, some elements could be empty
 * @param currentMEI
 */
function removeEmptyElements(currentMEI) {
  Array.from(currentMEI.querySelectorAll("beam")).forEach(b => {
    var _a;
    if (b.childElementCount === 0) {
      (_a = currentMEI.getElementById(b.id)) === null || _a === void 0 ? void 0 : _a.remove();
    }
    if (b.childElementCount === 1) {
      //b.parentElement.insertBefore(b, b.firstChild)
      //b.remove()
      b.outerHTML = b.innerHTML;
    }
    var bArr = Array.from(b.children);
    if (bArr.every(c => c.tagName === "rest") && bArr.length > 0) {
      // Array.from(b.children).forEach(c => {
      //   b.parentElement.insertBefore(c, b)
      // })
      // b.remove()
      b.outerHTML = b.innerHTML;
    }
    // Avoids that unvalid rests will be displayed as double full notes
    Array.from(currentMEI.querySelectorAll("rest")).forEach(r => {
      if (r.getAttribute("dur") === "0" || r.getAttribute("dur") === null) {
        r.removeAttribute("dur");
        r.removeAttribute("dots");
        r.outerHTML = r.outerHTML.replace("rest>", "mRest>");
      }
    });
    Array.from(currentMEI.querySelectorAll("*[xmlns]")).forEach(x => {
      var attr = x.getAttribute("xmlns");
      if (attr === "" || attr === null || attr == undefined) {
        x.removeAttribute("xmlns");
      }
    });
  });
  // allow no empty and rest-note element chord elements
  Array.from(currentMEI.querySelectorAll("chord")).forEach(c => {
    if (c.childElementCount === 0) {
      currentMEI.getElementById(c.id).remove();
    } else if (c.childElementCount === 1) {
      c.outerHTML = c.innerHTML;
    } else if (c.childElementCount === 2 && c.querySelector("rest") !== null && c.querySelector("note") !== null) {
      c.querySelector("note").setAttribute("dur", c.getAttribute("dur"));
      c.querySelector("rest").remove();
      c.outerHTML = c.innerHTML;
    }
  });
  // Empty harms could be somewhere
  Array.from(currentMEI.querySelectorAll("harm")).forEach(h => {
    if (h.childElementCount > 0) {
      if (h.firstElementChild.childElementCount === 0) h.remove();
    } else if (h.textContent === "") {
      h.remove();
    }
  });
  // remove all xmlns since they are someties empty and also are not parsable sometimes
  Array.from(currentMEI.querySelectorAll("*")).forEach(el => {
    if (el.tagName.toLowerCase() === "xml") return;
    el.removeAttribute("xmlns");
  });
  // Array.from(currentMEI .querySelectorAll("measure")).forEach(m => {
  //   if(m.querySelectorAll("note, chord").length === 0){
  //     currentMEI .getElementById(m.id).remove()
  //   }
  // })
}
/**
 * Apply some additional rules for rests, Elements where added
 * @param currentMEI
 */
function adjustRests(currentMEI) {
  //mRest and any Element with dur attribute are not allowed in the same layer
  currentMEI.querySelectorAll("layer").forEach(l => {
    var hasAnyDurAttributes = l.querySelectorAll("*[dur]").length > 0;
    var hasTags = l.querySelectorAll("clef, keySig").length > 0;
    var hasMrest = l.querySelectorAll("mRest").length > 0;
    if (l.children.length === 0 || hasTags && !hasAnyDurAttributes && !hasMrest) {
      //no layer should be empty, has at least an mRest (therefore: mRests are virtually not deletable)
      var newMrest = new mei_template_1.default().createMRest();
      l.append(newMrest);
    } else {
      Array.from(l.children).forEach(cn => {
        if (cn.tagName === "mRest" && hasAnyDurAttributes) {
          cn.remove();
        }
      });
    }
  });
}
/**
 * Give harm new start id if related note was included in chord during process
 * @param currentMEI
 */
function redistributeHarms(currentMEI) {
  currentMEI.querySelectorAll("harm").forEach(h => {
    var startid = h.getAttribute("startid");
    if (startid !== null) {
      var note = currentMEI.getElementById(startid);
      if (note.parentElement.tagName === "chord") h.setAttribute("startid", note.parentElement.id);
    }
  });
}
/**
 * Remove tie from all layers if length of layer exceeds global Ratio
 * @param currentMEI
 */
function removeTiesFromDoc(currentMEI) {
  var globalRatio = getMeterRatioGlobal(currentMEI);
  currentMEI.querySelectorAll("layer").forEach(l => {
    var layerRatio = getAbsoluteRatio(l);
    if (layerRatio > globalRatio) {
      var m = l.closest("measure");
      m.querySelectorAll("tie").forEach(t => {
        var _a;
        (_a = l.querySelector(t.getAttribute("endid"))) === null || _a === void 0 ? void 0 : _a.remove();
        t.remove();
      });
    }
  });
}
function addMeasure(currentMEI) {
  var lastMeasure = Array.from(currentMEI.querySelectorAll("measure")).reverse()[0];
  var staffCounts = Array.from(lastMeasure.querySelectorAll("staff")).map(s => {
    return parseInt(s.getAttribute("n"));
  });
  var staffCount = Math.max.apply(Math, staffCounts);
  var layerCounts = Array.from(lastMeasure.querySelectorAll("layer")).map(s => {
    return parseInt(s.getAttribute("n"));
  });
  var layerCount = Math.max.apply(Math, layerCounts);
  var newMeasure = new mei_template_1.default().createMeasure(1, staffCount, layerCount);
  lastMeasure.parentElement.append(newMeasure);
  var i = 1;
  currentMEI.querySelectorAll("measure").forEach(m => {
    m.setAttribute("n", i.toString());
    i++;
  });
  newMeasure.setAttribute("id", random_1.uuidv4());
  newMeasure.querySelectorAll("*").forEach(el => {
    if (el.id === null || el.id === "") {
      el.setAttribute("id", random_1.uuidv4());
    }
  });
  cleanUp(currentMEI);
}
exports.addMeasure = addMeasure;
function removeMeasure(currentMEI) {
  var measures = Array.from(currentMEI.querySelectorAll("measure")).reverse();
  if (measures.length > 1) {
    measures[0].remove();
  } else {
    measures[0].querySelectorAll("layer").forEach(l => {
      l.innerHTML = "";
      l.appendChild(currentMEI.createElement("mRest"));
    });
  }
  cleanUp(currentMEI);
}
exports.removeMeasure = removeMeasure;
function addStaff(currentMEI, referenceStaff, relPos) {
  var staffNum = referenceStaff.getAttribute("n");
  var refn;
  var refElement;
  currentMEI.querySelectorAll("staff[n=\"" + staffNum + "\"]").forEach(s => {
    var _a;
    var newStaff = new mei_template_1.default().createStaff(1, 1);
    switch (relPos) {
      case "above":
        refElement = s;
        break;
      case "below":
        refElement = s.nextElementSibling || s;
        break;
      default:
        console.error(relPos, " was never an option");
    }
    if (relPos === "below" && refElement === s) {
      // => new staff at the end
      s.parentElement.append(newStaff);
    } else {
      s.parentElement.insertBefore(newStaff, refElement);
    }
    //copy elements from the current Staff that have to appear in new staff
    var newLayer = newStaff.querySelector("layer");
    var copyMeter = (_a = s.querySelector("meterSig")) === null || _a === void 0 ? void 0 : _a.cloneNode(true);
    if (copyMeter != undefined && copyMeter !== null) {
      newLayer.insertBefore(copyMeter, newLayer.firstChild);
    }
    refn = (refElement === null || refElement === void 0 ? void 0 : refElement.getAttribute("n")) || staffNum; // s.getAttribute("n")
  });
  //new StaffDef
  var refStaffDef = currentMEI.querySelector("staffDef[n=\"" + refn + "\"]");
  var refCopy = refStaffDef.cloneNode(true);
  refCopy.querySelectorAll("*[id]").forEach(i => {
    i.removeAttribute("id");
  });
  refStaffDef.parentElement.insertBefore(refCopy, refStaffDef);
  currentMEI.querySelectorAll("measure").forEach(m => {
    var i = 1;
    m.querySelectorAll("staff").forEach(s => {
      s.setAttribute("n", i.toString());
      i++;
    });
  });
  var i = 1;
  currentMEI.querySelectorAll("staffDef").forEach(sd => {
    sd.setAttribute("n", i.toString());
    i++;
  });
  cleanUp(currentMEI);
}
exports.addStaff = addStaff;
function removeStaff(currentMEI, referenceStaff, relPos) {
  var staff = currentMEI.getElementById(referenceStaff.id);
  var staffNum = staff.getAttribute("n");
  var refn;
  currentMEI.querySelectorAll("staff[n=\"" + staffNum + "\"]").forEach(s => {
    switch (relPos) {
      case "above":
        refn = s.previousElementSibling.getAttribute("n");
        s.previousElementSibling.remove();
        break;
      case "below":
        refn = s.nextElementSibling.getAttribute("n");
        s.nextElementSibling.remove();
        break;
      default:
        console.error(relPos, " was never an option");
    }
  });
  currentMEI.querySelector("staffDef[n=\"" + refn + "\"]").remove();
  currentMEI.querySelectorAll("measure").forEach(m => {
    var i = 1;
    m.querySelectorAll("staff").forEach(s => {
      s.setAttribute("n", i.toString());
      i++;
    });
  });
  var i = 1;
  currentMEI.querySelectorAll("staffDef").forEach(sd => {
    sd.setAttribute("n", i.toString());
    i++;
  });
  cleanUp(currentMEI);
}
exports.removeStaff = removeStaff;
/**
 * Paste copied ids. First position to which the Elements are copied is the Element according to the refId (= RefElement).
 * If multiple staffs are copied, overhanging staffs will be pasted to the staffs below the staff of the RefElement, if definedstaffs exist.
 * Else these copiedId will be not pasted.
 * @param ids
 * @param refId
 */
function paste(ids, refId, currentMEI) {
  var _a;
  //ordered by staff
  var meiElements = new Array();
  ids.forEach(id => {
    var el = currentMEI.getElementById(id);
    //order copiable elements by staff
    if (["CHORD", "NOTE", "REST"].includes(el === null || el === void 0 ? void 0 : el.tagName.toUpperCase())) {
      if (!(el.tagName.toUpperCase() === "NOTE" && el.closest("chord") !== null)) {
        var staff = el.closest("staff");
        var num = parseInt(staff.getAttribute("n")) - 1;
        if (meiElements[num] == undefined) {
          meiElements[num] = new Array();
        }
        var cel = el.cloneNode(true);
        cel.setAttribute("id", random_1.uuidv4());
        meiElements[num].push(cel);
      }
    }
  });
  var refElement = currentMEI.getElementById(refId);
  refElement = (refElement === null || refElement === void 0 ? void 0 : refElement.closest("chord")) || refElement;
  var refStaff = refElement === null || refElement === void 0 ? void 0 : refElement.closest("staff");
  var refLayer = refElement === null || refElement === void 0 ? void 0 : refElement.closest("layer");
  var refMeasure = refElement === null || refElement === void 0 ? void 0 : refElement.closest("measure");
  var currentMeasure;
  let anyNew;
  //console.log(...meiElements)
  meiElements.forEach((staff, staffIdx) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (refElement === null) return;
    currentMeasure = refElement.closest("measure");
    staff.forEach((element, elementIdx) => {
      var _a, _b;
      if (["NOTE", "REST"].includes(element.tagName.toUpperCase())) {
        var newNote = convertToNewNote(element);
        newNote.nearestNoteId = refElement.id;
        newNote.relPosX = "right";
        anyNew = newNote;
      } else if (element.tagName.toUpperCase() === "CHORD") {
        var newChord = convertToNewChord(element);
        newChord.nearestNoteId = refElement.id;
        newChord.relPosX = "right";
        anyNew = newChord;
        var elementArr = Array.from(element.querySelectorAll("note"));
      }
      var replace = (_b = (_a = document.querySelector(".activeContainer")) === null || _a === void 0 ? void 0 : _a.querySelector("#insertToggle")) === null || _b === void 0 ? void 0 : _b.checked;
      addToMEI(anyNew, currentMEI, replace);
      refElement = convertToElement(anyNew, currentMEI); //element
    });
    //when changing next staff, refElement musst be staff + 1
    var targetStaffN = (_c = parseInt((_b = (_a = currentMEI.getElementById(refElement.id)) === null || _a === void 0 ? void 0 : _a.closest("staff")) === null || _b === void 0 ? void 0 : _b.getAttribute("n")) + 1) === null || _c === void 0 ? void 0 : _c.toString();
    var refLayerN = (_e = (_d = currentMEI.getElementById(refElement.id)) === null || _d === void 0 ? void 0 : _d.closest("layer")) === null || _e === void 0 ? void 0 : _e.getAttribute("n");
    var refMeasureN = (_g = (_f = currentMEI.getElementById(refElement.id)) === null || _f === void 0 ? void 0 : _f.closest("measure")) === null || _g === void 0 ? void 0 : _g.getAttribute("n");
    refElement = currentMEI.querySelector("measure[n=\"" + refMeasureN + "\"] > staff[n=\"" + targetStaffN + "\"] > layer[n=\"" + refLayerN + "\"]");
  });
  //Element gets replaced in all other modes except keymode/textmode
  if (!document.querySelector(".activeContainer").classList.contains("textmode") && ((_a = currentMEI.getElementById(refId)) === null || _a === void 0 ? void 0 : _a.tagName) !== "LAYER") {
    removeFromMEI([currentMEI.getElementById(refId)], currentMEI);
  }
  return anyNew === null || anyNew === void 0 ? void 0 : anyNew.id;
}
exports.paste = paste;
/**
 * Replace clef in main/ first score definition
 * @param targetid
 * @param newClef
 * @param currentMEI
 * @returns
 */
function replaceClefinScoreDef(target, newClef, currentMEI) {
  var staffN = document.querySelector(".activeContainer #rootSVG #" + target.id).closest(".staff").getAttribute("n");
  var staffDefClef = currentMEI.querySelector("staffDef[n=\"" + staffN + "\"] > clef");
  staffDefClef.setAttribute("shape", newClef.charAt(0));
  staffDefClef.setAttribute("line", mappings_1.clefToLine.get(newClef.charAt(0)));
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.replaceClefinScoreDef = replaceClefinScoreDef;
/**
 * Layer to which a new clef object has to be inserted
 * @param targetid Usually a barline before which new clef should stand
 * @param newClef Name of new Clef to be inserted
 */
function insertClef(target, newClef, currentMEI) {
  var _a, _b;
  var targetStaffId = ((_a = target.closest(".measure").querySelector(".staff[n=\"" + target.getAttribute("n") + "\"]")) === null || _a === void 0 ? void 0 : _a.id) || ((_b = target.closest(".staff")) === null || _b === void 0 ? void 0 : _b.id);
  var targetLayerId = currentMEI.getElementById(targetStaffId).querySelector("layer").id;
  currentMEI.getElementById(targetLayerId).querySelectorAll("clef").forEach(c => c.remove());
  var clefElement = currentMEI.createElement("clef");
  clefElement.setAttribute("id", random_1.uuidv4());
  clefElement.setAttribute("shape", newClef.charAt(0));
  clefElement.setAttribute("line", mappings_1.clefToLine.get(newClef.charAt(0)));
  currentMEI.getElementById(targetLayerId).append(clefElement);
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.insertClef = insertClef;
function findAttributeRecursive(element, attributeName, currentValue = null) {
  var value = currentValue || element.getAttribute(attributeName);
  if (value === null) {
    Array.from(element.children).forEach(c => {
      if (value !== null) return;
      value = findAttributeRecursive(c, attributeName, value);
    });
  }
  console.log(element, value);
  return value;
}
/**
 * If Key is already defined in scoreDef, replace values
 * @param target
 * @param newSig
 * @param currentMEI
 * @returns
 */
function replaceKeyInScoreDef(target, newSig, currentMEI) {
  var _a;
  var staffN = document.querySelector(".activeContainer #rootSVG #" + target.id).closest(".staff").getAttribute("n");
  var staffDefSig = currentMEI.querySelector("staffDef[n=\"" + staffN + "\"] > keySig");
  if (staffDefSig !== null) {
    staffDefSig.setAttribute("sig", mappings_1.keyIdToSig.get(newSig));
  } else {
    var newSigElement = new mei_template_1.default().createKeySig("major", mappings_1.keyIdToSig.get(newSig));
    (_a = currentMEI.querySelector("staffDef[n=\"" + staffN + "\"]")) === null || _a === void 0 ? void 0 : _a.append(newSigElement);
  }
  adjustAccids(currentMEI);
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.replaceKeyInScoreDef = replaceKeyInScoreDef;
/**
 * Create a whole new Sig Element and Insert to MEI at given target
 * @param target
 * @param newSig
 * @param currentMEI
 * @returns
 */
function insertKey(target, newSig, currentMEI) {
  var _a, _b;
  console.log("insertKey", target, newSig);
  var targetStaff = target.closest(".measure").querySelector(".staff[n=\"" + target.getAttribute("n") + "\"]") || target.closest(".staff");
  var staffN = targetStaff.getAttribute("n");
  var parentMeasure = currentMEI.getElementById(targetStaff.id).closest("measure");
  var pmn = parseInt(parentMeasure.getAttribute("n")) + 1;
  var targetLayerId = (_a = parentMeasure.parentElement.querySelector("measure[n=\"" + pmn.toString() + "\"] > staff[n=\"" + staffN + "\"] > layer")) === null || _a === void 0 ? void 0 : _a.id;
  (_b = currentMEI.getElementById(targetLayerId).querySelectorAll("keySig")) === null || _b === void 0 ? void 0 : _b.forEach(c => c.remove());
  var newSigElement = new mei_template_1.default().createKeySig("major", mappings_1.keyIdToSig.get(newSig));
  currentMEI.getElementById(targetLayerId).insertBefore(newSigElement, currentMEI.getElementById(targetLayerId).firstElementChild);
  adjustAccids(currentMEI);
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.insertKey = insertKey;
function replaceMeterInScoreDef(target, currentMEI) {
  var staffN = document.querySelector(".activeContainer #rootSVG #" + target.id).closest(".staff").getAttribute("n");
  var staffDefMeter = currentMEI.querySelector("staffDef[n=\"" + staffN + "\"]");
  var count = document.querySelector(".activeContainer #timeCount").value;
  var unit = document.querySelector(".activeContainer #timeUnit").value;
  staffDefMeter.setAttribute("meter.count", count);
  staffDefMeter.setAttribute("meter.unit", unit);
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.replaceMeterInScoreDef = replaceMeterInScoreDef;
function insertMeter(target, currentMEI) {
  var targetStaff = target.closest(".measure").querySelector(".staff[n=\"" + target.getAttribute("n") + "\"]") || target.closest(".staff");
  var parentMeasure = currentMEI.getElementById(targetStaff.id).closest("measure");
  var pmn = parseInt(parentMeasure.getAttribute("n")) + 1;
  var targetLayers = parentMeasure.parentElement.querySelectorAll("measure[n=\"" + pmn.toString() + "\"] layer");
  targetLayers.forEach(tl => {
    var _a;
    (_a = currentMEI.getElementById(tl.id).querySelectorAll("meterSig")) === null || _a === void 0 ? void 0 : _a.forEach(c => c.remove());
  });
  var count = document.querySelector(".activeContainer #selectTime #timeCount").value;
  var unit = document.querySelector(".activeContainer #selectTime #timeUnit").value;
  // change for all layers in given measure
  targetLayers.forEach(tl => {
    let newMeterElement = new mei_template_1.default().createMeterSig(count, unit); // must be in loop, otherwise same reference gets reassigned every time
    currentMEI.getElementById(tl.id).insertBefore(newMeterElement, currentMEI.getElementById(tl.id).firstElementChild);
  });
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.insertMeter = insertMeter;
function insertTempo(target, currentMEI) {
  var measure = currentMEI.getElementById(target.id).closest("measure");
  var existingTempo = measure.querySelectorAll("tempo");
  var sameTempos = Array.from(existingTempo).filter(et => {
    var hasSameTimeStamp = parseFloat(et.getAttribute("timeStamp")) === getElementTimestampById(target.id, currentMEI);
    var hasSameStartId = et.getAttribute("startId") === target.id;
    return hasSameTimeStamp || hasSameStartId;
  });
  var mmUnit = document.querySelector(".activeContainer #selectTempo #timeCount").value;
  var mm = document.querySelector(".activeContainer #selectTempo #timeUnit").value;
  measure.appendChild(new mei_template_1.default().createTempo(mm, mmUnit, getElementTimestampById(target.id, currentMEI).toString(), target.id));
  sameTempos.forEach(st => st.remove());
  cleanUp(currentMEI);
  currentMEI = meiConverter.restoreXmlIdTags(currentMEI);
  return currentMEI;
}
exports.insertTempo = insertTempo;
/**
 * Gets timestamp of element. Computes it, if no such attribute is present for the element
 * @param id
 * @param currentMEI
 * @returns
 */
function getElementTimestampById(id, currentMEI) {
  var element = currentMEI.getElementById(id);
  var timestamp = element.getAttribute("tstamp");
  if (timestamp === null) {
    var parentLayer = element.closest("layer");
    var count = 0;
    var units = parentLayer.querySelectorAll(countableNoteUnitSelector);
    for (var i = 0; i < units.length; i++) {
      if (units[i].getAttribute("dur") !== null) {
        if (units[i].id === id) {
          var fraction = 4;
          if (currentMEI.querySelector("meterSig") !== null) {
            fraction = parseInt(currentMEI.querySelector("meterSig").getAttribute("unit"));
          }
          timestamp = (count * fraction + 1).toString(); // add 1 to accomodate for shift ratio sum
          break;
        }
        count += getAbsoluteRatio(units[i]);
      }
    }
  }
  return parseFloat(timestamp);
}
exports.getElementTimestampById = getElementTimestampById;
/**
 * Get Timestamp in specific layer
 * @param note
 * @returns
 */
function getTimestamp(note) {
  var layer = note.closest("layer");
  var elements = Array.from(layer.querySelectorAll("*[dur]"));
  elements = elements.filter((v, i) => i <= elements.indexOf(note));
  var tstamp;
  elements.forEach(e => {
    var dur = parseInt(e.getAttribute("dur"));
    tstamp += 4 / dur;
    var dots = e.getAttribute("dots");
    var add = dur;
    if (dots !== null) {
      for (var i = 0; i < parseInt(dots); i++) {
        add = add / 2;
        tstamp += add;
      }
    }
  });
  return tstamp;
}
exports.getTimestamp = getTimestamp;
//PRIVATE
function convertToNewNote(element) {
  var newNote = {
    id: random_1.uuidv4(),
    pname: element.getAttribute("pname"),
    dur: element.getAttribute("dur"),
    dots: element.getAttribute("dots"),
    oct: element.getAttribute("oct"),
    accid: element.getAttribute("accid") || element.getAttribute("accid.ges"),
    rest: element.tagName.toUpperCase() === "REST" ? true : false
  };
  return newNote;
}
function convertToElement(n, currentMEI) {
  var nn;
  var newElement;
  if (n.hasOwnProperty("pname")) {
    nn = n;
    newElement = currentMEI.createElement("note");
    newElement.setAttribute("pname", nn.pname);
    newElement.setAttribute("oct", nn.oct);
    newElement.setAttribute("accid", nn.accid);
  } else {
    nn = n;
    newElement = currentMEI.createElement("chord");
    nn.noteElements.forEach(ne => {
      newElement.append(convertToElement(ne, currentMEI));
    });
  }
  newElement.setAttribute("id", nn.id);
  newElement.setAttribute("dur", nn.dur);
  newElement.setAttribute("dots", nn.dots);
  return newElement;
}
function convertToNewChord(element) {
  var newNotes = Array.from(element.querySelectorAll("note")).map(n => {
    return convertToNewNote(n);
  });
  var newChord = {
    id: random_1.uuidv4(),
    dur: element.getAttribute("dur"),
    dots: element.getAttribute("dots"),
    noteElements: newNotes
  };
  return newChord;
}
function createNewRestElement(dur, dots = undefined) {
  var newElem = document.createElementNS(constants_1.constants._MEINS_, "rest");
  newElem.setAttribute("dur", dur.toString());
  if (dots != undefined) newElem.setAttribute("dots", dots.toString());
  newElem.setAttribute("id", random_1.uuidv4());
  return newElem;
}

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/Mouse2MEI.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/Mouse2MEI.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Mouse2MEI = void 0;
const constants_1 = __webpack_require__(/*! ../constants */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/constants.js");
const random_1 = __webpack_require__(/*! ./random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
const mappings_1 = __webpack_require__(/*! ./mappings */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js");
const MeasureMatrix_1 = __webpack_require__(/*! ../datastructures/MeasureMatrix */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/datastructures/MeasureMatrix.js");
const meiOperation = __webpack_require__(/*! ../utils/MEIOperations */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/MEIOperations.js");
const coordinates = __webpack_require__(/*! ./coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const cq = __webpack_require__(/*! ./convenienceQueries */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js");
class Mouse2MEI {
  constructor() {
    this.lastSystemMouseEnter = null;
    this.lastStaffMouseEnter = null;
    this.lastMeasureMouseEnter = null;
    this.lastLayerMouseEnter = null;
    this.noteNewDur = "4";
    this.noteBBoxes = new Array();
    this.staffLineBBoxes = new Array();
    this.measureMatrix = new MeasureMatrix_1.default();
    //this.setMouseEnterElementListeners();
    //this.findBBoxes();
  }
  /**
   * Set Flags for current focused measure, staff, system and layer when mouse moves.
   * @returns
   */
  setMouseEnterElementListeners() {
    var that = this;
    var mouseEventName = "mouseover";
    var enteredFlag = "lastEntered";
    var activeContainerFlag = "activeContainer";
    this.container.addEventListener("mouseenter", function (e) {
      Array.from(document.getElementsByClassName("vse-container")).forEach(ac => {
        if (ac === that.container) {
          if (!that.container.classList.contains(activeContainerFlag)) {
            that.container.classList.add(activeContainerFlag);
          }
        } else {
          ac.classList.remove(activeContainerFlag);
        }
      });
    });
    this.interactionOverlay.querySelectorAll(".system").forEach(sy => {
      sy.addEventListener(mouseEventName, function (e) {
        e.preventDefault();
        var target = e.target;
        that.lastSystemMouseEnter = target.closest(".system");
        if (!that.lastSystemMouseEnter.classList.contains(enteredFlag)) {
          cq.getInteractOverlay(that.containerId).querySelectorAll(".system").forEach(s => {
            s.classList.remove(enteredFlag);
          });
          that.lastSystemMouseEnter.classList.add(enteredFlag);
        }
      });
    });
    this.interactionOverlay.querySelectorAll(".staff").forEach(staff => {
      staff.addEventListener(mouseEventName, function (e) {
        var _a;
        e.preventDefault();
        var target = e.target;
        that.lastStaffMouseEnter = target.closest(".staff");
        (_a = that.lastStaffMouseEnter) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new Event("currStaffChanged"));
        if (!that.lastStaffMouseEnter.classList.contains(enteredFlag)) {
          cq.getInteractOverlay(that.containerId).querySelectorAll(".staff").forEach(s => {
            s.classList.remove(enteredFlag);
            that.getElementInRootSVG(s.getAttribute("refId")).classList.remove(enteredFlag);
          });
          that.container.querySelectorAll(".onChord").forEach(oc => oc.classList.remove("onChord")); // reset onChord, so that only chords in the same staff are set
          that.lastStaffMouseEnter.classList.add(enteredFlag);
          that.getElementInRootSVG(that.lastStaffMouseEnter.getAttribute("refId")).classList.add(enteredFlag);
        }
      });
    });
    this.interactionOverlay.querySelectorAll(".measure").forEach(measure => {
      measure.addEventListener(mouseEventName, function (e) {
        e.preventDefault();
        var target = e.target;
        that.lastMeasureMouseEnter = target.closest(".measure");
        if (!that.lastMeasureMouseEnter.classList.contains(enteredFlag)) {
          cq.getInteractOverlay(that.containerId).querySelectorAll(".measure").forEach(m => {
            m.classList.remove(enteredFlag);
          });
          that.lastMeasureMouseEnter.classList.add(enteredFlag);
          //that.rootSVG.querySelector("#"+that.lastMeasureMouseEnter.id).classList.add(enteredFlag)
        }
      });
    });

    this.interactionOverlay.querySelectorAll(".layer").forEach(layer => {
      layer.addEventListener(mouseEventName, function (e) {
        e.preventDefault();
        var target = e.target;
        that.lastLayerMouseEnter = target.closest(".layer");
        if (!that.lastLayerMouseEnter.classList.contains(enteredFlag)) {
          cq.getInteractOverlay(that.containerId).querySelectorAll(".layer").forEach(l => {
            l.classList.remove(enteredFlag);
          });
          that.lastLayerMouseEnter.classList.add(enteredFlag);
        }
      });
    });
    return this;
  }
  setMouseEnterElements(refElement) {
    var _a, _b, _c, _d, _e, _f, _g;
    this.lastSystemMouseEnter = this.getElementInInteractOverlay((_a = refElement.closest(".system")) === null || _a === void 0 ? void 0 : _a.id);
    this.lastMeasureMouseEnter = this.getElementInInteractOverlay((_b = refElement.closest(".measure")) === null || _b === void 0 ? void 0 : _b.id) || this.getElementInInteractOverlay((_c = refElement.querySelector(".measure")) === null || _c === void 0 ? void 0 : _c.id);
    this.lastStaffMouseEnter = this.getElementInInteractOverlay((_d = refElement.closest(".staff")) === null || _d === void 0 ? void 0 : _d.id) || this.getElementInInteractOverlay((_e = refElement.querySelector(".staff")) === null || _e === void 0 ? void 0 : _e.id);
    this.lastLayerMouseEnter = this.getElementInInteractOverlay((_f = refElement.closest(".layer")) === null || _f === void 0 ? void 0 : _f.id) || this.getElementInInteractOverlay((_g = refElement.querySelector(".layer")) === null || _g === void 0 ? void 0 : _g.id);
    //this.update()
  }

  getMouseEnterElementByName(name) {
    let e;
    switch (name) {
      case "system":
        e = this.lastSystemMouseEnter;
        break;
      case "staff":
        e = this.lastStaffMouseEnter;
        break;
      case "measure":
        e = this.lastMeasureMouseEnter;
        break;
      case "layer":
        e = this.lastLayerMouseEnter;
        break;
      default:
        e = null;
    }
    return e;
  }
  findBBoxes() {
    var notes = this.rootSVG.querySelectorAll(".note, .rest, .mRest, .notehead");
    var root = this.rootSVG;
    Array.from(notes).forEach(element => {
      var interactionElement = this.interactionOverlay.querySelector("[refId=" + element.id + "]");
      if (interactionElement === null) return;
      var relpt = coordinates.getDOMMatrixCoordinates(interactionElement, this.interactionOverlay);
      let bb = {
        id: element.id,
        parentStaff: element.closest(".staff"),
        parentLayer: element.closest(".layer"),
        parentMeasure: element.closest(".measure"),
        //x: element.getBoundingClientRect().x + window.pageXOffset,
        //y: element.getBoundingClientRect().y + window.pageYOffset
        x: relpt.right,
        y: relpt.y
      };
      this.noteBBoxes.push(bb);
    });
    // this.measureMatrix.populateFromSVG(document.querySelector(c._ROOTSVGID_WITH_IDSELECTOR_));
    this.measureMatrix.populateFromMEI(this.currentMEI);
    var staves = cq.getRootSVG(this.containerId).querySelectorAll(constants_1.constants._STAFF_WITH_CLASSSELECTOR_);
    Array.from(staves).forEach(element => {
      let g = cq.getRootSVG(this.containerId).querySelectorAll("#" + element.id + " > path");
      let staff = element;
      let idxStaff = parseInt(element.getAttribute("n")) - 1;
      let closestMeasure = element.closest(".measure");
      let idxParentMeasure = parseInt(closestMeasure.getAttribute("n")) - 1;
      let clefShape = this.measureMatrix.get(idxParentMeasure, idxStaff).clef;
      Array.from(g).forEach((staffLine, idx) => {
        if (staffLine.id === "") {
          staffLine.id = random_1.uuidv4();
        }
        staffLine.classList.add("staffLine");
        staffLine.classList.add("Clef" + clefShape);
        var map = null;
        switch (clefShape) {
          case "G":
            map = mappings_1.idxNoteMapGClef;
            break;
          case "F":
            map = mappings_1.idxNoteMapFClef;
            break;
          case "C":
            map = mappings_1.idxNoteMapCClef;
            break;
          default:
            console.error("No Clef found");
            break;
        }
        staffLine.classList.add(map.get(idx * 2));
        staffLine.classList.add("Clef" + clefShape);
        //var interactionElement = this.interactionOverlay.querySelector("[refId=" + staffLine.id +"]")
        var relpt = coordinates.getDOMMatrixCoordinates(staffLine, this.rootSVG);
        let bb = {
          id: staffLine.parentElement.id,
          y: relpt.y,
          staffIdx: idx * 2,
          classList: staffLine.classList
        };
        this.staffLineBBoxes.push(bb);
      });
    });
  }
  /**
   * Create Phantom Lines to detect clicks above and under the system
   */
  createPhantomLines(upperStaffBound, lowerStaffBound) {
    this.phantomStaffLinesAbove = new Array();
    this.phantomStaffLinesBelow = new Array();
    var diffY = Math.abs(this.staffLineBBoxes[0].y - this.staffLineBBoxes[1].y);
    //Above System
    for (var i = 0; i < 9; i++) {
      if (i === 0) {
        this.phantomStaffLinesAbove.push({
          y: this.staffLineBBoxes[upperStaffBound].y - diffY
        });
      } else {
        this.phantomStaffLinesAbove.push({
          y: this.phantomStaffLinesAbove[i - 1].y - diffY
        });
      }
    }
    //Below System
    for (var i = 0; i < 12; i++) {
      if (i === 0) {
        this.phantomStaffLinesBelow.push({
          y: this.staffLineBBoxes[lowerStaffBound].y + diffY
        });
      } else {
        this.phantomStaffLinesBelow.push({
          y: this.phantomStaffLinesBelow[i - 1].y + diffY
        });
      }
    }
  }
  /**
   * Define New Note at coordinates
   * 1. Check if left of Note
   * 2. Check position between staves
   * 3. update
   *
   * @param x page Coordinate
   * @param y page Coordinate
   */
  defineNote(x, y, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    let staffIsEmpty = true;
    let isLeftOfNote;
    //let isRightOfNote: Boolean
    let currentNearestNote = null;
    let diffNote = null;
    let leftRightPos;
    let allIDs = Array.from(this.rootSVG.querySelectorAll(".staff")).map(s => s.getAttribute("id"));
    if (this.lastStaffMouseEnter === null) {
      return;
    }
    let staffIdx = allIDs.indexOf((_a = this.lastStaffMouseEnter) === null || _a === void 0 ? void 0 : _a.getAttribute("refId"));
    let upperStaffBound = staffIdx * 5 + 0;
    let lowerStaffBound = staffIdx * 5 + 4;
    let aboveSystem = y < ((_b = this.staffLineBBoxes[upperStaffBound]) === null || _b === void 0 ? void 0 : _b.y) ? true : false;
    let belowSystem = y > ((_c = this.staffLineBBoxes[lowerStaffBound]) === null || _c === void 0 ? void 0 : _c.y) ? true : false;
    let isInSystem = !aboveSystem && !belowSystem;
    //this will cause that the duration of the chord will not be applied on inserted note
    let isRestChord = false;
    if (options.targetChord != undefined) {
      isRestChord = options.targetChord.classList.contains("rest");
    }
    options.targetChord = isRestChord ? undefined : options.targetChord;
    (_e = this.getElementInRootSVG((_d = this.lastStaffMouseEnter) === null || _d === void 0 ? void 0 : _d.getAttribute("refId"))) === null || _e === void 0 ? void 0 : _e.querySelectorAll(".layer").forEach(l => {
      if (l.hasChildNodes()) {
        staffIsEmpty = false;
      }
    });
    var currentStaffClef;
    for (const [key, value] of (_g = this.getElementInRootSVG((_f = this.lastStaffMouseEnter) === null || _f === void 0 ? void 0 : _f.getAttribute("refId"))) === null || _g === void 0 ? void 0 : _g.querySelector(".staffLine").classList.entries()) {
      if (value.indexOf("Clef") !== -1) {
        currentStaffClef = value;
        break;
      }
    }
    // Define relative position for click insert
    // position should also consider right border of bounding box. Position should be 
    if (!staffIsEmpty) {
      let nbb = [];
      this.noteBBoxes.forEach(bb => {
        var _a;
        if (bb.parentStaff.id === ((_a = this.lastStaffMouseEnter) === null || _a === void 0 ? void 0 : _a.getAttribute("refId"))) {
          nbb.push(bb);
        }
      });
      nbb.forEach(bb => {
        let zerocrossing = x - bb.x;
        let tempDiff = Math.sqrt(Math.abs(x - bb.x) ** 2 + Math.abs(y - bb.y) ** 2);
        if (diffNote === null || Math.abs(tempDiff) < Math.abs(diffNote)) {
          diffNote = tempDiff;
          currentNearestNote = bb;
          isLeftOfNote = zerocrossing <= 0 ? true : false;
          // if(cq.getRootSVG(this.containerId).querySelector("#" + bb.id)?.classList.contains("rest")){
          //     isLeftOfNote = !isLeftOfNote
          // }
          //isRightOfNote = tempDiff > 0 ? true : false;
        }
      });

      leftRightPos = isLeftOfNote ? "left" : "right";
    }
    if (isRestChord) {
      leftRightPos = "left";
    }
    let currentNearestStaffLine = null;
    let currentNearestLineIdx = null;
    let isOverStaff;
    //let isUnderStaff: Boolean;
    let diffStaff = null;
    let pname;
    let oct;
    let noteDefinition = new Array();
    let nextPitchIdx;
    if (!isInSystem) {
      //Phantom Line Stuff
      this.phantomLines = new Array();
      let currentNearestY;
      this.createPhantomLines(upperStaffBound, lowerStaffBound);
      let lineArr = aboveSystem ? this.phantomStaffLinesAbove : this.phantomStaffLinesBelow;
      let aboveMap;
      let belowMap;
      switch (currentStaffClef) {
        case "ClefG":
          aboveMap = mappings_1.idxNotePhantomMapAboveG;
          belowMap = mappings_1.idxNotePhantomMapBelowG;
          break;
        case "ClefF":
          aboveMap = mappings_1.idxNotePhantomMapAboveF;
          belowMap = mappings_1.idxNotePhantomMapBelowF;
          break;
        case "ClefC":
          aboveMap = mappings_1.idxNotePhantomMapAboveC;
          belowMap = mappings_1.idxNotePhantomMapBelowC;
          break;
        default:
          console.log("NO CLEF FOUND");
      }
      let map = aboveSystem ? aboveMap : belowMap;
      let mappingidx = 0;
      lineArr.forEach((line, idx) => {
        let tempDiff = y - line.y;
        mappingidx++;
        if (diffStaff === null || Math.abs(tempDiff) < Math.abs(diffStaff)) {
          this.phantomLines.push(line.y);
          //if(idx%2 !== 0){return} // take only Elements which are actually lines! (every second one)
          currentNearestY = line.y;
          diffStaff = tempDiff;
          currentNearestLineIdx = idx + mappingidx;
          isOverStaff = tempDiff <= 0 ? true : false;
        }
      });
      // prepare center coordinate (Y) for snapping
      let lineDist = Math.abs(lineArr[0].y - lineArr[1].y);
      this.lineDist = lineDist / 2;
      lineDist = isOverStaff ? -lineDist : lineDist;
      if (Math.abs(currentNearestY - y) < Math.abs(lineDist / 2 + currentNearestY - y)) {
        // line pos < middleline pos
        this.newNoteY = currentNearestY;
        nextPitchIdx = currentNearestLineIdx;
      } else {
        if (aboveSystem) {
          nextPitchIdx = isOverStaff ? currentNearestLineIdx + 1 : currentNearestLineIdx - 1;
        } else {
          nextPitchIdx = isOverStaff ? currentNearestLineIdx - 1 : currentNearestLineIdx + 1;
        }
        this.newNoteY = currentNearestY + lineDist / 2;
      }
      if (map.get(nextPitchIdx) == undefined) {
        return;
      } // cursor is outside of score
      pname = map.get(nextPitchIdx).charAt(0);
      oct = map.get(nextPitchIdx).charAt(1);
    } else {
      // Decide if Staffline is given or not
      this.phantomLines = undefined;
      if (options.staffLineId == undefined) {
        let sbb = [];
        this.staffLineBBoxes.forEach(bb => {
          var _a;
          if (bb.id === ((_a = this.lastStaffMouseEnter) === null || _a === void 0 ? void 0 : _a.getAttribute("refId"))) sbb.push(bb);
        });
        sbb.forEach(bb => {
          let tempDiff = y - bb.y;
          if (diffStaff === null || Math.abs(tempDiff) < Math.abs(diffStaff)) {
            diffStaff = tempDiff;
            currentNearestStaffLine = bb;
            isOverStaff = tempDiff <= 0 ? true : false;
            //isUnderStaff = tempDiff > 0 ? true : false;
          }
        });
        // prepare center coordinate (Y) for snapping
        if (sbb[0] == undefined || sbb[1] == undefined) {
          return;
        }
        let lineDist = Math.abs(sbb[0].y - sbb[1].y);
        this.lineDist = lineDist / 2;
        lineDist = isOverStaff ? -lineDist : lineDist;
        if (Math.abs(currentNearestStaffLine.y - y) < Math.abs(lineDist / 2 + currentNearestStaffLine.y - y)) {
          // line pos < middleline pos
          this.newNoteY = currentNearestStaffLine.y; // on line
          nextPitchIdx = currentNearestStaffLine.staffIdx;
        } else {
          this.newNoteY = currentNearestStaffLine.y + lineDist / 2; // between lines
          nextPitchIdx = isOverStaff ? currentNearestStaffLine.staffIdx - 1 : currentNearestStaffLine.staffIdx + 1;
        }
        let map = null;
        if (currentNearestStaffLine.classList.contains("ClefG")) {
          map = mappings_1.idxNoteMapGClef;
        } else if (currentNearestStaffLine.classList.contains("ClefF")) {
          map = mappings_1.idxNoteMapFClef;
        } else if (currentNearestStaffLine.classList.contains("ClefC")) {
          map = mappings_1.idxNoteMapCClef;
        } else {
          throw new Error("No Note to Clef Mapping found");
        }
        if (map.get(nextPitchIdx) == undefined) {
          return;
        }
        pname = map.get(nextPitchIdx).charAt(0);
        oct = map.get(nextPitchIdx).charAt(1);
      } else {
        let pitch;
        try {
          pitch = cq.getInteractOverlay(this.containerId).querySelector("#" + options.staffLineId).getAttribute("class").split(" ");
        } catch (_k) {
          return;
        }
        let p = pitch.filter(function (obj) {
          let isPname = obj.charAt(0) === obj.charAt(0).toLowerCase(); // noch regexe?
          let isOct = !isNaN(parseInt(obj.charAt(1)));
          let length = obj.length === 2;
          return isPname && isOct && length;
        });
        pname = p[0].charAt(0);
        oct = p[0].charAt(1);
        this.newNoteY = this.staffLineBBoxes.filter(function (bb) {
          return bb.classList === cq.getInteractOverlay(this.containerId).querySelector("#" + options.staffLineId).classList;
        })[0].y; // assert that length is 1 (all classlists are unique for )
      }
    }
    //get relevant staffinfo
    //var closestStaff = this.currentMEI.getElementById(currentNearestNote.id).closest("staff")
    var closestStaff = this.currentMEI.getElementById((_h = this.lastStaffMouseEnter) === null || _h === void 0 ? void 0 : _h.getAttribute("refId"));
    var closestMeasure = closestStaff.closest("measure");
    var closestStaffIdx = parseInt(closestStaff.getAttribute("n")) - 1;
    var closestMeasureIdx = parseInt(closestMeasure.getAttribute("n")) - 1;
    var nearestNoteId = currentNearestNote !== null ? currentNearestNote.id : null;
    if (nearestNoteId !== null) {
      // ensure note id to be in new note
      nearestNoteId = this.rootSVG.querySelector("#" + nearestNoteId).classList.contains("notehead") ? this.rootSVG.querySelector("#" + nearestNoteId).closest(".note").id : nearestNoteId;
    }
    var keysig = this.measureMatrix.get(closestMeasureIdx, closestStaffIdx).keysig;
    var accid;
    if (this.container.querySelector(".alterBtn.selected") !== null) {
      accid = mappings_1.modButtonToAccid.get(this.container.querySelector(".alterBtn.selected").id);
    } else if (keysig != undefined) {
      accid = mappings_1.keysigToNotes.get(keysig);
      accid = accid.filter(s => {
        return s === pname;
      });
      if (accid.length === 1) {
        accid = keysig.charAt(1);
      }
    }
    var newNote = {
      id: random_1.uuidv4(),
      pname: pname,
      dur: this.getDurationNewNote(),
      dots: this.getDotsNewNote(),
      oct: oct,
      keysig: keysig,
      accid: accid,
      nearestNoteId: nearestNoteId,
      relPosX: leftRightPos,
      staffId: (_j = this.lastStaffMouseEnter) === null || _j === void 0 ? void 0 : _j.getAttribute("refId"),
      chordElement: options.targetChord,
      rest: this.container.querySelector("#pauseNote").classList.contains("selected")
    };
    this.newNote = newNote;
  }
  /**
   * Find Score Element nearest to given Position (e.g. Mouse)
   * @param posX should be already transformed DOMPoint
   * @param posY should be already transformed DOMPoint
   * @param checkStaff check if vertical distance in the staff should be considered
   * (for example: should be false, when check position for Annotations, should be true when placing notes in different staves)
   * @param orientation only consider elements which are left or right of given coordinates
   * @returns
   */
  findScoreTarget(posX, posY, checkStaff = true, orientation = {
    left: true,
    right: true
  }) {
    var notes = this.getNoteBBoxes();
    var nextNote;
    var tempDist = Math.pow(10, 10);
    notes.forEach(n => {
      var _a, _b, _c, _d;
      var x;
      var y;
      if (((_a = this.getElementInRootSVG(n.id)) === null || _a === void 0 ? void 0 : _a.closest(".chord")) && navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
        // special rule for firefox browsers
        x = (_b = this.getElementInRootSVG(n.id)) === null || _b === void 0 ? void 0 : _b.closest(".chord").getBoundingClientRect().x;
        y = (_c = this.getElementInRootSVG(n.id)) === null || _c === void 0 ? void 0 : _c.closest(".chord").getBoundingClientRect().y;
      } else {
        x = n.x;
        y = n.y;
      }
      //filter for left and right elements
      if (!this.rootSVG.querySelector("#" + n.id).classList.contains("mRest")) {
        //mRest are excluded from this rule
        if (orientation.left === false) {
          if (x < posX) return; //exclude left elements
        } else if (orientation.right === false) {
          if (x > posX) return; // exclude right elements
        }
      }

      var dist = Math.abs(x - posX);
      var staffCondition = n.parentStaff === this.getElementInRootSVG((_d = this.lastStaffMouseEnter) === null || _d === void 0 ? void 0 : _d.getAttribute("refId"));
      if (checkStaff === false) {
        staffCondition = true;
        dist = Math.sqrt(Math.abs(x - posX) ** 2 + Math.abs(y - posY) ** 2);
      }
      if (dist < tempDist && staffCondition) {
        // define next note in staff bounds
        tempDist = dist;
        nextNote = n;
      }
    });
    return nextNote;
  }
  ///// GETTER/ SETTER ///////
  getLastMouseEnter() {
    return {
      layer: this.lastLayerMouseEnter,
      staff: this.lastStaffMouseEnter,
      measure: this.lastMeasureMouseEnter,
      system: this.lastSystemMouseEnter
    };
  }
  getNewNote() {
    return this.newNote;
  }
  getNewNoteY() {
    return this.newNoteY;
  }
  getPhantomLines() {
    return this.phantomLines;
  }
  getNoteBBoxes() {
    return this.noteBBoxes;
  }
  getStaffLineBBoxes() {
    return this.staffLineBBoxes;
  }
  setPnameNewNote(name) {
    this.notePname = name;
  }
  setDurationNewNote(dur) {
    this.noteNewDur = dur.toString();
  }
  /**
   * Change note, chord or rest to given duration
   * @param dur
   * @returns
   */
  setMarkedNoteDurations(dur) {
    var retVal = false;
    var markedElements = this.rootSVG.querySelectorAll(".note.marked, .rest.marked");
    markedElements.forEach(m => {
      var currMeiClone = this.currentMEI.cloneNode(true);
      var meiElement = this.currentMEI.getElementById(m.id);
      var oldMeiElement = meiElement.cloneNode(true);
      var newMeiElement;
      if (meiElement.closest("chord") !== null) {
        oldMeiElement = meiElement.closest("chord").cloneNode(true);
        meiElement.closest("chord").setAttribute("dur", dur.toString());
        newMeiElement = meiElement.closest("chord");
      } else {
        oldMeiElement = meiElement.cloneNode(true);
        meiElement.setAttribute("dur", dur.toString());
        newMeiElement = meiElement;
      }
      oldMeiElement.replaceWith(newMeiElement);
      this.currentMEI = meiOperation.fillWithRests(newMeiElement, oldMeiElement, this.currentMEI);
      //if(this.currentMEI.querySelectorAll(".changed").length ===  0){
      var additionalElements = Array.from(newMeiElement.closest("layer").querySelectorAll("*[dur]"));
      additionalElements = additionalElements.filter((v, i) => i > additionalElements.indexOf(newMeiElement));
      //this.currentMEI = meiOperation.changeDuration(this.currentMEI, "reduce", additionalElements)
      //additionalElements.unshift(oldMeiElement) // we need this information to determine the new duration of an element that has to be shortened
      this.currentMEI = meiOperation.changeDuration(this.currentMEI, additionalElements, newMeiElement); //this.currentMEI = meiOperation.changeDuration(this.currentMEI, additionalElements)
      //}
      this.currentMEI.querySelectorAll(".changed").forEach(c => c.classList.remove("changed"));
      //check if following events (notes, chords, rests) should be replaced 
      if (meiOperation.elementIsOverfilling(meiElement, currMeiClone)) {
        this.currentMEI = currMeiClone;
      } else {
        retVal = true;
      }
    });
    return retVal;
  }
  /**
   * Change number of dots for note, chord or rest
   * @param dots
   * @returns
   */
  setMarkedNoteDots(dots) {
    var retVal = false;
    var markedElements = this.rootSVG.querySelectorAll(".note.marked, .rest.marked");
    markedElements.forEach(m => {
      var currMeiClone = this.currentMEI.cloneNode(true);
      var meiElement = this.currentMEI.getElementById(m.id);
      var oldMeiElement = meiElement.cloneNode(true);
      var newMeiElement;
      if (meiElement.closest("chord") !== null) {
        oldMeiElement = meiElement.closest("chord").cloneNode(true);
        meiElement.closest("chord").setAttribute("dots", dots.toString());
        newMeiElement = meiElement.closest("chord");
      } else {
        oldMeiElement = meiElement.cloneNode(true);
        meiElement.setAttribute("dots", dots.toString());
        newMeiElement = meiElement;
      }
      oldMeiElement.replaceWith(newMeiElement);
      this.currentMEI = meiOperation.fillWithRests(newMeiElement, oldMeiElement, this.currentMEI);
      //if(this.currentMEI.querySelectorAll(".changed").length ===  0){
      var additionalElements = Array.from(newMeiElement.closest("layer").querySelectorAll("*[dur]"));
      additionalElements = additionalElements.filter((v, i) => i > additionalElements.indexOf(newMeiElement));
      //this.currentMEI = meiOperation.changeDuration(this.currentMEI, "reduce", additionalElements)
      //additionalElements.unshift(oldMeiElement) // we need this information to determine the new duration of an element that has to be shortened
      this.currentMEI = meiOperation.changeDuration(this.currentMEI, additionalElements, newMeiElement, meiOperation.getAbsoluteRatio(newMeiElement) - meiOperation.getAbsoluteRatio(oldMeiElement)); //this.currentMEI = meiOperation.changeDuration(this.currentMEI, additionalElements)
      //}
      this.currentMEI.querySelectorAll(".changed").forEach(c => c.classList.remove("changed"));
      if (meiOperation.elementIsOverfilling(meiElement, currMeiClone)) {
        this.currentMEI = currMeiClone;
      } else {
        retVal = true;
      }
    });
    return retVal;
  }
  getElementInRootSVG(id) {
    if (id !== "" && id !== null) {
      return this.rootSVG.querySelector("#" + id);
    }
    return;
  }
  getElementInInteractOverlay(id) {
    if (id !== "" && id !== null) {
      return this.interactionOverlay.querySelector("#" + id);
    }
    return;
  }
  setDotsNewNote(dots) {
    this.noteNewDots = dots.toString();
  }
  setCurrentMEI(xmlDoc) {
    var _a;
    this.currentMEI = xmlDoc;
    if (((_a = this.noteBBoxes) === null || _a === void 0 ? void 0 : _a.length) === 0) {
      this.findBBoxes();
    }
    return this;
  }
  setContainerId(id) {
    this.containerId = id;
    this.interactionOverlay = cq.getInteractOverlay(id);
    this.rootSVG = cq.getRootSVG(id);
    this.container = document.getElementById(id);
    return this;
  }
  getCurrentMei() {
    return this.currentMEI;
  }
  getMeasureMatrix() {
    return this.measureMatrix;
  }
  getDurationNewNote() {
    var dur;
    var selEl = this.container.querySelector("#noteGroup .selected");
    if (selEl === null) {
      return "4";
    }
    switch (selEl.id) {
      case "fullNote":
        dur = 1;
        break;
      case "halfNote":
        dur = 2;
        break;
      case "quarterNote":
        dur = 4;
        break;
      case "eigthNote":
        dur = 8;
        break;
      case "sixteenthNote":
        dur = 16;
        break;
      case "thirtysecondNote":
        dur = 32;
        break;
    }
    return dur.toString(); //this.noteNewDur
  }

  getDotsNewNote() {
    var dots;
    var selEl = this.container.querySelector("#dotGroup .selected");
    if (selEl === null) {
      return "0";
    }
    switch (selEl.id) {
      case "oneDot":
        dots = "1";
        break;
      case "twoDot":
        dots = "2";
        break;
    }
    return dots;
  }
  getLineDist() {
    return this.lineDist;
  }
  update() {
    this.noteBBoxes.length = 0;
    this.staffLineBBoxes.length = 0;
    //this.updateOverlayCallback()
    this.findBBoxes();
    this.setMouseEnterElementListeners();
    return this;
  }
  setUpdateOverlayCallback(updateOverlayCallback) {
    this.updateOverlayCallback = updateOverlayCallback;
    return this;
  }
}
exports.Mouse2MEI = Mouse2MEI;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/SVGFiller.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/SVGFiller.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



/**
 * Class to fill SVG of Score in HTML with information from underlying mei
 */
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const random_1 = __webpack_require__(/*! ./random */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js");
class SVGFiller {
  constructor() {
    this.allowedMeiClasses = ["marked"];
    this.x = 0;
    this.y = 0;
  }
  /**
   * Fill SVG in Dom with relevant mei Information
   * @param mei Document from MEI
   */
  fillSVG(mei) {
    this.fillSystemCounts(mei);
    this.countBarlines();
    return this;
  }
  /**
   * Fill measure, staff and layer with n attributes from MEI
   * @param mei Document from MEI
   */
  fillSystemCounts(mei) {
    var that = this;
    var elements = Array.from(mei.querySelectorAll("measure, staff, layer"));
    elements.forEach(e => {
      if (e.id !== "") {
        var svgElement = that.container.querySelector("#" + e.id);
        if (svgElement === null || e.getAttribute("n") === null) {
          return;
        }
        svgElement.setAttribute("n", e.getAttribute("n"));
      }
    });
    return this;
  }
  cacheClasses() {
    //var svg = document.querySelector("#"+this.containerId + " #rootSVG")
    var svg = document.querySelector("#" + this.containerId);
    if (svg === null) {
      return this;
    }
    this.classListMap = new Map();
    svg.querySelectorAll("*").forEach(el => {
      var _a;
      //if(el.tagName.toLowerCase() === "g" && el.getAttribute("id") !== null){
      if (el.getAttribute("id") !== null) {
        if (!this.classListMap.has(el.id)) {
          this.classListMap.set(el.id, new Array());
        }
        var classes = (_a = el.getAttribute("class")) === null || _a === void 0 ? void 0 : _a.split(" ");
        classes === null || classes === void 0 ? void 0 : classes.forEach(c => {
          if (!this.classListMap.get(el.id).includes(c)) {
            this.classListMap.get(el.id).push(c.slice());
          }
        });
      }
    });
    return this;
  }
  cacheScales() {
    var svg = document.querySelector("#" + this.containerId);
    if (svg === null) {
      return this;
    }
    this.scaleListMap = new Map();
    svg.querySelectorAll("[transform]").forEach(el => {
      if (el.getAttribute("id") !== null) {
        var tattr = el.getAttribute("transform");
        if (tattr.includes("scale")) {
          if (!this.scaleListMap.has(el.id)) {
            this.scaleListMap.set(el.id, tattr);
          }
        }
      }
    });
    return this;
  }
  copyClassesFromMei(mei) {
    if (this.classListMap == undefined) {
      return this;
    }
    mei.querySelectorAll("score  *").forEach(el => {
      var _a;
      if (el.hasAttribute("class")) {
        var id = el.getAttribute("id") || el.getAttribute("xml:id");
        if (!this.classListMap.has(id)) {
          this.classListMap.set(id, new Array());
        }
        var classes = (_a = el.getAttribute("class")) === null || _a === void 0 ? void 0 : _a.split(" ");
        classes === null || classes === void 0 ? void 0 : classes.forEach(c => {
          if (!this.classListMap.get(id).includes(c) && this.allowedMeiClasses.includes(c)) {
            this.classListMap.get(id).push(c.slice());
          }
        });
        el.removeAttribute("class");
      }
    });
    return this;
  }
  /**
   * Reload all the classes which where distributed before
   * @returns this (for chaining convenience)
   */
  loadClasses() {
    if (this.classListMap == undefined) {
      return this;
    }
    for (const [key, value] of this.classListMap.entries()) {
      var el = this.container.querySelector("#" + key);
      if (el !== null) {
        //el.removeAttribute("class")
        value.forEach(v => {
          if (v !== "") {
            el.classList.add(v);
          }
        });
      }
    }
    return this;
  }
  loadScales() {
    if (this.scaleListMap == undefined) {
      return this;
    }
    for (const [key, value] of this.scaleListMap.entries()) {
      var el = this.container.querySelector("#" + key);
      if (el !== null) {
        el.setAttribute("transform", value);
      }
    }
    return this;
  }
  repositionSVG(svg) {
    var _a;
    var transformList = ((_a = svg.getAttribute("transform")) === null || _a === void 0 ? void 0 : _a.split(") ")) || new Array();
    console.log(svg.getAttribute("transform"), transformList);
    var hasTranslate = false;
    transformList.forEach((t, i) => {
      if (t.includes("translate")) {
        transformList[i] = "translate(" + this.x + " " + this.y + ")";
        hasTranslate = true;
      }
      if (t.slice(-1) !== ")") {
        transformList[i] = transformList[i] + ")";
      }
    });
    if (!hasTranslate) {
      transformList.push("translate(" + this.x + " " + this.y + ")");
    }
    var trattr = transformList.join(" ");
    console.log(trattr);
    svg.setAttribute("transform", trattr);
    return this;
  }
  /**
   * Merge all tspans in a harm object in the top tspan to avoid columns for (especially in Firefox browsers)
   * @returns
   */
  clearTspan() {
    var gelements = this.container.querySelectorAll("g .harm");
    gelements.forEach(g => {
      var textEl = g.querySelector("text");
      var textTspan = g.querySelectorAll("tspan");
      var text = "";
      if (textTspan.length <= 2) {
        return;
      }
      text = textTspan[0].textContent;
      text = text.replace(/ /g, '');
      text = text.replace(/\n/g, '');
      textEl.querySelector("tspan").firstElementChild.textContent = text;
      textEl.querySelector("tspan").firstElementChild.setAttribute("font-family", "VerovioText");
      textTspan.forEach((tp, idx) => {
        if (idx >= 2) {
          tp.remove();
        }
      });
    });
    return this;
  }
  countBarlines() {
    this.container.querySelectorAll(".barLine").forEach(bl => {
      bl.querySelectorAll("path").forEach((p, idx) => {
        p.setAttribute("n", (idx + 1).toString());
      });
    });
  }
  distributeIds(element, propagation = false) {
    if (propagation) {
      var id = element.id !== "" ? element.id : element.getAttribute("refId");
      Array.from(element.children).forEach(c => {
        var selfId = c.id !== "" ? c.id : c.getAttribute("refId");
        if (selfId === null && id !== null) {
          c.setAttribute("refId", id);
        }
        this.distributeIds(c, true);
      });
    } else {
      Array.from(element.querySelectorAll("*")).forEach(el => {
        if (el.id === "") {
          el.setAttribute("id", random_1.uuidv4());
        }
      });
    }
  }
  setContainerId(containerId) {
    this.containerId = containerId;
    this.container = document.getElementById(containerId);
    return this;
  }
  setXY(x, y) {
    this.x = x || 0;
    this.y = y || 0;
    //console.log("müssen die koordinaten noch umgerechnet werden???", x, y)
  }
}

exports["default"] = SVGFiller;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/VerovioWrapper.js":
/*!******************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/VerovioWrapper.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
//@ts-ignore
//const $ = H5P.jQuery;
/**
 * A wrapper around the verovio web worker to permit mocking in tests.
 */
class VerovioWrapper {
  constructor() {
    //@ts-ignore
    this.vrvToolkit = new verovio.toolkit() || null;
    this.r = 1;
    if (this.isRetina()) {
      this.r = 2;
    }
    this.widthValue = 2500;
    this.vrvToolkit.setOptions({
      // from: 'mei',
      footer: 'none',
      header: 'none',
      pageMarginLeft: 50,
      pageMarginTop: 100,
      pageMarginBottom: 10,
      font: 'Bravura',
      //adjustPageWidth: 0,
      //adjustPageHeight: 0,
      noJustification: 1,
      pageWidth: this.widthValue / (window.devicePixelRatio / this.r) / (screen.availHeight / window.innerWidth),
      //svgRemoveXlink: true,
      svgViewBox: true
      //svgBoundingBoxes: true
      //pageHeight: 60000
    });
  }
  /**
   * Detect, if retina display is used.
   * This will be important to adjust the pagewith with the given zoom level
   * @returns
   */
  isRetina() {
    if (window.matchMedia) {
      var mq = window.matchMedia("only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen  and (min-device-pixel-ratio: 1.3), only screen and (min-resolution: 1.3dppx)");
      return mq && mq.matches;
    }
  }
  setMessage(data) {
    this.r = 1;
    if (this.isRetina()) {
      this.r = 2;
    }
    this.vrvToolkit.setOptions({
      //pageWidth: (this.vrvToolkit.getOptions().pageWidth / (window.devicePixelRatio / this.r)) / (screen.availHeight / window.innerWidth)
      pageWidth: this.widthValue / (window.devicePixelRatio / this.r) / (screen.availHeight / window.innerWidth)
    });
    this.data = data || null;
    var result = {
      id: data.id
    };
    switch (data.action) {
      case 'renderData':
        result.mei = this.renderData();
        break;
      case 'getElementAttr':
        result.attributes = this.getElementAttr();
        break;
      case 'getTimeForElement':
        result.time = this.getTimeForElement();
        break;
      case "getTimesForElement":
        result.times = this.getTimesForElement();
      case 'edit':
        result.result = this.edit();
        break;
      case 'getMEI':
        result.mei = this.getMEI();
        break;
      case 'editInfo':
        result.info = this.editInfo();
        break;
      case 'renderToSVG':
        result.svg = this.renderToSVG();
        break;
      case 'renderToMidi':
        result.midi = this.renderToMidi();
      default:
        break;
    }
    return result;
  }
  getID() {
    return this.data.id;
  }
  renderData() {
    var meiString;
    if (this.data.isUrl) {
      //   $.ajax({
      //       url: this.data.mei,
      //       dataType: "text",
      //       async: false
      //   })
      //   .done((res: string) =>{
      //     console.log(Object.prototype.toString.call(res))
      //     meiString = res
      //     return this.vrvToolkit.renderData(meiString, {})
      //   })
      const req = new XMLHttpRequest();
      req.open('GET', this.data.mei, false);
      //req.onload = () => req.status === 200 ? resolve(req.response) : reject(Error(req.statusText));
      //req.onerror = (e) => reject(Error(`Network Error: ` + e));
      req.send();
      if (req.status === 200) {
        meiString = req.response;
      }
    } else {
      meiString = this.data.mei;
    }
    return this.vrvToolkit.renderData(meiString, {});
  }
  getElementAttr() {
    return this.vrvToolkit.getElementAttr(this.data.elementId);
  }
  getTimeForElement() {
    return this.vrvToolkit.getTimeForElement(this.data.elementId);
  }
  getTimesForElement() {
    return this.vrvToolkit.getTimesForElement(this.data.elementId);
  }
  edit() {
    return this.vrvToolkit.edit(this.data.editorAction);
  }
  getMEI() {
    return this.vrvToolkit.getMEI({
      pageNo: 0,
      scoreBased: true
    });
  }
  editInfo() {
    return this.vrvToolkit.editInfo();
  }
  renderToSVG() {
    return this.vrvToolkit.renderToSVG(1);
  }
  renderToMidi() {
    return this.vrvToolkit.renderToMIDI();
  }
  /**
   * Get Toolkit instance to use any method of verovio outside of score editor.
   * FOr all available methods go to: https://book.verovio.org/toolkit-reference/toolkit-methods.html
   * @returns toolkit instance
   */
  getToolkit() {
    return this.vrvToolkit;
  }
  setWidthValue(wv) {
    this.widthValue = wv;
  }
  setHeightValue(hv) {
    this.heightValue = hv;
  }
}
exports["default"] = VerovioWrapper;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/convenienceQueries.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hasActiveElement = exports.getBySelector = exports.getContainer = exports.getInteractOverlay = exports.getRootSVG = void 0;
function getRootSVG(containerId) {
  return document.querySelector("#" + containerId + " #rootSVG");
}
exports.getRootSVG = getRootSVG;
function getInteractOverlay(containerId) {
  return document.querySelector("#" + containerId + " #interactionOverlay");
}
exports.getInteractOverlay = getInteractOverlay;
function getContainer(id) {
  return document.getElementById(id);
}
exports.getContainer = getContainer;
/**
 * Get any element by defining parent, target an selector. Booleans will define if the strings are handeled as ids
 */
function getBySelector(parent, parentModulator, target, targetModulator, selector, all = false) {
  if (parentModulator !== null) {
    parent = parentModulator + parent;
  }
  if (targetModulator) {
    target = targetModulator + target;
  }
  if (all) {
    return Array.from(document.querySelectorAll(parent + " " + selector + " " + target));
  } else {
    return document.querySelector(parent + " " + selector + " " + target);
  }
}
exports.getBySelector = getBySelector;
function hasActiveElement(containerId) {
  return document.getElementById(containerId).classList.contains("activeContainer");
}
exports.hasActiveElement = hasActiveElement;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js":
/*!***************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.transformToDOMMatrixCoordinates = exports.getDOMMatrixCoordinates = void 0;
/**
 * Get DOMMatrix coordnates of element according to parent canvas class. Returns null if no canvas is found. If element is DOMRect, canvas must be provided
 * @param element
 * @param canvas provide canvas for element, otherwise closest canvas class will be retrieved
 * @returns
 */
function getDOMMatrixCoordinates(element, canvas = null) {
  if (canvas === null) {
    canvas = element instanceof Element ? element.closest(".canvas") : null;
    if (element instanceof DOMRect) {
      throw new Error("Canvas must be provided, if input is instance of DOMRect. Actual instance: " + element.constructor.name);
    }
    if (canvas === null) return;
  }
  var canvasMatrix = canvas.getScreenCTM().inverse();
  var elementBBox = !(element instanceof Element) ? element : element.getBoundingClientRect();
  var ptLT = new DOMPoint(elementBBox.left, elementBBox.top);
  ptLT = ptLT.matrixTransform(canvasMatrix);
  var ptRB = new DOMPoint(elementBBox.right, elementBBox.bottom);
  ptRB = ptRB.matrixTransform(canvasMatrix);
  var width = ptRB.x - ptLT.x;
  var height = ptRB.y - ptLT.y;
  return {
    left: ptLT.x,
    top: ptLT.y,
    right: ptRB.x,
    bottom: ptRB.y,
    width: width,
    height: height,
    x: ptLT.x,
    y: ptLT.y
  };
}
exports.getDOMMatrixCoordinates = getDOMMatrixCoordinates;
/**
 * Transforms the given coordinates for a given canvas
 * @param x
 * @param y
 * @param canvas
 * @returns
 */
function transformToDOMMatrixCoordinates(x, y, canvas) {
  var canvasMatrix = canvas.getScreenCTM().inverse();
  var pt = new DOMPoint(x, y);
  pt = pt.matrixTransform(canvasMatrix);
  return {
    x: pt.x,
    y: pt.y
  };
}
exports.transformToDOMMatrixCoordinates = transformToDOMMatrixCoordinates;

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/firefoxBBoxes.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/firefoxBBoxes.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.adjustBBox = void 0;
const coordinates = __webpack_require__(/*! ./coordinates */ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/coordinates.js");
const allowedClasses = ["chord", "note", "notehead", "staff", "rest", "mRest", "clef", "meterSig", "keySig", "stem"];
/**
 * Compute new bounding box coordinates for relevant elements. And attach new translate function to element
 * @param element can be either element in #rootSVG .definition-scale or #interactionOverlay #scoreRects
 * @returns
 */
function adjustBBox(element) {
  var _a;
  var elClass;
  if (!allowedClasses.some(ac => {
    if (element.classList.contains(ac)) {
      elClass = ac;
      return true;
    }
  })) {
    return;
  }
  //target = element in #scoreRects
  var target;
  //source = element in #rootSVG
  var source;
  if (element.getAttribute("refId") === null) {
    target = (_a = document.querySelector("[refId=" + element.id + "]")) === null || _a === void 0 ? void 0 : _a.querySelector("rect");
    source = element;
  } else {
    target = element.querySelector("rect");
    source = document.getElementById(element.getAttribute("refId"));
  }
  if (source === null || target === null) {
    throw new Error("Referenced Element is null. BBox can't be computed for" + element.toString());
  }
  switch (elClass) {
    case "clef":
    case "keySig":
      simpleTranslate(source, target);
      break;
    case "mRest":
      simpleTranslate(source, target);
      halfWidth(target);
      break;
    case "rest":
      simpleTranslate(source, target);
      adjustHightToLowestStaffLine(source, target);
      halfWidth(target);
      break;
    case "meterSig":
      simpleTranslate(source, target);
      adjustHightToLowestStaffLine(source, target);
      break;
    case "staff":
      adjustHightToLowestStaffLine(source, target);
      adjustWidthToBarLine(source, target);
      break;
    case "note":
      translateNotehead(source, target);
      adjustToBetweenStemNoteheadBounds(source, target);
      break;
    case "chord":
      simpleTranslate(source, target);
      adjustToBetweenStemNoteheadBounds(source, target);
      break;
    case "stem":
      nullifyBBox(target);
      break;
  }
}
exports.adjustBBox = adjustBBox;
function simpleTranslate(source, target) {
  var useElement = source.querySelector("use") || source.querySelector("rect");
  var translateY = -parseFloat(useElement.getAttribute("y"));
  var translateX = -parseFloat(useElement.getAttribute("x"));
  target.setAttribute("transform", "translate(" + translateX.toString() + "," + translateY.toString() + ")");
}
function adjustHightToLowestStaffLine(source, target) {
  var closestStaff;
  if (source.classList.contains("staff")) {
    closestStaff = source;
  } else {
    closestStaff = source.closest(".staff");
  }
  var lowestStaffLine = Array.from(closestStaff.querySelectorAll(":scope > path")).reverse()[0];
  var coordsStaffline = coordinates.getDOMMatrixCoordinates(lowestStaffLine, source.closest("#rootSVG"));
  var coordsTarget = coordinates.getDOMMatrixCoordinates(target, target.closest("#interactionOverlay"));
  var targetHeight = coordsStaffline.y - coordsTarget.y;
  target.setAttribute("height", targetHeight.toString());
}
function adjustWidthToBarLine(source, target) {
  var closestMeasure = source.closest(".measure");
  var barline = closestMeasure.querySelector(".barLine");
  var coordsBarline = coordinates.getDOMMatrixCoordinates(barline, source.closest("#rootSVG"));
  var coordsTarget = coordinates.getDOMMatrixCoordinates(target, target.closest("#interactionOverlay"));
  var targetWidth = coordsBarline.x - coordsTarget.x;
  target.setAttribute("width", targetWidth.toString());
}
function translateNotehead(source, target) {
  var noteHeadSource = source.querySelector(".notehead");
  var noteHeadTarget = target.closest("#interactionOverlay").querySelector("[refId=" + noteHeadSource.id + "]");
  simpleTranslate(noteHeadSource, noteHeadTarget);
}
function adjustToBetweenStemNoteheadBounds(source, target) {
  var _a, _b;
  if (source.classList.contains("chord")) {
    var noteHeadSource = Array.from(source.querySelectorAll(".notehead")).reverse()[0];
  } else {
    noteHeadSource = source.querySelector(".notehead");
  }
  var noteHeadTarget = target.closest("#interactionOverlay").querySelector("[refId=" + noteHeadSource.id + "]");
  var coordsNoteHead = coordinates.getDOMMatrixCoordinates(noteHeadTarget, target.closest("#interactionOverlay"));
  var upperBoundSource = source.querySelector(".stem") || ((_a = source.closest(".chord")) === null || _a === void 0 ? void 0 : _a.querySelector(".stem")) || ((_b = source.closest(".chord")) === null || _b === void 0 ? void 0 : _b.querySelector(".notehead")) || source.querySelector(".notehead");
  var upperBoundTarget = target.closest("#interactionOverlay").querySelector("[refId=" + upperBoundSource.id + "]");
  var coordsUpperBound = coordinates.getDOMMatrixCoordinates(upperBoundTarget, target.closest("#interactionOverlay"));
  var targetWidth;
  targetWidth = parseFloat(target.closest("#interactionOverlay").querySelector(".barLine rect").getAttribute("width")) * 2; // very crude heuristic
  noteHeadTarget.querySelector("rect").setAttribute("width", targetWidth.toString());
  target.setAttribute("width", targetWidth.toString());
  target.setAttribute("x", coordsNoteHead.x.toString());
  target.setAttribute("y", coordsUpperBound.y.toString());
  var noteHeadHeight;
  noteHeadHeight = parseFloat(target.closest("#interactionOverlay").querySelector(".barLine rect").getAttribute("width")) * 2; // very crude heuristic
  noteHeadTarget.querySelector("rect").setAttribute("height", noteHeadHeight.toString());
  coordsNoteHead = coordinates.getDOMMatrixCoordinates(noteHeadTarget, target.closest("#interactionOverlay"));
  if (source.querySelector(".stem") !== null) {
    adjustHightToLowestStaffLine(source, target);
  }
}
function nullifyBBox(target) {
  target.setAttribute("width", "1");
  target.setAttribute("height", "1");
}
function halfWidth(target) {
  var w = parseFloat(target.getAttribute("width")) / 2;
  target.setAttribute("width", w.toString());
}

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js":
/*!************************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/mappings.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unicodeToTimesig = exports.clefToLine = exports.octToNum = exports.modButtonToAccid = exports.accidToModButtonId = exports.numToDotButtonId = exports.NoteButtonIdToNum = exports.numToNoteButtonId = exports.keyIdToSig = exports.keysigToNotes = exports.nextStepUp = exports.nextStepDown = exports.noteToB = exports.noteToCross = exports.idToClef = exports.keyCodeNoteMap = exports.idxNotePhantomMapBelowC = exports.idxNotePhantomMapAboveC = exports.idxNotePhantomMapBelowF = exports.idxNotePhantomMapAboveF = exports.idxNotePhantomMapBelowG = exports.idxNotePhantomMapAboveG = exports.idxNoteMapCClef = exports.idxNoteMapFClef = exports.idxNoteMapGClef = void 0;
exports.idxNoteMapGClef = new Map();
exports.idxNoteMapGClef.set(0, "f5");
exports.idxNoteMapGClef.set(1, "e5");
exports.idxNoteMapGClef.set(2, "d5");
exports.idxNoteMapGClef.set(3, "c5");
exports.idxNoteMapGClef.set(4, "b4");
exports.idxNoteMapGClef.set(5, "a4");
exports.idxNoteMapGClef.set(6, "g4");
exports.idxNoteMapGClef.set(7, "f4");
exports.idxNoteMapGClef.set(8, "e4");
exports.idxNoteMapFClef = new Map();
exports.idxNoteMapFClef.set(0, "a3");
exports.idxNoteMapFClef.set(1, "g3");
exports.idxNoteMapFClef.set(2, "f3");
exports.idxNoteMapFClef.set(3, "e3");
exports.idxNoteMapFClef.set(4, "d3");
exports.idxNoteMapFClef.set(5, "c3");
exports.idxNoteMapFClef.set(6, "b2");
exports.idxNoteMapFClef.set(7, "a2");
exports.idxNoteMapFClef.set(8, "g2");
exports.idxNoteMapCClef = new Map();
exports.idxNoteMapCClef.set(0, "g4");
exports.idxNoteMapCClef.set(1, "f4");
exports.idxNoteMapCClef.set(2, "e4");
exports.idxNoteMapCClef.set(3, "d4");
exports.idxNoteMapCClef.set(4, "c4");
exports.idxNoteMapCClef.set(5, "b3");
exports.idxNoteMapCClef.set(6, "a3");
exports.idxNoteMapCClef.set(7, "g3");
exports.idxNoteMapCClef.set(8, "f3");
exports.idxNotePhantomMapAboveG = new Map();
exports.idxNotePhantomMapAboveG.set(0, "g5");
exports.idxNotePhantomMapAboveG.set(1, "a5");
exports.idxNotePhantomMapAboveG.set(2, "b5");
exports.idxNotePhantomMapAboveG.set(3, "c6");
exports.idxNotePhantomMapAboveG.set(4, "d6");
exports.idxNotePhantomMapAboveG.set(5, "e6");
exports.idxNotePhantomMapAboveG.set(6, "f6");
exports.idxNotePhantomMapAboveG.set(7, "g6");
exports.idxNotePhantomMapAboveG.set(8, "a6");
exports.idxNotePhantomMapAboveG.set(9, "b6");
exports.idxNotePhantomMapAboveG.set(10, "c7");
exports.idxNotePhantomMapAboveG.set(11, "d7");
exports.idxNotePhantomMapAboveG.set(12, "e7");
exports.idxNotePhantomMapAboveG.set(13, "f7");
exports.idxNotePhantomMapAboveG.set(14, "g7");
exports.idxNotePhantomMapAboveG.set(15, "a7");
exports.idxNotePhantomMapAboveG.set(16, "b7");
exports.idxNotePhantomMapAboveG.set(17, "c8");
exports.idxNotePhantomMapBelowG = new Map();
exports.idxNotePhantomMapBelowG.set(0, "d4");
exports.idxNotePhantomMapBelowG.set(1, "c4");
exports.idxNotePhantomMapBelowG.set(2, "b3");
exports.idxNotePhantomMapBelowG.set(3, "a3");
exports.idxNotePhantomMapBelowG.set(4, "g3");
exports.idxNotePhantomMapBelowG.set(5, "f3");
exports.idxNotePhantomMapBelowG.set(6, "e3");
exports.idxNotePhantomMapBelowG.set(7, "d3");
exports.idxNotePhantomMapBelowG.set(8, "c3");
exports.idxNotePhantomMapBelowG.set(9, "b2");
exports.idxNotePhantomMapBelowG.set(10, "a2");
exports.idxNotePhantomMapBelowG.set(11, "g2");
exports.idxNotePhantomMapBelowG.set(12, "f2");
exports.idxNotePhantomMapBelowG.set(13, "e2");
exports.idxNotePhantomMapBelowG.set(14, "d2");
exports.idxNotePhantomMapBelowG.set(15, "c2");
exports.idxNotePhantomMapBelowG.set(16, "b1");
exports.idxNotePhantomMapBelowG.set(17, "a1");
exports.idxNotePhantomMapBelowG.set(18, "g1");
exports.idxNotePhantomMapBelowG.set(19, "f1");
exports.idxNotePhantomMapBelowG.set(20, "e1");
exports.idxNotePhantomMapBelowG.set(21, "d1");
exports.idxNotePhantomMapBelowG.set(22, "c2");
exports.idxNotePhantomMapBelowG.set(23, "b0");
exports.idxNotePhantomMapBelowG.set(24, "a0");
exports.idxNotePhantomMapAboveF = new Map();
exports.idxNotePhantomMapAboveF.set(0, "b3");
exports.idxNotePhantomMapAboveF.set(1, "c4");
exports.idxNotePhantomMapAboveF.set(2, "d4");
exports.idxNotePhantomMapAboveF.set(3, "e4");
exports.idxNotePhantomMapAboveF.set(4, "f4");
exports.idxNotePhantomMapAboveF.set(5, "g4");
exports.idxNotePhantomMapAboveF.set(6, "a4");
exports.idxNotePhantomMapAboveF.set(7, "b4");
exports.idxNotePhantomMapAboveF.set(8, "c5");
exports.idxNotePhantomMapAboveF.set(9, "d5");
exports.idxNotePhantomMapAboveF.set(10, "e5");
exports.idxNotePhantomMapAboveF.set(11, "f5");
exports.idxNotePhantomMapAboveF.set(12, "g5");
exports.idxNotePhantomMapAboveF.set(13, "a5");
exports.idxNotePhantomMapAboveF.set(14, "b5");
exports.idxNotePhantomMapAboveF.set(15, "c6");
exports.idxNotePhantomMapAboveF.set(16, "d6");
exports.idxNotePhantomMapAboveF.set(17, "e6");
exports.idxNotePhantomMapBelowF = new Map();
exports.idxNotePhantomMapBelowF.set(0, "f2");
exports.idxNotePhantomMapBelowF.set(1, "e2");
exports.idxNotePhantomMapBelowF.set(2, "d2");
exports.idxNotePhantomMapBelowF.set(3, "c2");
exports.idxNotePhantomMapBelowF.set(4, "b1");
exports.idxNotePhantomMapBelowF.set(5, "a1");
exports.idxNotePhantomMapBelowF.set(6, "g1");
exports.idxNotePhantomMapBelowF.set(7, "f1");
exports.idxNotePhantomMapBelowF.set(8, "e1");
exports.idxNotePhantomMapBelowF.set(9, "d1");
exports.idxNotePhantomMapBelowF.set(10, "c1");
exports.idxNotePhantomMapBelowF.set(11, "b0");
exports.idxNotePhantomMapBelowF.set(12, "a0");
exports.idxNotePhantomMapBelowF.set(13, "g0");
exports.idxNotePhantomMapBelowF.set(14, "f0");
exports.idxNotePhantomMapBelowF.set(15, "e0");
exports.idxNotePhantomMapBelowF.set(16, "d0");
exports.idxNotePhantomMapBelowF.set(17, "c0");
exports.idxNotePhantomMapAboveC = new Map();
exports.idxNotePhantomMapAboveC.set(0, "a4");
exports.idxNotePhantomMapAboveC.set(1, "b4");
exports.idxNotePhantomMapAboveC.set(2, "c5");
exports.idxNotePhantomMapAboveC.set(3, "d5");
exports.idxNotePhantomMapAboveC.set(4, "e5");
exports.idxNotePhantomMapAboveC.set(5, "f5");
exports.idxNotePhantomMapAboveC.set(6, "g5");
exports.idxNotePhantomMapAboveC.set(7, "a5");
exports.idxNotePhantomMapAboveC.set(8, "b5");
exports.idxNotePhantomMapAboveC.set(9, "c6");
exports.idxNotePhantomMapAboveC.set(10, "d6");
exports.idxNotePhantomMapAboveC.set(11, "e6");
exports.idxNotePhantomMapAboveC.set(12, "f6");
exports.idxNotePhantomMapAboveC.set(13, "g6");
exports.idxNotePhantomMapAboveC.set(14, "a6");
exports.idxNotePhantomMapAboveC.set(15, "b6");
exports.idxNotePhantomMapAboveC.set(16, "c7");
exports.idxNotePhantomMapAboveC.set(17, "d7");
exports.idxNotePhantomMapBelowC = new Map();
exports.idxNotePhantomMapBelowC.set(0, "e3");
exports.idxNotePhantomMapBelowC.set(1, "d3");
exports.idxNotePhantomMapBelowC.set(2, "c3");
exports.idxNotePhantomMapBelowC.set(3, "b2");
exports.idxNotePhantomMapBelowC.set(4, "a2");
exports.idxNotePhantomMapBelowC.set(5, "g2");
exports.idxNotePhantomMapBelowC.set(6, "f2");
exports.idxNotePhantomMapBelowC.set(7, "e2");
exports.idxNotePhantomMapBelowC.set(8, "d2");
exports.idxNotePhantomMapBelowC.set(9, "c2");
exports.idxNotePhantomMapBelowC.set(10, "b1");
exports.idxNotePhantomMapBelowC.set(11, "a1");
exports.idxNotePhantomMapBelowC.set(12, "g1");
exports.idxNotePhantomMapBelowC.set(13, "f1");
exports.idxNotePhantomMapBelowC.set(14, "e1");
exports.idxNotePhantomMapBelowC.set(15, "d1");
exports.idxNotePhantomMapBelowC.set(16, "c1");
exports.idxNotePhantomMapBelowC.set(17, "b0");
exports.idxNotePhantomMapBelowC.set(18, "a0");
exports.idxNotePhantomMapBelowC.set(19, "g0");
exports.idxNotePhantomMapBelowC.set(20, "f0");
exports.idxNotePhantomMapBelowC.set(21, "e0");
exports.idxNotePhantomMapBelowC.set(22, "d0");
exports.idxNotePhantomMapBelowC.set(23, "c0");
exports.keyCodeNoteMap = new Map();
exports.keyCodeNoteMap.set("KeyC", "c");
exports.keyCodeNoteMap.set("KeyD", "d");
exports.keyCodeNoteMap.set("KeyE", "e");
exports.keyCodeNoteMap.set("KeyF", "f");
exports.keyCodeNoteMap.set("KeyG", "g");
exports.keyCodeNoteMap.set("KeyA", "a");
exports.keyCodeNoteMap.set("KeyB", "b");
exports.keyCodeNoteMap.set("KeyH", "b"); //alternative when keydown h
exports.idToClef = new Map();
exports.idToClef.set("#E050", "G");
exports.idToClef.set("#E062", "F");
exports.idToClef.set("#E05C", "C");
exports.noteToCross = new Map();
exports.noteToCross.set("f", "f#");
exports.noteToCross.set("c", "c#");
exports.noteToCross.set("g", "g#");
exports.noteToCross.set("d", "d#");
exports.noteToCross.set("a", "a#");
exports.noteToCross.set("e", "e#");
exports.noteToCross.set("b", "b#");
exports.noteToB = new Map();
exports.noteToB.set("b", "bb");
exports.noteToB.set("e", "eb");
exports.noteToB.set("a", "ab");
exports.noteToB.set("d", "db");
exports.noteToB.set("g", "gb");
exports.noteToB.set("c", "cb");
exports.noteToB.set("f", "fb");
exports.nextStepDown = new Map();
exports.nextStepDown.set("b", "bf");
exports.nextStepDown.set("bf", "a");
exports.nextStepDown.set("as", "a");
exports.nextStepDown.set("a", "af");
exports.nextStepDown.set("gs", "g");
exports.nextStepDown.set("af", "g");
exports.nextStepDown.set("g", "gf");
exports.nextStepDown.set("fs", "f");
exports.nextStepDown.set("gf", "f");
exports.nextStepDown.set("es", "e");
exports.nextStepDown.set("f", "e");
exports.nextStepDown.set("ff", "ef");
exports.nextStepDown.set("e", "ef");
exports.nextStepDown.set("ds", "d");
exports.nextStepDown.set("ef", "d");
exports.nextStepDown.set("d", "df");
exports.nextStepDown.set("cs", "c");
exports.nextStepDown.set("df", "c");
exports.nextStepDown.set("bs", "b");
exports.nextStepDown.set("c", "b");
exports.nextStepDown.set("cf", "bf");
exports.nextStepUp = new Map();
exports.nextStepUp.set("c", "cs");
exports.nextStepUp.set("cs", "d");
exports.nextStepUp.set("df", "d");
exports.nextStepUp.set("d", "ds");
exports.nextStepUp.set("ds", "e");
exports.nextStepUp.set("ef", "e");
exports.nextStepUp.set("ff", "f");
exports.nextStepUp.set("e", "f");
exports.nextStepUp.set("f", "fs");
exports.nextStepUp.set("gf", "g");
exports.nextStepUp.set("fs", "g");
exports.nextStepUp.set("g", "gs");
exports.nextStepUp.set("af", "a");
exports.nextStepUp.set("gs", "a");
exports.nextStepUp.set("a", "as");
exports.nextStepUp.set("bf", "b");
exports.nextStepUp.set("as", "b");
exports.nextStepUp.set("cf", "c");
exports.nextStepUp.set("b", "c");
exports.nextStepUp.set("bs", "cs");
exports.keysigToNotes = new Map();
exports.keysigToNotes.set("0", []);
exports.keysigToNotes.set("1s", ["f"]);
exports.keysigToNotes.set("2s", ["f", "c"]);
exports.keysigToNotes.set("3s", ["f", "c", "g"]);
exports.keysigToNotes.set("4s", ["f", "c", "g", "d"]);
exports.keysigToNotes.set("5s", ["f", "c", "g", "d", "a"]);
exports.keysigToNotes.set("6s", ["f", "c", "g", "d", "a", "e"]);
exports.keysigToNotes.set("1f", ["b"]);
exports.keysigToNotes.set("2f", ["b", "e"]);
exports.keysigToNotes.set("3f", ["b", "e", "a"]);
exports.keysigToNotes.set("4f", ["b", "e", "a", "d"]);
exports.keysigToNotes.set("5f", ["b", "e", "a", "d", "g"]);
exports.keysigToNotes.set("6f", ["b", "e", "a", "d", "g", "c"]);
exports.keyIdToSig = new Map();
exports.keyIdToSig.set("KeyGMaj", "1s");
exports.keyIdToSig.set("KeyDMaj", "2s");
exports.keyIdToSig.set("KeyAMaj", "3s");
exports.keyIdToSig.set("KeyEMaj", "4s");
exports.keyIdToSig.set("KeyBMaj", "5s");
exports.keyIdToSig.set("KeyF#Maj", "6s");
exports.keyIdToSig.set("KeyFMaj", "1f");
exports.keyIdToSig.set("KeyBbMaj", "2f");
exports.keyIdToSig.set("KeyEbMaj", "3f");
exports.keyIdToSig.set("KeyAbMaj", "4f");
exports.keyIdToSig.set("KeyDbMaj", "5f");
exports.keyIdToSig.set("KeyGbMaj", "6f");
exports.keyIdToSig.set("KeyCMaj", "0");
exports.numToNoteButtonId = new Map();
exports.numToNoteButtonId.set("1", "fullNote");
exports.numToNoteButtonId.set("2", "halfNote");
exports.numToNoteButtonId.set("4", "quarterNote");
exports.numToNoteButtonId.set("8", "eigthNote");
exports.numToNoteButtonId.set("16", "sixteenthNote");
exports.numToNoteButtonId.set("32", "thirtysecondNote");
exports.NoteButtonIdToNum = new Map();
exports.NoteButtonIdToNum.set("fullNote", 1);
exports.NoteButtonIdToNum.set("halfNote", 2);
exports.NoteButtonIdToNum.set("quarterNote", 4);
exports.NoteButtonIdToNum.set("eigthNote", 8);
exports.NoteButtonIdToNum.set("sixteenthNote", 16);
exports.NoteButtonIdToNum.set("thirtysecondNote", 32);
exports.numToDotButtonId = new Map();
exports.numToDotButtonId.set("1", "oneDot");
exports.numToDotButtonId.set("2", "twoDot");
exports.accidToModButtonId = new Map();
exports.accidToModButtonId.set("s", "alterUp");
exports.accidToModButtonId.set("f", "alterDown");
exports.accidToModButtonId.set("n", "alterNeutral");
exports.accidToModButtonId.set("ff", "alterDDown");
exports.accidToModButtonId.set("ss", "alterDUp");
exports.modButtonToAccid = new Map();
exports.modButtonToAccid.set("alterUp", "s");
exports.modButtonToAccid.set("alterDown", "f");
exports.modButtonToAccid.set("alterNeutral", "n");
exports.modButtonToAccid.set("alterDDown", "ff");
exports.modButtonToAccid.set("alterDUp", "ss");
exports.octToNum = new Map();
exports.octToNum.set("subkontraOct", "0");
exports.octToNum.set("kontraOct", "1");
exports.octToNum.set("greatOct", "2");
exports.octToNum.set("smallOct", "3");
exports.octToNum.set("LineOct1", "4");
exports.octToNum.set("LineOct2", "5");
exports.octToNum.set("LineOct3", "6");
exports.octToNum.set("LineOct4", "7");
exports.octToNum.set("LineOct5", "8");
exports.clefToLine = new Map();
exports.clefToLine.set("G", "2");
exports.clefToLine.set("C", "3");
exports.clefToLine.set("F", "4");
exports.unicodeToTimesig = new Map();
exports.unicodeToTimesig.set("E080", "0");
exports.unicodeToTimesig.set("E081", "1");
exports.unicodeToTimesig.set("E082", "2");
exports.unicodeToTimesig.set("E083", "3");
exports.unicodeToTimesig.set("E084", "4");
exports.unicodeToTimesig.set("E085", "5");
exports.unicodeToTimesig.set("E086", "6");
exports.unicodeToTimesig.set("E087", "7");
exports.unicodeToTimesig.set("E088", "8");
exports.unicodeToTimesig.set("E089", "9");

/***/ }),

/***/ "../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js":
/*!**********************************************************************************************************************************!*\
  !*** ../../../../../../../../../../../Users/nowakowski/Documents/Git_Projects/VerovioScoreEditor/src/scripts/js/utils/random.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.uuidv4 = void 0;
/**
 * Formats raw UUID data into the proper string format.
 * @param data - Raw UUID data.
 * @returns Formatted UUID string.
 */
function uint8ToUuid(data) {
  if (data.length !== 16) {
    return '';
  }
  function cb(previous, current) {
    return previous + current.toString(16).padStart(2, '0');
  }
  // deleted '-' for parsing with QuerySelector
  return "A" + data.slice(0, 4).reduce(cb, '') + 'a' + data.slice(4, 6).reduce(cb, '') + 'b' + data.slice(6, 8).reduce(cb, '') + 'c' + data.slice(8, 10).reduce(cb, '') + 'd' + data.slice(10).reduce(cb, '');
}
/**
 * @returns A [version 4 UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)).
 */
function uuidv4() {
  // Check for crypto API
  if (window.crypto === undefined) {
    return uint8ToUuid(new Uint8Array(16));
  }
  // Get 16 octets for UUID
  const octets = new Uint8Array(16);
  const modifiers = Uint8Array.from([parseInt('01000000', 2), parseInt('10000000', 2), parseInt('00001111', 2), parseInt('00111111', 2) // Mask to zero higher bits, variant
  ]);

  window.crypto.getRandomValues(octets);
  // Set version bits and variant bits
  octets[6] = octets[6] & modifiers[2] | modifiers[0];
  octets[8] = octets[8] & modifiers[3] | modifiers[1];
  return uint8ToUuid(octets);
}
exports.uuidv4 = uuidv4;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,